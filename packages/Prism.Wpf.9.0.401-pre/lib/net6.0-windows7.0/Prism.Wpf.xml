<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Prism.Wpf</name>
    </assembly>
    <members>
        <member name="T:Prism.Common.MvvmHelpers">
            <summary>
            Helper class for MVVM.
            </summary>
        </member>
        <member name="M:Prism.Common.MvvmHelpers.AutowireViewModel(System.Object)">
            <summary>
            Sets the AutoWireViewModel property to true for the <paramref name="viewOrViewModel"/>.
            </summary>
            <remarks>
            The AutoWireViewModel property will only be set to true if the view
            is a <see cref="T:System.Windows.FrameworkElement"/>, the DataContext of the view is null, and
            the AutoWireViewModel property of the view is null.
            </remarks>
            <param name="viewOrViewModel">The View or ViewModel.</param>
        </member>
        <member name="M:Prism.Common.MvvmHelpers.ViewAndViewModelAction``1(System.Object,System.Action{``0})">
            <summary>
            Perform an <see cref="T:System.Action`1"/> on a view and ViewModel.
            </summary>
            <remarks>
            The action will be performed on the view and its ViewModel if they implement <typeparamref name="T"/>.
            </remarks>
            <typeparam name="T">The <see cref="T:System.Action`1"/> parameter type.</typeparam>
            <param name="view">The view to perform the <see cref="T:System.Action`1"/> on.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to perform.</param>
        </member>
        <member name="M:Prism.Common.MvvmHelpers.GetImplementerFromViewOrViewModel``1(System.Object)">
            <summary>
            Get an implementer from a View or ViewModel.
            </summary>
            <remarks>
            If the view implements <typeparamref name="T"/> it will be returned.
            Otherwise if the view's <see cref="P:System.Windows.FrameworkElement.DataContext"/> implements <typeparamref name="T"/> it will be returned instead.
            </remarks>
            <typeparam name="T">The implementer type to get.</typeparam>
            <param name="view">The view to get <typeparamref name="T"/> from.</param>
            <returns>View or ViewModel as <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Prism.Common.ObservableObject`1">
            <summary>
            Class that wraps an object, so that other classes can notify for Change events. Typically, this class is set as
            a Dependency Property on DependencyObjects, and allows other classes to observe any changes in the Value.
            </summary>
            <remarks>
            This class is required, because in Silverlight, it's not possible to receive Change notifications for Dependency properties that you do not own.
            </remarks>
            <typeparam name="T">The type of the property that's wrapped in the Observable object</typeparam>
        </member>
        <member name="F:Prism.Common.ObservableObject`1.ValueProperty">
            <summary>
            Identifies the Value property of the ObservableObject
            </summary>
        </member>
        <member name="E:Prism.Common.ObservableObject`1.PropertyChanged">
            <summary>
            Event that gets invoked when the Value property changes.
            </summary>
        </member>
        <member name="P:Prism.Common.ObservableObject`1.Value">
            <summary>
            The value that's wrapped inside the ObservableObject.
            </summary>
        </member>
        <member name="T:Prism.Dialogs.Dialog">
            <summary>
            This class contains <see cref="T:Prism.Dialogs.IDialogWindow"/> attached properties.
            </summary>
        </member>
        <member name="F:Prism.Dialogs.Dialog.WindowStyleProperty">
            <summary>
            Identifies the WindowStyle attached property.
            </summary>
            <remarks>
            This attached property is used to specify the style of a <see cref="T:Prism.Dialogs.IDialogWindow"/>.
            </remarks>
        </member>
        <member name="M:Prism.Dialogs.Dialog.GetWindowStyle(System.Windows.DependencyObject)">
            <summary>
            Gets the value for the <see cref="F:Prism.Dialogs.Dialog.WindowStyleProperty"/> attached property.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The <see cref="F:Prism.Dialogs.Dialog.WindowStyleProperty"/> attached to the <paramref name="obj"/> element.</returns>
        </member>
        <member name="M:Prism.Dialogs.Dialog.SetWindowStyle(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Sets the <see cref="F:Prism.Dialogs.Dialog.WindowStyleProperty"/> attached property.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The Style to attach.</param>
        </member>
        <member name="F:Prism.Dialogs.Dialog.WindowStartupLocationProperty">
            <summary>
            Identifies the WindowStartupLocation attached property.
            </summary>
            <remarks>
            This attached property is used to specify the startup location of a <see cref="T:Prism.Dialogs.IDialogWindow"/>.
            </remarks>
        </member>
        <member name="M:Prism.Dialogs.Dialog.GetWindowStartupLocation(System.Windows.DependencyObject)">
            <summary>
            Gets the value for the <see cref="F:Prism.Dialogs.Dialog.WindowStartupLocationProperty"/> attached property.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The <see cref="F:Prism.Dialogs.Dialog.WindowStartupLocationProperty"/> attached to the <paramref name="obj"/> element.</returns>
        </member>
        <member name="M:Prism.Dialogs.Dialog.SetWindowStartupLocation(System.Windows.DependencyObject,System.Windows.WindowStartupLocation)">
            <summary>
            Sets the <see cref="F:Prism.Dialogs.Dialog.WindowStartupLocationProperty"/> attached property.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The WindowStartupLocation to attach.</param>
        </member>
        <member name="T:Prism.Dialogs.DialogService">
            <summary>
            Implements <see cref="T:Prism.Dialogs.IDialogService"/> to show modal and non-modal dialogs.
            </summary>
            <remarks>
            The dialog's ViewModel must implement IDialogAware.
            </remarks>
        </member>
        <member name="M:Prism.Dialogs.DialogService.#ctor(Prism.Ioc.IContainerExtension)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Dialogs.DialogService"/> class.
            </summary>
            <param name="containerExtension">The <see cref="T:Prism.Ioc.IContainerExtension" /></param>
        </member>
        <member name="M:Prism.Dialogs.DialogService.ShowDialog(System.String,Prism.Dialogs.IDialogParameters,Prism.Dialogs.DialogCallback)">
            <summary>
            Shows a modal dialog.
            </summary>
            <param name="name">The name of the dialog to show.</param>
            <param name="parameters">The parameters to pass to the dialog.</param>
            <param name="callback">The action to perform when the dialog is closed.</param>
        </member>
        <member name="M:Prism.Dialogs.DialogService.ShowDialogWindow(Prism.Dialogs.IDialogWindow,System.Boolean)">
            <summary>
            Shows the dialog window.
            </summary>
            <param name="dialogWindow">The dialog window to show.</param>
            <param name="isModal">If true; dialog is shown as a modal</param>
        </member>
        <member name="M:Prism.Dialogs.DialogService.CreateDialogWindow(System.String)">
            <summary>
            Create a new <see cref="T:Prism.Dialogs.IDialogWindow"/>.
            </summary>
            <param name="name">The name of the hosting window registered with the IContainerRegistry.</param>
            <returns>The created <see cref="T:Prism.Dialogs.IDialogWindow"/>.</returns>
        </member>
        <member name="M:Prism.Dialogs.DialogService.ConfigureDialogWindowContent(System.String,Prism.Dialogs.IDialogWindow,Prism.Dialogs.IDialogParameters)">
            <summary>
            Configure <see cref="T:Prism.Dialogs.IDialogWindow"/> content.
            </summary>
            <param name="dialogName">The name of the dialog to show.</param>
            <param name="window">The hosting window.</param>
            <param name="parameters">The parameters to pass to the dialog.</param>
        </member>
        <member name="M:Prism.Dialogs.DialogService.ConfigureDialogWindowEvents(Prism.Dialogs.IDialogWindow,Prism.Dialogs.DialogCallback)">
            <summary>
            Configure <see cref="T:Prism.Dialogs.IDialogWindow"/> and <see cref="T:Prism.Dialogs.IDialogAware"/> events.
            </summary>
            <param name="dialogWindow">The hosting window.</param>
            <param name="callback">The action to perform when the dialog is closed.</param>
        </member>
        <member name="M:Prism.Dialogs.DialogService.ConfigureDialogWindowProperties(Prism.Dialogs.IDialogWindow,System.Windows.FrameworkElement,Prism.Dialogs.IDialogAware)">
            <summary>
            Configure <see cref="T:Prism.Dialogs.IDialogWindow"/> properties.
            </summary>
            <param name="window">The hosting window.</param>
            <param name="dialogContent">The dialog to show.</param>
            <param name="viewModel">The dialog's ViewModel.</param>
        </member>
        <member name="T:Prism.Dialogs.DialogWindow">
            <summary>
            Prism's default dialog host.
            </summary>
            <summary>
            DialogWindow
            </summary>
        </member>
        <member name="P:Prism.Dialogs.DialogWindow.Result">
            <summary>
            The <see cref="T:Prism.Dialogs.IDialogResult"/> of the dialog.
            </summary>
        </member>
        <member name="M:Prism.Dialogs.DialogWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Dialogs.DialogWindow"/> class.
            </summary>
        </member>
        <member name="M:Prism.Dialogs.DialogWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Prism.Dialogs.IDialogServiceCompatExtensions">
            <summary>
            Extensions for the IDialogService
            </summary>
        </member>
        <member name="M:Prism.Dialogs.IDialogServiceCompatExtensions.Show(Prism.Dialogs.IDialogService,System.String,Prism.Dialogs.IDialogParameters,System.Action{Prism.Dialogs.IDialogResult})">
            <summary>
            Shows a non-modal dialog.
            </summary>
            <param name="dialogService">The DialogService</param>
            <param name="name">The name of the dialog to show.</param>
            <param name="parameters">The parameters to pass to the dialog.</param>
            <param name="callback">The action to perform when the dialog is closed.</param>
        </member>
        <member name="M:Prism.Dialogs.IDialogServiceCompatExtensions.Show(Prism.Dialogs.IDialogService,System.String,Prism.Dialogs.IDialogParameters,System.Action{Prism.Dialogs.IDialogResult},System.String)">
            <summary>
            Shows a non-modal dialog.
            </summary>
            <param name="dialogService">The DialogService</param>
            <param name="name">The name of the dialog to show.</param>
            <param name="parameters">The parameters to pass to the dialog.</param>
            <param name="callback">The action to perform when the dialog is closed.</param>
            <param name="windowName">The name of the hosting window registered with the IContainerRegistry.</param>
        </member>
        <member name="M:Prism.Dialogs.IDialogServiceCompatExtensions.Show(Prism.Dialogs.IDialogService,System.String)">
            <summary>
            Shows a non-modal dialog.
            </summary>
            <param name="dialogService">The DialogService</param>
            <param name="name">The name of the dialog to show.</param>
        </member>
        <member name="M:Prism.Dialogs.IDialogServiceCompatExtensions.Show(Prism.Dialogs.IDialogService,System.String,System.Action{Prism.Dialogs.IDialogResult})">
            <summary>
            Shows a non-modal dialog.
            </summary>
            <param name="dialogService">The DialogService</param>
            <param name="name">The name of the dialog to show.</param>
            <param name="callback">The action to perform when the dialog is closed.</param>
        </member>
        <member name="T:Prism.Dialogs.IDialogWindow">
            <summary>
            Interface for a dialog hosting window.
            </summary>
        </member>
        <member name="P:Prism.Dialogs.IDialogWindow.Content">
            <summary>
            Dialog content.
            </summary>
        </member>
        <member name="M:Prism.Dialogs.IDialogWindow.Close">
            <summary>
            Close the window.
            </summary>
        </member>
        <member name="P:Prism.Dialogs.IDialogWindow.Owner">
            <summary>
            The window's owner.
            </summary>
        </member>
        <member name="M:Prism.Dialogs.IDialogWindow.Show">
            <summary>
            Show a non-modal dialog.
            </summary>
        </member>
        <member name="M:Prism.Dialogs.IDialogWindow.ShowDialog">
            <summary>
            Show a modal dialog.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Prism.Dialogs.IDialogWindow.DataContext">
            <summary>
            The data context of the window.
            </summary>
            <remarks>
            The data context must implement <see cref="T:Prism.Dialogs.IDialogAware"/>.
            </remarks>
        </member>
        <member name="E:Prism.Dialogs.IDialogWindow.Loaded">
            <summary>
            Called when the window is loaded.
            </summary>
        </member>
        <member name="E:Prism.Dialogs.IDialogWindow.Closed">
            <summary>
            Called when the window is closed.
            </summary>
        </member>
        <member name="E:Prism.Dialogs.IDialogWindow.Closing">
            <summary>
            Called when the window is closing.
            </summary>
        </member>
        <member name="P:Prism.Dialogs.IDialogWindow.Result">
            <summary>
            The result of the dialog.
            </summary>
        </member>
        <member name="P:Prism.Dialogs.IDialogWindow.Style">
            <summary>
            The window style.
            </summary>
        </member>
        <member name="T:Prism.Dialogs.IDialogWindowExtensions">
            <summary>
            <see cref="T:Prism.Dialogs.IDialogWindow"/> extensions.
            </summary>
        </member>
        <member name="M:Prism.Dialogs.IDialogWindowExtensions.GetDialogViewModel(Prism.Dialogs.IDialogWindow)">
            <summary>
            Get the <see cref="T:Prism.Dialogs.IDialogAware"/> ViewModel from a <see cref="T:Prism.Dialogs.IDialogWindow"/>.
            </summary>
            <param name="dialogWindow"><see cref="T:Prism.Dialogs.IDialogWindow"/> to get ViewModel from.</param>
            <returns>ViewModel as a <see cref="T:Prism.Dialogs.IDialogAware"/>.</returns>
        </member>
        <member name="T:Prism.Dialogs.KnownDialogParameters">
            <summary>
            Provides Dialog Parameter Keys for well known paramotors used by the <see cref="T:Prism.Dialogs.IDialogService"/>
            </summary>
        </member>
        <member name="F:Prism.Dialogs.KnownDialogParameters.WindowName">
            <summary>
            The name of the window
            </summary>
        </member>
        <member name="F:Prism.Dialogs.KnownDialogParameters.ShowNonModal">
            <summary>
            Flag to show the Dialog Modally or Non-Modally
            </summary>
        </member>
        <member name="M:Prism.DependencyObjectExtensions.HasBinding(System.Windows.FrameworkElement,System.Windows.DependencyProperty)">
            <summary>
            Determines if a <see cref="T:System.Windows.DependencyProperty"/> has a binding set
            </summary>
            <param name="instance">The to use to search for the property</param>
            <param name="property">The property to search</param>
            <returns><c>true</c> if there is an active binding, otherwise <c>false</c></returns>
        </member>
        <member name="T:Prism.Interactivity.CommandBehaviorBase`1">
            <summary>
            Base behavior to handle connecting a <see cref="T:System.Windows.Controls.Control"/> to a Command.
            </summary>
            <typeparam name="T">The target object must derive from Control.</typeparam>
            <remarks>
            CommandBehaviorBase can be used to provide new behaviors for commands.
            </remarks>
        </member>
        <member name="M:Prism.Interactivity.CommandBehaviorBase`1.#ctor(`0)">
            <summary>
            Constructor specifying the target object.
            </summary>
            <param name="targetObject">The target object the behavior is attached to.</param>
        </member>
        <member name="P:Prism.Interactivity.CommandBehaviorBase`1.AutoEnable">
            <summary>
            If <c>true</c> the target object's IsEnabled property will update based on the commands ability to execute.
            If <c>false</c> the target object's IsEnabled property will not update.
            </summary>
        </member>
        <member name="P:Prism.Interactivity.CommandBehaviorBase`1.Command">
            <summary>
            Corresponding command to be execute and monitored for <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/>.
            </summary>
        </member>
        <member name="P:Prism.Interactivity.CommandBehaviorBase`1.CommandParameter">
            <summary>
            The parameter to supply the command during execution.
            </summary>
        </member>
        <member name="P:Prism.Interactivity.CommandBehaviorBase`1.TargetObject">
            <summary>
            Object to which this behavior is attached.
            </summary>
        </member>
        <member name="M:Prism.Interactivity.CommandBehaviorBase`1.UpdateEnabledState">
            <summary>
            Updates the target object's IsEnabled property based on the commands ability to execute.
            </summary>
        </member>
        <member name="M:Prism.Interactivity.CommandBehaviorBase`1.ExecuteCommand(System.Object)">
            <summary>
            Executes the command, if it's set, providing the <see cref="P:Prism.Interactivity.CommandBehaviorBase`1.CommandParameter"/>.
            </summary>
        </member>
        <member name="T:Prism.Interactivity.InvokeCommandAction">
            <summary>
            Trigger action that executes a command when invoked. 
            It also maintains the Enabled state of the target control based on the CanExecute method of the command.
            </summary>
        </member>
        <member name="F:Prism.Interactivity.InvokeCommandAction.AutoEnableProperty">
            <summary>
            Dependency property identifying if the associated element should automatically be enabled or disabled based on the result of the Command's CanExecute
            </summary>
        </member>
        <member name="P:Prism.Interactivity.InvokeCommandAction.AutoEnable">
            <summary>
            Gets or sets whether or not the associated element will automatically be enabled or disabled based on the result of the commands CanExecute
            </summary>
        </member>
        <member name="F:Prism.Interactivity.InvokeCommandAction.CommandProperty">
            <summary>
            Dependency property identifying the command to execute when invoked.
            </summary>
        </member>
        <member name="P:Prism.Interactivity.InvokeCommandAction.Command">
            <summary>
            Gets or sets the command to execute when invoked.
            </summary>
        </member>
        <member name="F:Prism.Interactivity.InvokeCommandAction.CommandParameterProperty">
            <summary>
            Dependency property identifying the command parameter to supply on command execution.
            </summary>
        </member>
        <member name="P:Prism.Interactivity.InvokeCommandAction.CommandParameter">
            <summary>
            Gets or sets the command parameter to supply on command execution.
            </summary>
        </member>
        <member name="F:Prism.Interactivity.InvokeCommandAction.TriggerParameterPathProperty">
            <summary>
            Dependency property identifying the TriggerParameterPath to be parsed to identify the child property of the trigger parameter to be used as the command parameter.
            </summary>
        </member>
        <member name="P:Prism.Interactivity.InvokeCommandAction.TriggerParameterPath">
            <summary>
            Gets or sets the TriggerParameterPath value.
            </summary>
        </member>
        <member name="M:Prism.Interactivity.InvokeCommandAction.InvokeAction(System.Object)">
            <summary>
            Public wrapper of the Invoke method.
            </summary>
        </member>
        <member name="M:Prism.Interactivity.InvokeCommandAction.Invoke(System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="parameter">This parameter is passed to the command; the CommandParameter specified in the CommandParameterProperty is used for command invocation if not null.</param>
        </member>
        <member name="M:Prism.Interactivity.InvokeCommandAction.OnDetaching">
            <summary>
            Sets the Command and CommandParameter properties to null.
            </summary>
        </member>
        <member name="M:Prism.Interactivity.InvokeCommandAction.OnAttached">
            <summary>
            This method is called after the behavior is attached.
            It updates the command behavior's Command and CommandParameter properties if necessary.
            </summary>
        </member>
        <member name="T:Prism.Interactivity.InvokeCommandAction.ExecutableCommandBehavior">
            <summary>
            A CommandBehavior that exposes a public ExecuteCommand method. It provides the functionality to invoke commands and update Enabled state of the target control.
            It is not possible to make the <see cref="T:Prism.Interactivity.InvokeCommandAction"/> inherit from <see cref="T:Prism.Interactivity.CommandBehaviorBase`1"/>, since the <see cref="T:Prism.Interactivity.InvokeCommandAction"/>
            must already inherit from <see cref="T:Microsoft.Xaml.Behaviors.TriggerAction`1"/>, so we chose to follow the aggregation approach.
            </summary>
        </member>
        <member name="M:Prism.Interactivity.InvokeCommandAction.ExecutableCommandBehavior.#ctor(System.Windows.UIElement)">
            <summary>
            Constructor specifying the target object.
            </summary>
            <param name="target">The target object the behavior is attached to.</param>
        </member>
        <member name="M:Prism.Interactivity.InvokeCommandAction.ExecutableCommandBehavior.ExecuteCommand(System.Object)">
            <summary>
            Executes the command, if it's set.
            </summary>
        </member>
        <member name="T:Prism.Ioc.ContainerProviderExtension">
            <summary>
            Provides Types and Services registered with the Container
            <example>
            <para>
            Usage as markup extension:
            <![CDATA[
              <TextBlock
                Text="{Binding
                  Path=Foo,
                  Converter={prism:ContainerProvider {x:Type local:MyConverter}}}" />
            ]]>
            </para>
            <para>
            Usage as XML element:
            <![CDATA[
              <Window>
                <Window.DataContext>
                  <prism:ContainerProvider Type="{x:Type local:MyViewModel}" />
                </Window.DataContext>
              </Window>
            ]]>
            </para>
            </example>
            </summary>
        </member>
        <member name="M:Prism.Ioc.ContainerProviderExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Ioc.ContainerProviderExtension"/> class.
            </summary>
        </member>
        <member name="M:Prism.Ioc.ContainerProviderExtension.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Ioc.ContainerProviderExtension"/> class.
            </summary>
            <param name="type">The type to Resolve</param>
        </member>
        <member name="P:Prism.Ioc.ContainerProviderExtension.Type">
            <summary>
            The type to Resolve
            </summary>
        </member>
        <member name="P:Prism.Ioc.ContainerProviderExtension.Name">
            <summary>
            The Name used to register the type with the Container
            </summary>
        </member>
        <member name="M:Prism.Ioc.ContainerProviderExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Provide resolved object from <see cref="T:Prism.Ioc.ContainerLocator"/>
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Prism.Ioc.IContainerRegistryExtensions">
            <summary>
            <see cref="T:Prism.Ioc.IContainerRegistry"/> extensions.
            </summary>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterDialog``1(Prism.Ioc.IContainerRegistry,System.String)">
            <summary>
            Registers an object to be used as a dialog in the IDialogService.
            </summary>
            <typeparam name="TView">The Type of object to register as the dialog</typeparam>
            <param name="containerRegistry"></param>
            <param name="name">The unique name to register with the dialog.</param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterDialog``2(Prism.Ioc.IContainerRegistry,System.String)">
            <summary>
            Registers an object to be used as a dialog in the IDialogService.
            </summary>
            <typeparam name="TView">The Type of object to register as the dialog</typeparam>
            <typeparam name="TViewModel">The ViewModel to use as the DataContext for the dialog</typeparam>
            <param name="containerRegistry"></param>
            <param name="name">The unique name to register with the dialog.</param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterDialogWindow``1(Prism.Ioc.IContainerRegistry)">
            <summary>
            Registers an object that implements IDialogWindow to be used to host all dialogs in the IDialogService.
            </summary>
            <typeparam name="TWindow">The Type of the Window class that will be used to host dialogs in the IDialogService</typeparam>
            <param name="containerRegistry"></param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterDialogWindow``1(Prism.Ioc.IContainerRegistry,System.String)">
            <summary>
            Registers an object that implements IDialogWindow to be used to host all dialogs in the IDialogService.
            </summary>
            <typeparam name="TWindow">The Type of the Window class that will be used to host dialogs in the IDialogService</typeparam>
            <param name="containerRegistry"></param>
            <param name="name">The name of the dialog window</param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigation(Prism.Ioc.IContainerRegistry,System.Type,System.String)">
            <summary>
            Registers an object for navigation
            </summary>
            <param name="containerRegistry"></param>
            <param name="type">The type of object to register</param>
            <param name="name">The unique name to register with the object.</param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigation``1(Prism.Ioc.IContainerRegistry,System.String)">
            <summary>
            Registers an object for navigation.
            </summary>
            <typeparam name="T">The Type of the object to register as the view</typeparam>
            <param name="containerRegistry"></param>
            <param name="name">The unique name to register with the object.</param>
        </member>
        <member name="M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigation``2(Prism.Ioc.IContainerRegistry,System.String)">
            <summary>
            Registers an object for navigation with the ViewModel type to be used as the DataContext.
            </summary>
            <typeparam name="TView">The Type of object to register as the view</typeparam>
            <typeparam name="TViewModel">The ViewModel to use as the DataContext for the view</typeparam>
            <param name="containerRegistry"></param>
            <param name="name">The unique name to register with the view</param>
        </member>
        <member name="T:Prism.Modularity.AssemblyResolver">
            <summary>
            Handles AppDomain's AssemblyResolve event to be able to load assemblies dynamically in 
            the LoadFrom context, but be able to reference the type from assemblies loaded in the Load context.
            </summary>
        </member>
        <member name="M:Prism.Modularity.AssemblyResolver.LoadAssemblyFrom(System.String)">
            <summary>
            Registers the specified assembly and resolves the types in it when the AppDomain requests for it.
            </summary>
            <param name="assemblyFilePath">The path to the assembly to load in the LoadFrom context.</param>
            <remarks>This method does not load the assembly immediately, but lazily until someone requests a <see cref="T:System.Type"/>
            declared in the assembly.</remarks>
        </member>
        <member name="M:Prism.Modularity.AssemblyResolver.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>Calls <see cref="M:Prism.Modularity.AssemblyResolver.Dispose(System.Boolean)"/></remarks>.
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Prism.Modularity.AssemblyResolver.Dispose(System.Boolean)">
            <summary>
            Disposes the associated <see cref="T:Prism.Modularity.AssemblyResolver"/>.
            </summary>
            <param name="disposing">When <see langword="true"/>, it is being called from the Dispose method.</param>
        </member>
        <member name="T:Prism.Modularity.ConfigurationModuleCatalog">
            <summary>
            A catalog built from a configuration file.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ConfigurationModuleCatalog.#ctor">
            <summary>
            Builds an instance of ConfigurationModuleCatalog with a <see cref="T:Prism.Modularity.ConfigurationStore"/> as the default store.
            </summary>
        </member>
        <member name="P:Prism.Modularity.ConfigurationModuleCatalog.Store">
            <summary>
            Gets or sets the store where the configuration is kept.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ConfigurationModuleCatalog.InnerLoad">
            <summary>
            Loads the catalog from the configuration.
            </summary>
        </member>
        <member name="T:Prism.Modularity.ConfigurationStore">
            <summary>
            Defines a store for the module metadata.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ConfigurationStore.RetrieveModuleConfigurationSection">
            <summary>
            Gets the module configuration data.
            </summary>
            <returns>A <see cref="T:Prism.Modularity.ModulesConfigurationSection"/> instance.</returns>
        </member>
        <member name="T:Prism.Modularity.DirectoryModuleCatalog">
             <summary>
             Represents a catalog created from a directory on disk.
             </summary>
             <remarks>
             The directory catalog will scan the contents of a directory, locating classes that implement
             <see cref="T:Prism.Modularity.IModule"/> and add them to the catalog based on contents in their associated <see cref="T:Prism.Modularity.ModuleAttribute"/>.
             Assemblies are loaded into a new application domain with ReflectionOnlyLoad.  The application domain is destroyed
             once the assemblies have been discovered.
            
             The directory catalog does not continue to monitor the directory after it has created the initialize catalog.
             </remarks>
        </member>
        <member name="P:Prism.Modularity.DirectoryModuleCatalog.ModulePath">
            <summary>
            Directory containing modules to search for.
            </summary>
        </member>
        <member name="M:Prism.Modularity.DirectoryModuleCatalog.InnerLoad">
            <summary>
            Drives the main logic of building the child domain and searching for the assemblies.
            </summary>
        </member>
        <member name="T:Prism.Modularity.FileModuleTypeLoader">
            <summary>
            Loads modules from an arbitrary location on the filesystem. This typeloader is only called if
            <see cref="T:Prism.Modularity.ModuleInfo"/> classes have a Ref parameter that starts with "file://".
            This class is only used on the Desktop version of the Prism Library.
            </summary>
        </member>
        <member name="M:Prism.Modularity.FileModuleTypeLoader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.FileModuleTypeLoader"/> class.
            </summary>
        </member>
        <member name="M:Prism.Modularity.FileModuleTypeLoader.#ctor(Prism.Modularity.IAssemblyResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.FileModuleTypeLoader"/> class.
            </summary>
            <param name="assemblyResolver">The assembly resolver.</param>
        </member>
        <member name="E:Prism.Modularity.FileModuleTypeLoader.ModuleDownloadProgressChanged">
            <summary>
            Raised repeatedly to provide progress as modules are loaded in the background.
            </summary>
        </member>
        <member name="E:Prism.Modularity.FileModuleTypeLoader.LoadModuleCompleted">
            <summary>
            Raised when a module is loaded or fails to load.
            </summary>
        </member>
        <member name="M:Prism.Modularity.FileModuleTypeLoader.CanLoadModuleType(Prism.Modularity.IModuleInfo)">
            <summary>
            Evaluates the <see cref="P:Prism.Modularity.IModuleInfo.Ref"/> property to see if the current typeloader will be able to retrieve the <paramref name="moduleInfo"/>.
            Returns true if the <see cref="P:Prism.Modularity.IModuleInfo.Ref"/> property starts with "file://", because this indicates that the file
            is a local file.
            </summary>
            <param name="moduleInfo">Module that should have it's type loaded.</param>
            <returns>
            	<see langword="true"/> if the current typeloader is able to retrieve the module, otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="moduleInfo"/> is null.</exception>
        </member>
        <member name="M:Prism.Modularity.FileModuleTypeLoader.LoadModuleType(Prism.Modularity.IModuleInfo)">
            <summary>
            Retrieves the <paramref name="moduleInfo"/>.
            </summary>
            <param name="moduleInfo">Module that should have it's type loaded.</param>
        </member>
        <member name="M:Prism.Modularity.FileModuleTypeLoader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>Calls <see cref="M:Prism.Modularity.FileModuleTypeLoader.Dispose(System.Boolean)"/></remarks>.
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Prism.Modularity.FileModuleTypeLoader.Dispose(System.Boolean)">
            <summary>
            Disposes the associated <see cref="T:Prism.Modularity.AssemblyResolver"/>.
            </summary>
            <param name="disposing">When <see langword="true"/>, it is being called from the Dispose method.</param>
        </member>
        <member name="T:Prism.Modularity.IAssemblyResolver">
            <summary>
            Interface for classes that are responsible for resolving and loading assembly files. 
            </summary>
        </member>
        <member name="M:Prism.Modularity.IAssemblyResolver.LoadAssemblyFrom(System.String)">
            <summary>
            Load an assembly when it's required by the application. 
            </summary>
            <param name="assemblyFilePath"></param>
        </member>
        <member name="T:Prism.Modularity.IConfigurationStore">
            <summary>
            Defines a store for the module metadata.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IConfigurationStore.RetrieveModuleConfigurationSection">
            <summary>
            Gets the module configuration data.
            </summary>
            <returns>A <see cref="T:Prism.Modularity.ModulesConfigurationSection"/> instance.</returns>
        </member>
        <member name="T:Prism.Modularity.IModuleCatalogExtensions">
            <summary>
            <see cref="T:Prism.Modularity.IModuleCatalog"/> extensions.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,Prism.Modularity.InitializationMode,System.String[])">
            <summary>
            Adds the module to the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
            <param name="catalog">The catalog to add the module to.</param>
            <param name="mode">The <see cref="T:Prism.Modularity.InitializationMode"/> to use.</param>
            <param name="dependsOn">Collection of module names (<see cref="P:Prism.Modularity.IModuleInfo.ModuleName"/>) of the modules on which the module to be added logically depends on.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> type parameter.</typeparam>
            <returns>The same <see cref="T:Prism.Modularity.IModuleCatalog"/> instance with the added module.</returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,System.String,Prism.Modularity.InitializationMode,System.String[])">
            <summary>
            Adds the module to the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
            <param name="catalog">The catalog to add the module to.</param>
            <param name="name">Name of the module to be added.</param>
            <param name="mode">The <see cref="T:Prism.Modularity.InitializationMode"/> to use.</param>
            <param name="dependsOn">Collection of module names (<see cref="P:Prism.Modularity.IModuleInfo.ModuleName"/>) of the modules on which the module to be added logically depends on.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> type parameter.</typeparam>
            <returns>The same <see cref="T:Prism.Modularity.IModuleCatalog"/> instance with the added module.</returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule(Prism.Modularity.IModuleCatalog,System.Type,System.String[])">
            <summary>
            Adds a groupless <see cref="T:Prism.Modularity.IModuleInfo"/> to the catalog.
            </summary>
            <param name="catalog">The catalog to add the module to.</param>
            <param name="moduleType"><see cref="T:System.Type"/> of the module to be added.</param>
            <param name="dependsOn">Collection of module names (<see cref="P:Prism.Modularity.IModuleInfo.ModuleName"/>) of the modules on which the module to be added logically depends on.</param>
            <returns>The same <see cref="T:Prism.Modularity.IModuleCatalog"/> instance with the added module.</returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule(Prism.Modularity.IModuleCatalog,System.Type,Prism.Modularity.InitializationMode,System.String[])">
            <summary>
            Adds a groupless <see cref="T:Prism.Modularity.IModuleInfo"/> to the catalog.
            </summary>
            <param name="catalog">The catalog to add the module to.</param>
            <param name="moduleType"><see cref="T:System.Type"/> of the module to be added.</param>
            <param name="initializationMode">Stage on which the module to be added will be initialized.</param>
            <param name="dependsOn">Collection of module names (<see cref="P:Prism.Modularity.IModuleInfo.ModuleName"/>) of the modules on which the module to be added logically depends on.</param>
            <returns>The same <see cref="T:Prism.Modularity.IModuleCatalog"/> instance with the added module.</returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule(Prism.Modularity.IModuleCatalog,System.String,System.String,System.String[])">
            <summary>
            Adds a groupless <see cref="T:Prism.Modularity.IModuleInfo"/> to the catalog.
            </summary>
            <param name="catalog">The catalog to add the module to.</param>
            <param name="moduleName">Name of the module to be added.</param>
            <param name="moduleType"><see cref="T:System.Type"/> of the module to be added.</param>
            <param name="dependsOn">Collection of module names (<see cref="P:Prism.Modularity.IModuleInfo.ModuleName"/>) of the modules on which the module to be added logically depends on.</param>
            <returns>The same <see cref="T:Prism.Modularity.IModuleCatalog"/> instance with the added module.</returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule(Prism.Modularity.IModuleCatalog,System.String,System.String,Prism.Modularity.InitializationMode,System.String[])">
            <summary>
            Adds a groupless <see cref="T:Prism.Modularity.ModuleInfo"/> to the catalog.
            </summary>
            <param name="catalog">The catalog to add the module to.</param>
            <param name="moduleName">Name of the module to be added.</param>
            <param name="moduleType"><see cref="T:System.Type"/> of the module to be added.</param>
            <param name="initializationMode">Stage on which the module to be added will be initialized.</param>
            <param name="dependsOn">Collection of module names (<see cref="P:Prism.Modularity.ModuleInfo.ModuleName"/>) of the modules on which the module to be added logically depends on.</param>
            <returns>The same <see cref="T:Prism.Modularity.IModuleCatalog"/> instance with the added module.</returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule(Prism.Modularity.IModuleCatalog,System.String,System.String,System.String,Prism.Modularity.InitializationMode,System.String[])">
            <summary>
            Adds a groupless <see cref="T:Prism.Modularity.ModuleInfo"/> to the catalog.
            </summary>
            <param name="catalog">The catalog to add the module to.</param>
            <param name="moduleName">Name of the module to be added.</param>
            <param name="moduleType"><see cref="T:System.Type"/> of the module to be added.</param>
            <param name="refValue">Reference to the location of the module to be added assembly.</param>
            <param name="initializationMode">Stage on which the module to be added will be initialized.</param>
            <param name="dependsOn">Collection of module names (<see cref="P:Prism.Modularity.ModuleInfo.ModuleName"/>) of the modules on which the module to be added logically depends on.</param>
            <returns>The same <see cref="T:Prism.Modularity.IModuleCatalog"/> instance with the added module.</returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,Prism.Modularity.InitializationMode)">
            <summary>
            Adds the module to the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
            <param name="catalog">The catalog to add the module to.</param>
            <param name="mode">The <see cref="T:Prism.Modularity.InitializationMode"/> to use.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> type parameter.</typeparam>
            <returns>The same <see cref="T:Prism.Modularity.IModuleCatalog"/> instance with the added module.</returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,System.String)">
            <summary>
            Adds the module to the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
            <param name="catalog">The catalog to add the module to.</param>
            <param name="name">Name of the module to be added.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> type parameter.</typeparam>
            <returns>The same <see cref="T:Prism.Modularity.IModuleCatalog"/> instance with the added module.</returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,System.String,Prism.Modularity.InitializationMode)">
            <summary>
            Adds the module to the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
            <param name="catalog">The catalog to add the module to.</param>
            <param name="name">Name of the module to be added.</param>
            <param name="mode">The <see cref="T:Prism.Modularity.InitializationMode"/> to use.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> type parameter.</typeparam>
            <returns>The same <see cref="T:Prism.Modularity.IModuleCatalog"/> instance with the added module.</returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogExtensions.AddGroup(Prism.Modularity.IModuleCatalog,Prism.Modularity.InitializationMode,System.String,Prism.Modularity.ModuleInfo[])">
            <summary>
            Creates and adds a <see cref="T:Prism.Modularity.ModuleInfoGroup"/> to the catalog.
            </summary>
            <param name="catalog">The catalog to add the module to.</param>
            <param name="initializationMode">Stage on which the module group to be added will be initialized.</param>
            <param name="refValue">Reference to the location of the module group to be added.</param>
            <param name="moduleInfos">Collection of <see cref="T:Prism.Modularity.ModuleInfo"/> included in the group.</param>
            <returns>The same <see cref="T:Prism.Modularity.IModuleCatalog"/> with the added module group.</returns>
        </member>
        <member name="T:Prism.Modularity.IModuleGroupsCatalog">
            <summary>
            Defines a model that can get the collection of <see cref="T:Prism.Modularity.IModuleCatalogItem"/>.
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleGroupsCatalog.Items">
            <summary>
            Gets the items in the <see cref="T:Prism.Modularity.IModuleCatalog"/>. This property is mainly used to add <see cref="T:Prism.Modularity.IModuleInfoGroup"/>s or
            <see cref="T:Prism.Modularity.IModuleInfo"/>s through XAML.
            </summary>
            <value>The items in the catalog.</value>
        </member>
        <member name="T:Prism.Modularity.IModuleTypeLoader">
            <summary>
            Defines the interface for moduleTypeLoaders
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleTypeLoader.CanLoadModuleType(Prism.Modularity.IModuleInfo)">
            <summary>
            Evaluates the <see cref="P:Prism.Modularity.IModuleInfo.Ref"/> property to see if the current typeloader will be able to retrieve the <paramref name="moduleInfo"/>.
            </summary>
            <param name="moduleInfo">Module that should have it's type loaded.</param>
            <returns><see langword="true"/> if the current typeloader is able to retrieve the module, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Prism.Modularity.IModuleTypeLoader.LoadModuleType(Prism.Modularity.IModuleInfo)">
            <summary>
            Retrieves the <paramref name="moduleInfo"/>.
            </summary>
            <param name="moduleInfo">Module that should have it's type loaded.</param>
        </member>
        <member name="E:Prism.Modularity.IModuleTypeLoader.ModuleDownloadProgressChanged">
            <summary>
            Raised repeatedly to provide progress as modules are downloaded in the background.
            </summary>
        </member>
        <member name="E:Prism.Modularity.IModuleTypeLoader.LoadModuleCompleted">
            <summary>
            Raised when a module is loaded or fails to load.
            </summary>
            <remarks>
            This event is raised once per ModuleInfo instance requested in <see cref="M:Prism.Modularity.IModuleTypeLoader.LoadModuleType(Prism.Modularity.IModuleInfo)"/>.
            </remarks>
        </member>
        <member name="T:Prism.Modularity.ModuleAttribute">
            <summary>
            Indicates that the class should be considered a named module using the
            provided module name.
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleAttribute.ModuleName">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleAttribute.OnDemand">
            <summary>
            Gets or sets the value indicating whether the module should be loaded OnDemand.
            </summary>
            When <see langword="false"/> (default value), it indicates the module should be loaded as soon as it's dependencies are satisfied.
            Otherwise you should explicitly load this module via the <see cref="T:Prism.Modularity.ModuleManager"/>.
        </member>
        <member name="T:Prism.Modularity.ModuleCatalog">
             <summary>
             The <see cref="T:Prism.Modularity.ModuleCatalog"/> holds information about the modules that can be used by the
             application. Each module is described in a <see cref="T:Prism.Modularity.ModuleInfo"/> class, that records the
             name, type and location of the module.
            
             It also verifies that the <see cref="T:Prism.Modularity.ModuleCatalog"/> is internally valid. That means that
             it does not have:
             <list>
                 <item>Circular dependencies</item>
                 <item>Missing dependencies</item>
                 <item>
                     Invalid dependencies, such as a Module that's loaded at startup that depends on a module
                     that might need to be retrieved.
                 </item>
             </list>
             The <see cref="T:Prism.Modularity.ModuleCatalog"/> also serves as a baseclass for more specialized Catalogs .
             </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleCatalog"/> class.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalog.#ctor(System.Collections.Generic.IEnumerable{Prism.Modularity.ModuleInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleCatalog"/> class while providing an
            initial list of <see cref="T:Prism.Modularity.ModuleInfo"/>s.
            </summary>
            <param name="modules">The initial list of modules.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalog.GetFileAbsoluteUri(System.String)">
            <summary>
            Creates a valid file uri to locate the module assembly file
            </summary>
            <param name="filePath">The relative path to the file</param>
            <returns>The valid absolute file path</returns>
        </member>
        <member name="T:Prism.Modularity.ModuleConfigurationElement">
            <summary>
            A configuration element to declare module metadata.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleConfigurationElement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleConfigurationElement.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleConfigurationElement"/>.
            </summary>
            <param name="assemblyFile">The assembly file where the module is located.</param>
            <param name="moduleType">The type of the module.</param>
            <param name="moduleName">The name of the module.</param>
            <param name="startupLoaded">This attribute specifies whether the module is loaded at startup.</param>
        </member>
        <member name="P:Prism.Modularity.ModuleConfigurationElement.AssemblyFile">
            <summary>
            Gets or sets the assembly file.
            </summary>
            <value>The assembly file.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleConfigurationElement.ModuleType">
            <summary>
            Gets or sets the module type.
            </summary>
            <value>The module's type.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleConfigurationElement.ModuleName">
            <summary>
            Gets or sets the module name.
            </summary>
            <value>The module's name.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleConfigurationElement.StartupLoaded">
            <summary>
            Gets or sets a value indicating whether the module should be loaded at startup.
            </summary>
            <value>A value indicating whether the module should be loaded at startup.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleConfigurationElement.Dependencies">
            <summary>
            Gets or sets the modules this module depends on.
            </summary>
            <value>The names of the modules that this depends on.</value>
        </member>
        <member name="T:Prism.Modularity.ModuleConfigurationElementCollection">
            <summary>
            A collection of <see cref="T:Prism.Modularity.ModuleConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleConfigurationElementCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleConfigurationElementCollection"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleConfigurationElementCollection.#ctor(Prism.Modularity.ModuleConfigurationElement[])">
            <summary>
            Initializes a new <see cref="T:Prism.Modularity.ModuleConfigurationElementCollection"/>.
            </summary>
            <param name="modules">The initial set of <see cref="T:Prism.Modularity.ModuleConfigurationElement"/>.</param>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="modules"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Prism.Modularity.ModuleConfigurationElementCollection.ThrowOnDuplicate">
            <summary>
            Gets a value indicating whether an exception should be raised if a duplicate element is found.
            This property will always return true.
            </summary>
            <value>A <see cref="T:System.Boolean"/> value.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleConfigurationElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
            <value>
            The <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> of this collection.
            </value>
        </member>
        <member name="P:Prism.Modularity.ModuleConfigurationElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
            <value>
            The name of the collection; otherwise, an empty string.
            </value>
        </member>
        <member name="P:Prism.Modularity.ModuleConfigurationElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Prism.Modularity.ModuleConfigurationElement"/> located at the specified index in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A <see cref="T:Prism.Modularity.ModuleConfigurationElement"/>.</returns>
        </member>
        <member name="M:Prism.Modularity.ModuleConfigurationElementCollection.Add(Prism.Modularity.ModuleConfigurationElement)">
            <summary>
            Adds a <see cref="T:Prism.Modularity.ModuleConfigurationElement"/> to the collection.
            </summary>
            <param name="module">A <see cref="T:Prism.Modularity.ModuleConfigurationElement"/> instance.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleConfigurationElementCollection.Contains(System.String)">
            <summary>
            Tests if the collection contains the configuration for the specified module name.
            </summary>
            <param name="moduleName">The name of the module to search the configuration for.</param>
            <returns><see langword="true"/> if a configuration for the module is present; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Prism.Modularity.ModuleConfigurationElementCollection.FindAll(System.Predicate{Prism.Modularity.ModuleConfigurationElement})">
            <summary>
            Searches the collection for all the <see cref="T:Prism.Modularity.ModuleConfigurationElement"/> that match the specified predicate.
            </summary>
            <param name="match">A <see cref="T:System.Predicate`1"/> that implements the match test.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> with the successful matches.</returns>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="match"/> is null.</exception>
        </member>
        <member name="M:Prism.Modularity.ModuleConfigurationElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Prism.Modularity.ModuleConfigurationElement"/>.
            </summary>
            <returns>A <see cref="T:Prism.Modularity.ModuleConfigurationElement"/>.</returns>
        </member>
        <member name="M:Prism.Modularity.ModuleConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for. </param>
            <returns>
            An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="T:Prism.Modularity.ModuleDependencyCollection">
            <summary>
            A collection of <see cref="T:Prism.Modularity.ModuleDependencyConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleDependencyCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleDependencyCollection"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleDependencyCollection.#ctor(Prism.Modularity.ModuleDependencyConfigurationElement[])">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleDependencyCollection"/>.
            </summary>
            <param name="dependencies">An array of <see cref="T:Prism.Modularity.ModuleDependencyConfigurationElement"/> with initial list of dependencies.</param>
        </member>
        <member name="P:Prism.Modularity.ModuleDependencyCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
            <value>
            The <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> of this collection.
            </value>
        </member>
        <member name="P:Prism.Modularity.ModuleDependencyCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
            <value>
            The name of the collection; otherwise, an empty string.
            </value>
        </member>
        <member name="P:Prism.Modularity.ModuleDependencyCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Prism.Modularity.ModuleDependencyConfigurationElement"/> located at the specified index in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A <see cref="T:Prism.Modularity.ModuleDependencyConfigurationElement"/>.</returns>
        </member>
        <member name="M:Prism.Modularity.ModuleDependencyCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Prism.Modularity.ModuleDependencyConfigurationElement"/>.
            </summary>
            <returns>A <see cref="T:Prism.Modularity.ModuleDependencyConfigurationElement"/>.</returns>
        </member>
        <member name="M:Prism.Modularity.ModuleDependencyCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for. </param>
            <returns>
            An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="T:Prism.Modularity.ModuleDependencyConfigurationElement">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> for module dependencies.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleDependencyConfigurationElement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleDependencyConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleDependencyConfigurationElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleDependencyConfigurationElement"/>.
            </summary>
            <param name="moduleName">A module name.</param>
        </member>
        <member name="P:Prism.Modularity.ModuleDependencyConfigurationElement.ModuleName">
            <summary>
            Gets or sets the name of a module another module depends on.
            </summary>
            <value>The name of a module another module depends on.</value>
        </member>
        <member name="T:Prism.Modularity.ModuleInfo">
            <summary>
            Defines the metadata that describes a module.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleInfo.#ctor">
            <summary>
            Initializes a new empty instance of <see cref="T:Prism.Modularity.ModuleInfo"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleInfo.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleInfo"/>.
            </summary>
            <param name="name">The module's name.</param>
            <param name="type">The module <see cref="T:System.Type"/>'s AssemblyQualifiedName.</param>
            <param name="dependsOn">The modules this instance depends on.</param>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="dependsOn"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Prism.Modularity.ModuleInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleInfo"/>.
            </summary>
            <param name="name">The module's name.</param>
            <param name="type">The module's type.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleInfo"/>.
            </summary>
            <param name="moduleType">The module's type.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInfo.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleInfo"/>.
            </summary>
            <param name="moduleType">The module's type.</param>
            <param name="moduleName">The module's name.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInfo.#ctor(System.Type,System.String,Prism.Modularity.InitializationMode)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleInfo"/>.
            </summary>
            <param name="moduleType">The module's type.</param>
            <param name="moduleName">The module's name.</param>
            <param name="initializationMode">The module's <see cref="P:Prism.Modularity.ModuleInfo.InitializationMode"/>.</param>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.ModuleName">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.ModuleType">
            <summary>
            Gets or sets the module <see cref="T:System.Type"/>'s AssemblyQualifiedName.
            </summary>
            <value>The type of the module.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.DependsOn">
            <summary>
            Gets or sets the list of modules that this module depends upon.
            </summary>
            <value>The list of modules that this module depends upon.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.InitializationMode">
            <summary>
            Specifies on which stage the Module will be initialized.
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.Ref">
            <summary>
            Reference to the location of the module assembly.
            <example>The following are examples of valid <see cref="P:Prism.Modularity.ModuleInfo.Ref"/> values:
            file://c:/MyProject/Modules/MyModule.dll for a loose DLL in WPF.
            </example>
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleInfo.State">
            <summary>
            Gets or sets the state of the <see cref="T:Prism.Modularity.ModuleInfo"/> with regards to the module loading and initialization process.
            </summary>
        </member>
        <member name="T:Prism.Modularity.ModuleInfoGroup">
             <summary>
             Represents a group of <see cref="T:Prism.Modularity.IModuleInfo"/> instances that are usually deployed together. <see cref="T:Prism.Modularity.ModuleInfoGroup"/>s
             are also used by the <see cref="T:Prism.Modularity.IModuleCatalog"/> to prevent common deployment problems such as having a module that's required
             at startup that depends on modules that will only be downloaded on demand.
            
             The group also forwards <see cref="P:Prism.Modularity.ModuleInfoGroup.Ref"/> and <see cref="P:Prism.Modularity.ModuleInfoGroup.InitializationMode"/> values to the <see cref="T:Prism.Modularity.IModuleInfo"/>s that it
             contains.
             </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleInfoGroup.InitializationMode">
            <summary>
            Gets or sets the <see cref="P:Prism.Modularity.IModuleInfo.InitializationMode"/> for the whole group. Any <see cref="T:Prism.Modularity.IModuleInfo"/> classes that are
            added after setting this value will also get this <see cref="P:Prism.Modularity.ModuleInfoGroup.InitializationMode"/>.
            </summary>
            <see cref="P:Prism.Modularity.IModuleInfo.InitializationMode"/>
            <value>The initialization mode.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleInfoGroup.Ref">
             <summary>
             Gets or sets the <see cref="P:Prism.Modularity.IModuleInfo.Ref"/> value for the whole group. Any <see cref="T:Prism.Modularity.IModuleInfo"/> classes that are
             added after setting this value will also get this <see cref="P:Prism.Modularity.ModuleInfoGroup.Ref"/>.
            
             The ref value will also be used by the <see cref="T:Prism.Modularity.IModuleManager"/> to determine which  <see cref="T:Prism.Modularity.IModuleTypeLoader"/> to use.
             For example, using an "file://" prefix with a valid URL will cause the FileModuleTypeLoader to be used
             (Only available in the desktop version of CAL).
             </summary>
             <see cref="P:Prism.Modularity.ModuleInfo.Ref"/>
             <value>The ref value that will be used.</value>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.Add(Prism.Modularity.IModuleInfo)">
            <summary>
            Adds an <see cref="T:Prism.Modularity.IModuleInfo"/> moduleInfo to the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.
            </summary>
            <param name="item">The <see cref="T:Prism.Modularity.IModuleInfo"/> to the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.ForwardValues(Prism.Modularity.IModuleInfo)">
            <summary>
            Forwards <see cref="P:Prism.Modularity.ModuleInfoGroup.InitializationMode"/> and <see cref="P:Prism.Modularity.ModuleInfoGroup.Ref"/> properties from this <see cref="T:Prism.Modularity.ModuleInfoGroup"/>
            to <paramref name="moduleInfo"/>.
            </summary>
            <param name="moduleInfo">The module info to forward values to.</param>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="moduleInfo"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.Clear">
            <summary>
            Removes all <see cref="T:Prism.Modularity.IModuleInfo"/>s from the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.Contains(Prism.Modularity.IModuleInfo)">
            <summary>
            Determines whether the <see cref="T:Prism.Modularity.ModuleInfoGroup"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.CopyTo(Prism.Modularity.IModuleInfo[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Prism.Modularity.ModuleInfoGroup"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Prism.Modularity.ModuleInfoGroup"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:Prism.Modularity.ModuleInfoGroup"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="P:Prism.Modularity.ModuleInfoGroup.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.
            </returns>
        </member>
        <member name="P:Prism.Modularity.ModuleInfoGroup.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Prism.Modularity.ModuleInfoGroup"/> is read-only.
            </summary>
            <value></value>
            <returns>false, because the <see cref="T:Prism.Modularity.ModuleInfoGroup"/> is not Read-Only.
            </returns>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.Remove(Prism.Modularity.IModuleInfo)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.
            </returns>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.
            </summary>
            <param name="value">
            The <see cref="T:System.Object"/> to add to the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.
            Must be of type <see cref="T:Prism.Modularity.ModuleInfo"/>
            </param>
            <returns>
            The position into which the new element was inserted.
            </returns>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:Prism.Modularity.ModuleInfoGroup"/> contains a specific value.
            </summary>
            <param name="value">
            The <see cref="T:System.Object"/> to locate in the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.
            Must be of type <see cref="T:Prism.Modularity.IModuleInfo"/>
            </param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.
            </summary>
            <param name="value">
            The <see cref="T:System.Object"/> to locate in the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.
            Must be of type <see cref="T:Prism.Modularity.ModuleInfo"/>
            </param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:Prism.Modularity.ModuleInfoGroup"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">
            The <see cref="T:System.Object"/> to insert into the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.
            Must be of type <see cref="T:Prism.Modularity.IModuleInfo"/>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> is not of type <see cref="T:Prism.Modularity.IModuleInfo"/>
            </exception>
        </member>
        <member name="P:Prism.Modularity.ModuleInfoGroup.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Prism.Modularity.ModuleInfoGroup"/> has a fixed size.
            </summary>
            <returns>false, because the <see cref="T:Prism.Modularity.ModuleInfoGroup"/> does not have a fixed length.
            </returns>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.
            </summary>
            <param name="value">
            The <see cref="T:System.Object"/> to remove from the <see cref="T:Prism.Modularity.ModuleInfoGroup"/>.
            Must be of type <see cref="T:Prism.Modularity.ModuleInfo"/>
            </param>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="P:Prism.Modularity.ModuleInfoGroup.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="P:Prism.Modularity.ModuleInfoGroup.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:Prism.Modularity.ModuleInfoGroup.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.IndexOf(Prism.Modularity.IModuleInfo)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroup.Insert(System.Int32,Prism.Modularity.IModuleInfo)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
        </member>
        <member name="P:Prism.Modularity.ModuleInfoGroup.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Prism.Modularity.IModuleInfo"/> at the specified index.
            </summary>
            <value>The <see cref="T:Prism.Modularity.IModuleInfo"/> at the specified index </value>
        </member>
        <member name="T:Prism.Modularity.ModuleInfoGroupExtensions">
            <summary>
            Defines extension methods for the <see cref="T:Prism.Modularity.ModuleInfoGroup"/> class.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroupExtensions.AddModule(Prism.Modularity.ModuleInfoGroup,System.String,System.Type,System.String[])">
            <summary>
            Adds a new module that is statically referenced to the specified module info group.
            </summary>
            <param name="moduleInfoGroup">The group where to add the module info in.</param>
            <param name="moduleName">The name for the module.</param>
            <param name="moduleType">The type for the module. This type should be a descendant of <see cref="T:Prism.Modularity.IModule"/>.</param>
            <param name="dependsOn">The names for the modules that this module depends on.</param>
            <returns>Returns the instance of the passed in module info group, to provide a fluid interface.</returns>
        </member>
        <member name="M:Prism.Modularity.ModuleInfoGroupExtensions.AddModule(Prism.Modularity.ModuleInfoGroup,System.Type,System.String[])">
            <summary>
            Adds a new module that is statically referenced to the specified module info group.
            </summary>
            <param name="moduleInfoGroup">The group where to add the module info in.</param>
            <param name="moduleType">The type for the module. This type should be a descendant of <see cref="T:Prism.Modularity.IModule"/>.</param>
            <param name="dependsOn">The names for the modules that this module depends on.</param>
            <returns>Returns the instance of the passed in module info group, to provide a fluid interface.</returns>
            <remarks>The name of the module will be the type name.</remarks>
        </member>
        <member name="T:Prism.Modularity.ModuleInitializer">
            <summary>
            Implements the <see cref="T:Prism.Modularity.IModuleInitializer"/> interface. Handles loading of a module based on a type.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializer.#ctor(Prism.Ioc.IContainerExtension)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleInitializer"/>.
            </summary>
            <param name="containerExtension">The container that will be used to resolve the modules by specifying its type.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializer.Initialize(Prism.Modularity.IModuleInfo)">
            <summary>
            Initializes the specified module.
            </summary>
            <param name="moduleInfo">The module to initialize</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializer.HandleModuleInitializationError(Prism.Modularity.IModuleInfo,System.String,System.Exception)">
            <summary>
            Handles any exception occurred in the module Initialization process,
            This method can be overridden to provide a different behavior.
            </summary>
            <param name="moduleInfo">The module metadata where the error happened.</param>
            <param name="assemblyName">The assembly name.</param>
            <param name="exception">The exception thrown that is the cause of the current error.</param>
            <exception cref="T:Prism.Modularity.ModuleInitializeException"></exception>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializer.CreateModule(Prism.Modularity.IModuleInfo)">
            <summary>
            Uses the container to resolve a new <see cref="T:Prism.Modularity.IModule"/> by specifying its <see cref="T:System.Type"/>.
            </summary>
            <param name="moduleInfo">The module to create.</param>
            <returns>A new instance of the module specified by <paramref name="moduleInfo"/>.</returns>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializer.CreateModule(System.String)">
            <summary>
            Uses the container to resolve a new <see cref="T:Prism.Modularity.IModule"/> by specifying its <see cref="T:System.Type"/>.
            </summary>
            <param name="typeName">The type name to resolve. This type must implement <see cref="T:Prism.Modularity.IModule"/>.</param>
            <returns>A new instance of <paramref name="typeName"/>.</returns>
        </member>
        <member name="T:Prism.Modularity.ModuleManager">
            <summary>
            Component responsible for coordinating the modules' type loading and module initialization process.
            </summary>
            <summary>
            Component responsible for coordinating the modules' type loading and module initialization process. 
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.#ctor(Prism.Modularity.IModuleInitializer,Prism.Modularity.IModuleCatalog)">
            <summary>
            Initializes an instance of the <see cref="T:Prism.Modularity.ModuleManager"/> class.
            </summary>
            <param name="moduleInitializer">Service used for initialization of modules.</param>
            <param name="moduleCatalog">Catalog that enumerates the modules to be loaded and initialized.</param>
        </member>
        <member name="P:Prism.Modularity.ModuleManager.ModuleCatalog">
            <summary>
            The module catalog specified in the constructor.
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleManager.Modules">
            <summary>
            Gets all the <see cref="T:Prism.Modularity.IModuleInfo"/> classes that are in the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
        </member>
        <member name="E:Prism.Modularity.ModuleManager.ModuleDownloadProgressChanged">
            <summary>
            Raised repeatedly to provide progress as modules are loaded in the background.
            </summary>
        </member>
        <member name="E:Prism.Modularity.ModuleManager.LoadModuleCompleted">
            <summary>
            Raised when a module is loaded or fails to load.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.Run">
            <summary>
            Initializes the modules marked as <see cref="F:Prism.Modularity.InitializationMode.WhenAvailable"/> on the <see cref="P:Prism.Modularity.ModuleManager.ModuleCatalog"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.LoadModule(System.String)">
            <summary>
            Loads and initializes the module on the <see cref="T:Prism.Modularity.IModuleCatalog"/> with the name <paramref name="moduleName"/>.
            </summary>
            <param name="moduleName">Name of the module requested for initialization.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.ModuleNeedsRetrieval(Prism.Modularity.IModuleInfo)">
            <summary>
            Checks if the module needs to be retrieved before it's initialized.
            </summary>
            <param name="moduleInfo">Module that is being checked if needs retrieval.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.LoadModulesThatAreReadyForLoad">
            <summary>
            Loads the modules that are not initialized and have their dependencies loaded.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.HandleModuleTypeLoadingError(Prism.Modularity.IModuleInfo,System.Exception)">
            <summary>
            Handles any exception occurred in the module typeloading process,
            and throws a <see cref="T:Prism.Modularity.ModuleTypeLoadingException"/>.
            This method can be overridden to provide a different behavior.
            </summary>
            <param name="moduleInfo">The module metadata where the error happened.</param>
            <param name="exception">The exception thrown that is the cause of the current error.</param>
            <exception cref="T:Prism.Modularity.ModuleTypeLoadingException"></exception>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>Calls <see cref="M:Prism.Modularity.ModuleManager.Dispose(System.Boolean)"/></remarks>.
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Prism.Modularity.ModuleManager.Dispose(System.Boolean)">
            <summary>
            Disposes the associated <see cref="T:Prism.Modularity.IModuleTypeLoader"/>s.
            </summary>
            <param name="disposing">When <see langword="true"/>, it is being called from the Dispose method.</param>
        </member>
        <member name="P:Prism.Modularity.ModuleManager.ModuleTypeLoaders">
            <summary>
            Returns the list of registered <see cref="T:Prism.Modularity.IModuleTypeLoader"/> instances that will be 
            used to load the types of modules. 
            </summary>
            <value>The module type loaders.</value>
        </member>
        <member name="T:Prism.Modularity.ModulesConfigurationSection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationSection"/> for module configuration.
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModulesConfigurationSection.Modules">
            <summary>
            Gets or sets the collection of modules configuration.
            </summary>
            <value>A <see cref="T:Prism.Modularity.ModuleConfigurationElementCollection"/> of <see cref="T:Prism.Modularity.ModuleConfigurationElement"/>.</value>
        </member>
        <member name="T:Prism.Modularity.ModuleTypeLoaderNotFoundException">
            <summary>
            Exception that's thrown when there is no <see cref="T:Prism.Modularity.IModuleTypeLoader"/> registered in 
            <see cref="P:Prism.Modularity.ModuleManager.ModuleTypeLoaders"/> that can handle this particular type of module. 
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoaderNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleTypeLoaderNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoaderNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleTypeLoaderNotFoundException" /> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
            </param>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoaderNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleTypeLoaderNotFoundException" /> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
            </param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoaderNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoaderNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Prism.Modularity.XamlModuleCatalog">
            <summary>
            A catalog built from a XAML file.
            </summary>
        </member>
        <member name="M:Prism.Modularity.XamlModuleCatalog.#ctor(System.String)">
            <summary>
            Creates an instance of a XamlResourceCatalog.
            </summary>
            <param name="fileName">The name of the XAML file</param>
        </member>
        <member name="M:Prism.Modularity.XamlModuleCatalog.#ctor(System.Uri)">
            <summary>
            Creates an instance of a XamlResourceCatalog.
            </summary>
            <param name="resourceUri">The pack url of the XAML file resource</param>
        </member>
        <member name="M:Prism.Modularity.XamlModuleCatalog.InnerLoad">
            <summary>
            Loads the catalog from the XAML file.
            </summary>
        </member>
        <member name="M:Prism.Modularity.XamlModuleCatalog.GetFileAbsoluteUri(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Prism.Modularity.XamlModuleCatalog.CreateFromXaml(System.IO.Stream)">
            <summary>
            Creates a <see cref="T:Prism.Modularity.ModuleCatalog"/> from XAML.
            </summary>
            <param name="xamlStream"><see cref="T:System.IO.Stream"/> that contains the XAML declaration of the catalog.</param>
            <returns>An instance of <see cref="T:Prism.Modularity.ModuleCatalog"/> built from the XAML.</returns>
        </member>
        <member name="M:Prism.Modularity.XamlModuleCatalog.CreateFromXaml(System.Uri)">
            <summary>
            Creates a <see cref="T:Prism.Modularity.ModuleCatalog"/> from a XAML included as an Application Resource.
            </summary>
            <param name="builderResourceUri">Relative <see cref="T:System.Uri"/> that identifies the XAML included as an Application Resource.</param>
            <returns>An instance of <see cref="T:Prism.Modularity.ModuleCatalog"/> build from the XAML.</returns>
        </member>
        <member name="T:Prism.Mvvm.ViewModelLocator">
            <summary>
            This class defines the attached property and related change handler that calls the ViewModelLocator in Prism.Mvvm.
            </summary>
        </member>
        <member name="F:Prism.Mvvm.ViewModelLocator.AutoWireViewModelProperty">
            <summary>
            The AutoWireViewModel attached property.
            </summary>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocator.GetAutoWireViewModel(System.Windows.DependencyObject)">
            <summary>
            Gets the value for the <see cref="F:Prism.Mvvm.ViewModelLocator.AutoWireViewModelProperty"/> attached property.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The <see cref="F:Prism.Mvvm.ViewModelLocator.AutoWireViewModelProperty"/> attached to the <paramref name="obj"/> element.</returns>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocator.SetAutoWireViewModel(System.Windows.DependencyObject,System.Nullable{System.Boolean})">
            <summary>
            Sets the <see cref="F:Prism.Mvvm.ViewModelLocator.AutoWireViewModelProperty"/> attached property.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The value to attach.</param>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocator.Bind(System.Object,System.Object)">
            <summary>
            Sets the DataContext of a View.
            </summary>
            <param name="view">The View to set the DataContext on.</param>
            <param name="viewModel">The object to use as the DataContext for the View.</param>
        </member>
        <member name="T:Prism.Navigation.Regions.AllActiveRegion">
            <summary>
            Region that keeps all the views in it as active. Deactivation of views is not allowed.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.AllActiveRegion.ActiveViews">
            <summary>
            Gets a readonly view of the collection of all the active views in the region. These are all the added views.
            </summary>
            <value>An <see cref="T:Prism.Navigation.Regions.IViewsCollection"/> of all the active views.</value>
        </member>
        <member name="M:Prism.Navigation.Regions.AllActiveRegion.Deactivate(System.Object)">
            <summary>
            Deactivate is not valid in this Region. This method will always throw <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="view">The view to deactivate.</param>
            <exception cref="T:System.InvalidOperationException">Every time this method is called.</exception>
        </member>
        <member name="T:Prism.Navigation.Regions.Behaviors.AutoPopulateRegionBehavior">
            <summary>
            Populates the target region with the views registered to it in the <see cref="T:Prism.Navigation.Regions.IRegionViewRegistry"/>.
            </summary>
        </member>
        <member name="F:Prism.Navigation.Regions.Behaviors.AutoPopulateRegionBehavior.BehaviorKey">
            <summary>
            The key of this behavior.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.AutoPopulateRegionBehavior.#ctor(Prism.Navigation.Regions.IRegionViewRegistry)">
            <summary>
            Creates a new instance of the AutoPopulateRegionBehavior
            associated with the <see cref="T:Prism.Navigation.Regions.IRegionViewRegistry"/> received.
            </summary>
            <param name="regionViewRegistry"><see cref="T:Prism.Navigation.Regions.IRegionViewRegistry"/> that the behavior will monitor for views to populate the region.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.AutoPopulateRegionBehavior.OnAttach">
            <summary>
            Attaches the AutoPopulateRegionBehavior to the Region.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.AutoPopulateRegionBehavior.CreateViewsToAutoPopulate">
            <summary>
            Returns a collection of views that will be added to the
            View collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.AutoPopulateRegionBehavior.AddViewIntoRegion(System.Object)">
            <summary>
            Adds a view into the views collection of this region.
            </summary>
            <param name="viewToAdd"></param>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.AutoPopulateRegionBehavior.OnViewRegistered(System.Object,Prism.Navigation.Regions.ViewRegisteredEventArgs)">
            <summary>
            Handler of the event that fires when a new viewtype is registered to the registry.
            </summary>
            <remarks>Although this is a public method to support Weak Delegates in Silverlight, it should not be called by the user.</remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Prism.Navigation.Regions.Behaviors.BindRegionContextToDependencyObjectBehavior">
            <summary>
            Defines a behavior that forwards the <see cref="F:Prism.Navigation.Regions.RegionManager.RegionContextProperty"/>
            to the views in the region.
            </summary>
        </member>
        <member name="F:Prism.Navigation.Regions.Behaviors.BindRegionContextToDependencyObjectBehavior.BehaviorKey">
            <summary>
            The key of this behavior.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.Behaviors.BindRegionContextToDependencyObjectBehavior.Region">
            <summary>
            Behavior's attached region.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.BindRegionContextToDependencyObjectBehavior.Attach">
            <summary>
            Attaches the behavior to the specified region.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.Behaviors.ClearChildViewsRegionBehavior">
            <summary>
            Behavior that removes the RegionManager attached property of all the views in a region once the RegionManager property of a region becomes null.
            This is useful when removing views with nested regions, to ensure these nested regions get removed from the RegionManager as well.
            <remarks>
            This behavior does not apply by default.
            In order to activate it, the ClearChildViews attached property must be set to True in the view containing the affected child regions.
            </remarks>
            </summary>
        </member>
        <member name="F:Prism.Navigation.Regions.Behaviors.ClearChildViewsRegionBehavior.BehaviorKey">
            <summary>
            The behavior key.
            </summary>
        </member>
        <member name="F:Prism.Navigation.Regions.Behaviors.ClearChildViewsRegionBehavior.ClearChildViewsProperty">
            <summary>
            This attached property can be defined on a view to indicate that regions defined in it must be removed from the region manager when the parent view gets removed from a region.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.ClearChildViewsRegionBehavior.GetClearChildViews(System.Windows.DependencyObject)">
            <summary>
            Gets the ClearChildViews attached property from a DependencyObject.
            </summary>
            <param name="target">The object from which to get the value.</param>
            <returns>The value of the ClearChildViews attached property in the target specified.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.ClearChildViewsRegionBehavior.SetClearChildViews(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the ClearChildViews attached property in a DependencyObject.
            </summary>
            <param name="target">The object in which to set the value.</param>
            <param name="value">The value of to set in the target object's ClearChildViews attached property.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.ClearChildViewsRegionBehavior.OnAttach">
            <summary>
            Subscribes to the <see cref="T:Prism.Navigation.Regions.Region"/>'s PropertyChanged method to monitor its RegionManager property.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior">
            <summary>
            Behavior that creates a new <see cref="T:Prism.Navigation.Regions.IRegion"/>, when the control that will host the <see cref="T:Prism.Navigation.Regions.IRegion"/> (see <see cref="P:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior.TargetElement"/>)
            is added to the VisualTree. This behavior will use the <see cref="T:Prism.Navigation.Regions.RegionAdapterMappings"/> class to find the right type of adapter to create
            the region. After the region is created, this behavior will detach.
            </summary>
            <remarks>
            Attached property value inheritance is not available in Silverlight, so the current approach walks up the visual tree when requesting a region from a region manager.
            The <see cref="T:Prism.Navigation.Regions.Behaviors.RegionManagerRegistrationBehavior"/> is now responsible for walking up the Tree.
            </remarks>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior.#ctor(Prism.Navigation.Regions.RegionAdapterMappings)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior"/> class.
            </summary>
            <param name="regionAdapterMappings">
            The region adapter mappings, that are used to find the correct adapter for
            a given control type. The control type is determined by the <see name="TargetElement"/> value.
            </param>
        </member>
        <member name="P:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior.RegionManagerAccessor">
            <summary>
            Sets a class that interfaces between the <see cref="T:Prism.Navigation.Regions.RegionManager"/> 's static properties/events and this behavior,
            so this behavior can be tested in isolation.
            </summary>
            <value>The region manager accessor.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior.TargetElement">
            <summary>
            The element that will host the Region.
            </summary>
            <value>The target element.</value>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior.Attach">
            <summary>
            Start monitoring the <see cref="T:Prism.Navigation.Regions.RegionManager"/> and the <see cref="P:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior.TargetElement"/> to detect when the <see cref="P:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior.TargetElement"/> becomes
            part of the Visual Tree. When that happens, the Region will be created and the behavior will <see cref="M:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior.Detach"/>.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior.Detach">
            <summary>
            Stop monitoring the <see cref="T:Prism.Navigation.Regions.RegionManager"/> and the  <see cref="P:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior.TargetElement"/>, so that this behavior can be garbage collected.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior.OnUpdatingRegions(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="T:Prism.Navigation.Regions.RegionManager"/> is updating it's <see cref="P:Prism.Navigation.Regions.RegionManager.Regions"/> collection.
            </summary>
            <remarks>
            This method has to be public, because it has to be callable using weak references in silverlight and other partial trust environments.
            </remarks>
            <param name="sender">The <see cref="T:Prism.Navigation.Regions.RegionManager"/>. </param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior.CreateRegion(System.Windows.DependencyObject,System.String)">
            <summary>
            Method that will create the region, by calling the right <see cref="T:Prism.Navigation.Regions.IRegionAdapter"/>.
            </summary>
            <param name="targetElement">The target element that will host the <see cref="T:Prism.Navigation.Regions.IRegion"/>.</param>
            <param name="regionName">Name of the region.</param>
            <returns>The created <see cref="T:Prism.Navigation.Regions.IRegion"/></returns>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior.Track">
            <summary>
            Add the instance of this class to <see cref="F:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior._instanceTracker"/> to keep it alive
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior.Untrack">
            <summary>
            Remove the instance of this class from <see cref="F:Prism.Navigation.Regions.Behaviors.DelayedRegionCreationBehavior._instanceTracker"/>
            so it can eventually be garbage collected
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.Behaviors.DestructibleRegionBehavior">
            <summary>
            Calls <see cref="M:Prism.Navigation.IDestructible.Destroy"/> on Views and ViewModels
            removed from the <see cref="P:Prism.Navigation.Regions.IRegion.Views"/> collection.
            </summary>
            <remarks>
            The View and/or ViewModels must implement <see cref="T:Prism.Navigation.IDestructible"/> for this behavior to work.
            </remarks>
        </member>
        <member name="F:Prism.Navigation.Regions.Behaviors.DestructibleRegionBehavior.BehaviorKey">
            <summary>
            The key of this behavior.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.DestructibleRegionBehavior.OnAttach">
            <summary>
            Attaches the <see cref="T:Prism.Navigation.Regions.Behaviors.DestructibleRegionBehavior"/> to the <see cref="P:Prism.Navigation.Regions.IRegion.Views"/> collection.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.Behaviors.IHostAwareRegionBehavior">
            <summary>
            Defines a <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/> that not allows extensible behaviors on regions which also interact
            with the target element that the <see cref="T:Prism.Navigation.Regions.IRegion"/> is attached to.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.Behaviors.IHostAwareRegionBehavior.HostControl">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Prism.Navigation.Regions.IRegion"/> is attached to.
            </summary>
            <value>A <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Prism.Navigation.Regions.IRegion"/> is attached to.
            This is usually a <see cref="T:System.Windows.FrameworkElement"/> that is part of the tree.</value>
        </member>
        <member name="T:Prism.Navigation.Regions.Behaviors.RegionActiveAwareBehavior">
            <summary>
            Behavior that monitors a <see cref="T:Prism.Navigation.Regions.IRegion"/> object and
            changes the value for the <see cref="P:Prism.IActiveAware.IsActive"/> property when
            an object that implements <see cref="T:Prism.IActiveAware"/> gets added or removed
            from the collection.
            </summary>
            <remarks>
            This class can also sync the active state for any scoped regions directly on the view based on the <see cref="T:Prism.Navigation.Regions.SyncActiveStateAttribute"/>.
            If you use the <see cref="M:Prism.Navigation.Regions.Region.Add(System.Object,System.String,System.Boolean)" /> method with the createRegionManagerScope option, the scoped manager will be attached to the view.
            </remarks>
        </member>
        <member name="F:Prism.Navigation.Regions.Behaviors.RegionActiveAwareBehavior.BehaviorKey">
            <summary>
            Name that identifies the <see cref="T:Prism.Navigation.Regions.Behaviors.RegionActiveAwareBehavior"/> behavior in a collection of <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/>.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.Behaviors.RegionActiveAwareBehavior.Region">
            <summary>
            The region that this behavior is extending
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.RegionActiveAwareBehavior.Attach">
            <summary>
            Attaches the behavior to the specified region
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.RegionActiveAwareBehavior.Detach">
            <summary>
            Detaches the behavior from the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.Behaviors.RegionManagerRegistrationBehavior">
            <summary>
            Subscribes to a static event from the <see cref="T:Prism.Navigation.Regions.RegionManager"/> in order to register the target <see cref="T:Prism.Navigation.Regions.IRegion"/>
            in a <see cref="T:Prism.Navigation.Regions.IRegionManager"/> when one is available on the host control by walking up the tree and finding
            a control whose <see cref="F:Prism.Navigation.Regions.RegionManager.RegionManagerProperty"/> property is not <see langword="null"/>.
            </summary>
        </member>
        <member name="F:Prism.Navigation.Regions.Behaviors.RegionManagerRegistrationBehavior.BehaviorKey">
            <summary>
            The key of this behavior.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.RegionManagerRegistrationBehavior.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Navigation.Regions.Behaviors.RegionManagerRegistrationBehavior"/>.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.Behaviors.RegionManagerRegistrationBehavior.RegionManagerAccessor">
            <summary>
            Provides an abstraction on top of the RegionManager static members.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.Behaviors.RegionManagerRegistrationBehavior.HostControl">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Prism.Navigation.Regions.IRegion"/> is attached to.
            </summary>
            <value>A <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Prism.Navigation.Regions.IRegion"/> is attached to.
            This is usually a <see cref="T:System.Windows.FrameworkElement"/> that is part of the tree.</value>
            <exception cref="T:System.InvalidOperationException">When this member is set after the <see cref="M:Prism.Navigation.Regions.IRegionBehavior.Attach"/> method has being called.</exception>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.RegionManagerRegistrationBehavior.OnAttach">
            <summary>
            When the <see cref="T:Prism.Navigation.Regions.IRegion"/> has a name assigned, the behavior will start monitoring the ancestor controls in the element tree
            to look for an <see cref="T:Prism.Navigation.Regions.IRegionManager"/> where to register the region in.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.RegionManagerRegistrationBehavior.OnUpdatingRegions(System.Object,System.EventArgs)">
            <summary>
            This event handler gets called when a RegionManager is requering the instances of a region to be registered if they are not already.
            <remarks>Although this is a public method to support Weak Delegates in Silverlight, it should not be called by the user.</remarks>
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The arguments.</param>
        </member>
        <member name="T:Prism.Navigation.Regions.Behaviors.RegionMemberLifetimeBehavior">
            <summary>
            The RegionMemberLifetimeBehavior determines if items should be removed from the <see cref="T:Prism.Navigation.Regions.IRegion"/>
            when they are deactivated.
            </summary>
            <remarks>
            The <see cref="T:Prism.Navigation.Regions.Behaviors.RegionMemberLifetimeBehavior"/> monitors the <see cref="P:Prism.Navigation.Regions.IRegion.ActiveViews"/>
            collection to discover items that transition into a deactivated state.
            <p/>
            The behavior checks the removed items for either the <see cref="T:Prism.Navigation.Regions.IRegionMemberLifetime"/>
            or the <see cref="T:Prism.Navigation.Regions.RegionMemberLifetimeAttribute"/> (in that order) to determine if it should be kept
            alive on removal.
            <p/>
            If the item in the collection is a <see cref="T:System.Windows.FrameworkElement"/>, it will
            also check it's DataContext for <see cref="T:Prism.Navigation.Regions.IRegionMemberLifetime"/> or the <see cref="T:Prism.Navigation.Regions.RegionMemberLifetimeAttribute"/>.
            <p/>
            The order of checks are:
            <list type="number">
                <item>Region Item's IRegionMemberLifetime.KeepAlive value.</item>
                <item>Region Item's DataContext's IRegionMemberLifetime.KeepAlive value.</item>
                <item>Region Item's RegionMemberLifetimeAttribute.KeepAlive value.</item>
                <item>Region Item's DataContext's RegionMemberLifetimeAttribute.KeepAlive value.</item>
            </list>
            </remarks>
        </member>
        <member name="F:Prism.Navigation.Regions.Behaviors.RegionMemberLifetimeBehavior.BehaviorKey">
            <summary>
            The key for this behavior.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.RegionMemberLifetimeBehavior.OnAttach">
            <summary>
            Override this method to perform the logic after the behavior has been attached.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.Behaviors.SelectorItemsSourceSyncBehavior">
             <summary>
             Defines the attached behavior that keeps the items of the <see cref="T:System.Windows.Controls.Primitives.Selector"/> host control in synchronization with the <see cref="T:Prism.Navigation.Regions.IRegion"/>.
            
             This behavior also makes sure that, if you activate a view in a region, the SelectedItem is set. If you set the SelectedItem or SelectedItems (ListBox)
             then this behavior will also call Activate on the selected items.
             <remarks>
             When calling Activate on a view, you can only select a single active view at a time. By setting the SelectedItems property of a listbox, you can set
             multiple views to active.
             </remarks>
             </summary>
        </member>
        <member name="F:Prism.Navigation.Regions.Behaviors.SelectorItemsSourceSyncBehavior.BehaviorKey">
            <summary>
            Name that identifies the SelectorItemsSourceSyncBehavior behavior in a collection of RegionsBehaviors.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.Behaviors.SelectorItemsSourceSyncBehavior.HostControl">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Prism.Navigation.Regions.IRegion"/> is attached to.
            </summary>
            <value>
            A <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Prism.Navigation.Regions.IRegion"/> is attached to.
            </value>
            <remarks>For this behavior, the host control must always be a <see cref="T:System.Windows.Controls.Primitives.Selector"/> or an inherited class.</remarks>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.SelectorItemsSourceSyncBehavior.OnAttach">
            <summary>
            Starts to monitor the <see cref="T:Prism.Navigation.Regions.IRegion"/> to keep it in sync with the items of the <see cref="P:Prism.Navigation.Regions.Behaviors.SelectorItemsSourceSyncBehavior.HostControl"/>.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.Behaviors.SyncRegionContextWithHostBehavior">
             <summary>
             Behavior that synchronizes the <see cref="P:Prism.Navigation.Regions.IRegion.Context"/> property of a <see cref="T:Prism.Navigation.Regions.IRegion"/> with
             the control that hosts the Region. It does this by setting the <see cref="F:Prism.Navigation.Regions.RegionManager.RegionContextProperty"/>
             Dependency Property on the host control.
            
             This behavior allows the usage of two way databinding of the RegionContext from XAML.
             </summary>
        </member>
        <member name="F:Prism.Navigation.Regions.Behaviors.SyncRegionContextWithHostBehavior.BehaviorKey">
            <summary>
            Name that identifies the SyncRegionContextWithHostBehavior behavior in a collection of RegionsBehaviors.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.Behaviors.SyncRegionContextWithHostBehavior.HostControl">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Prism.Navigation.Regions.IRegion"/> is attached to.
            </summary>
            <value>
            A <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Prism.Navigation.Regions.IRegion"/> is attached to.
            This is usually a <see cref="T:System.Windows.FrameworkElement"/> that is part of the tree.
            </value>
        </member>
        <member name="M:Prism.Navigation.Regions.Behaviors.SyncRegionContextWithHostBehavior.OnAttach">
            <summary>
            Override this method to perform the logic after the behavior has been attached.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.ContentControlRegionAdapter">
            <summary>
            Adapter that creates a new <see cref="T:Prism.Navigation.Regions.SingleActiveRegion"/> and monitors its
            active view to set it on the adapted <see cref="T:System.Windows.Controls.ContentControl"/>.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.ContentControlRegionAdapter.#ctor(Prism.Navigation.Regions.IRegionBehaviorFactory)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Navigation.Regions.ContentControlRegionAdapter"/>.
            </summary>
            <param name="regionBehaviorFactory">The factory used to create the region behaviors to attach to the created regions.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.ContentControlRegionAdapter.Adapt(Prism.Navigation.Regions.IRegion,System.Windows.Controls.ContentControl)">
            <summary>
            Adapts a <see cref="T:System.Windows.Controls.ContentControl"/> to an <see cref="T:Prism.Navigation.Regions.IRegion"/>.
            </summary>
            <param name="region">The new region being used.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.ContentControlRegionAdapter.CreateRegion">
            <summary>
            Creates a new instance of <see cref="T:Prism.Navigation.Regions.SingleActiveRegion"/>.
            </summary>
            <returns>A new instance of <see cref="T:Prism.Navigation.Regions.SingleActiveRegion"/>.</returns>
        </member>
        <member name="E:Prism.Navigation.Regions.DefaultRegionManagerAccessor.UpdatingRegions">
            <summary>
            Notification used by attached behaviors to update the region managers appropriately if needed to.
            </summary>
            <remarks>This event uses weak references to the event handler to prevent this static event of keeping the
            target element longer than expected.</remarks>
        </member>
        <member name="M:Prism.Navigation.Regions.DefaultRegionManagerAccessor.GetRegionName(System.Windows.DependencyObject)">
            <summary>
            Gets the value for the RegionName attached property.
            </summary>
            <param name="element">The object to adapt. This is typically a container (i.e a control).</param>
            <returns>The name of the region that should be created when
            the RegionManager is also set in this element.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.DefaultRegionManagerAccessor.GetRegionManager(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RegionName attached property.
            </summary>
            <param name="element">The target element.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/> attached to the <paramref name="element"/> element.</returns>
        </member>
        <member name="T:Prism.Navigation.Regions.INavigationAware">
            <summary>
            Provides a way for objects involved in navigation to be notified of navigation activities.
            </summary>
            <remarks>
            Provides compatibility for Legacy Prism.Wpf apps.
            </remarks>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegionManagerAccessor">
            <summary>
            Provides an abstraction on top of the RegionManager static members.
            </summary>
        </member>
        <member name="E:Prism.Navigation.Regions.IRegionManagerAccessor.UpdatingRegions">
            <summary>
            Notification used by attached behaviors to update the region managers appropriately if needed to.
            </summary>
            <remarks>This event uses weak references to the event handler to prevent this static event of keeping the
            target element longer than expected.</remarks>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManagerAccessor.GetRegionName(System.Windows.DependencyObject)">
            <summary>
            Gets the value for the RegionName attached property.
            </summary>
            <param name="element">The object to adapt. This is typically a container (i.e a control).</param>
            <returns>The name of the region that should be created when
            the RegionManager is also set in this element.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManagerAccessor.GetRegionManager(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RegionName attached property.
            </summary>
            <param name="element">The target element.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/> attached to the <paramref name="element"/> element.</returns>
        </member>
        <member name="T:Prism.Navigation.Regions.ItemMetadata">
            <summary>
            Defines a class that wraps an item and adds metadata for it.
            </summary>
        </member>
        <member name="F:Prism.Navigation.Regions.ItemMetadata.NameProperty">
            <summary>
            The name of the wrapped item.
            </summary>
        </member>
        <member name="F:Prism.Navigation.Regions.ItemMetadata.IsActiveProperty">
            <summary>
            Value indicating whether the wrapped item is considered active.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.ItemMetadata.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Navigation.Regions.ItemMetadata"/>.
            </summary>
            <param name="item">The item to wrap.</param>
        </member>
        <member name="P:Prism.Navigation.Regions.ItemMetadata.Item">
            <summary>
            Gets the wrapped item.
            </summary>
            <value>The wrapped item.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.ItemMetadata.Name">
            <summary>
            Gets or sets a name for the wrapped item.
            </summary>
            <value>The name of the wrapped item.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.ItemMetadata.IsActive">
            <summary>
            Gets or sets a value indicating whether the wrapped item is considered active.
            </summary>
            <value><see langword="true" /> if the item should be considered active; otherwise <see langword="false" />.</value>
        </member>
        <member name="E:Prism.Navigation.Regions.ItemMetadata.MetadataChanged">
            <summary>
            Occurs when metadata on the item changes.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.ItemMetadata.InvokeMetadataChanged">
            <summary>
            Explicitly invokes <see cref="E:Prism.Navigation.Regions.ItemMetadata.MetadataChanged"/> to notify listeners.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.ItemsControlRegionAdapter">
            <summary>
            Adapter that creates a new <see cref="T:Prism.Navigation.Regions.AllActiveRegion"/> and binds all
            the views to the adapted <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.ItemsControlRegionAdapter.#ctor(Prism.Navigation.Regions.IRegionBehaviorFactory)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Navigation.Regions.ItemsControlRegionAdapter"/>.
            </summary>
            <param name="regionBehaviorFactory">The factory used to create the region behaviors to attach to the created regions.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.ItemsControlRegionAdapter.Adapt(Prism.Navigation.Regions.IRegion,System.Windows.Controls.ItemsControl)">
            <summary>
            Adapts an <see cref="T:System.Windows.Controls.ItemsControl"/> to an <see cref="T:Prism.Navigation.Regions.IRegion"/>.
            </summary>
            <param name="region">The new region being used.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.ItemsControlRegionAdapter.CreateRegion">
            <summary>
            Creates a new instance of <see cref="T:Prism.Navigation.Regions.AllActiveRegion"/>.
            </summary>
            <returns>A new instance of <see cref="T:Prism.Navigation.Regions.AllActiveRegion"/>.</returns>
        </member>
        <member name="T:Prism.Navigation.Regions.Region">
            <summary>
            Implementation of <see cref="T:Prism.Navigation.Regions.IRegion"/> that allows multiple active views.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.Region.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Navigation.Regions.Region"/>.
            </summary>
        </member>
        <member name="E:Prism.Navigation.Regions.Region.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.Region.Behaviors">
            <summary>
            Gets the collection of <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/>s that can extend the behavior of regions.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.Region.Context">
            <summary>
            Gets or sets a context for the region. This value can be used by the user to share context with the views.
            </summary>
            <value>The context value to be shared.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.Region.Name">
            <summary>
            Gets the name of the region that uniquely identifies the region within a <see cref="T:Prism.Navigation.Regions.IRegionManager"/>.
            </summary>
            <value>The name of the region.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.Region.Views">
            <summary>
            Gets a readonly view of the collection of views in the region.
            </summary>
            <value>An <see cref="T:Prism.Navigation.Regions.IViewsCollection"/> of all the added views.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.Region.ActiveViews">
            <summary>
            Gets a readonly view of the collection of all the active views in the region.
            </summary>
            <value>An <see cref="T:Prism.Navigation.Regions.IViewsCollection"/> of all the active views.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.Region.SortComparison">
            <summary>
            Gets or sets the comparison used to sort the views.
            </summary>
            <value>The comparison to use.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.Region.RegionManager">
            <summary>
            Gets or sets the <see cref="T:Prism.Navigation.Regions.IRegionManager"/> that will be passed to the views when adding them to the region, unless the view is added by specifying createRegionManagerScope as <see langword="true" />.
            </summary>
            <value>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/> where this <see cref="T:Prism.Navigation.Regions.IRegion"/> is registered.</value>
            <remarks>This is usually used by implementations of <see cref="T:Prism.Navigation.Regions.IRegionManager"/> and should not be
            used by the developer explicitly.</remarks>
        </member>
        <member name="P:Prism.Navigation.Regions.Region.NavigationService">
            <summary>
            Gets the navigation service.
            </summary>
            <value>The navigation service.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.Region.ItemMetadataCollection">
            <summary>
            Gets the collection with all the views along with their metadata.
            </summary>
            <value>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:Prism.Navigation.Regions.ItemMetadata"/> with all the added views.</value>
        </member>
        <member name="M:Prism.Navigation.Regions.Region.Add(System.String)">
            <overloads>Adds a new view to the region.</overloads>
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="viewName">The view to add.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>. It will be the current region manager when using this overload.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.Region.Add(System.Object)">
            <overloads>Adds a new view to the region.</overloads>
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>. It will be the current region manager when using this overload.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.Region.Add(System.Object,System.String)">
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <param name="viewName">The name of the view. This can be used to retrieve it later by calling <see cref="M:Prism.Navigation.Regions.IRegion.GetView(System.String)"/>.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>. It will be the current region manager when using this overload.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.Region.Add(System.Object,System.String,System.Boolean)">
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <param name="viewName">The name of the view. This can be used to retrieve it later by calling <see cref="M:Prism.Navigation.Regions.IRegion.GetView(System.String)"/>.</param>
            <param name="createRegionManagerScope">When <see langword="true"/>, the added view will receive a new instance of <see cref="T:Prism.Navigation.Regions.IRegionManager"/>, otherwise it will use the current region manager for this region.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.Region.Remove(System.Object)">
            <summary>
            Removes the specified view from the region.
            </summary>
            <param name="view">The view to remove.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.Region.RemoveAll">
            <summary>
            Removes all views from the region.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.Region.Activate(System.Object)">
            <summary>
            Marks the specified view as active.
            </summary>
            <param name="view">The view to activate.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.Region.Deactivate(System.Object)">
            <summary>
            Marks the specified view as inactive.
            </summary>
            <param name="view">The view to deactivate.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.Region.GetView(System.String)">
            <summary>
            Returns the view instance that was added to the region using a specific name.
            </summary>
            <param name="viewName">The name used when adding the view to the region.</param>
            <returns>Returns the named view or <see langword="null"/> if the view with <paramref name="viewName"/> does not exist in the current region.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.Region.RequestNavigate(System.Uri,System.Action{Prism.Navigation.NavigationResult})">
            <summary>
            Initiates navigation to the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="navigationCallback">A callback to execute when the navigation request is completed.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.Region.RequestNavigate(System.Uri,System.Action{Prism.Navigation.NavigationResult},Prism.Navigation.INavigationParameters)">
            <summary>
            Initiates navigation to the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="navigationCallback">A callback to execute when the navigation request is completed.</param>
            <param name="navigationParameters">The navigation parameters specific to the navigation request.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.Region.DefaultSortComparison(System.Object,System.Object)">
            <summary>
            The default sort algorithm.
            </summary>
            <param name="x">The first view to compare.</param>
            <param name="y">The second view to compare.</param>
            <returns></returns>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionAdapterBase`1">
            <summary>
            Base class to facilitate the creation of <see cref="T:Prism.Navigation.Regions.IRegionAdapter"/> implementations.
            </summary>
            <typeparam name="T">Type of object to adapt.</typeparam>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionAdapterBase`1.#ctor(Prism.Navigation.Regions.IRegionBehaviorFactory)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Navigation.Regions.RegionAdapterBase`1"/>.
            </summary>
            <param name="regionBehaviorFactory">The factory used to create the region behaviors to attach to the created regions.</param>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionAdapterBase`1.RegionBehaviorFactory">
            <summary>
            Gets or sets the factory used to create the region behaviors to attach to the created regions.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionAdapterBase`1.Initialize(`0,System.String)">
            <summary>
            Adapts an object and binds it to a new <see cref="T:Prism.Navigation.Regions.IRegion"/>.
            </summary>
            <param name="regionTarget">The object to adapt.</param>
            <param name="regionName">The name of the region to be created.</param>
            <returns>The new instance of <see cref="T:Prism.Navigation.Regions.IRegion"/> that the <paramref name="regionTarget"/> is bound to.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionAdapterBase`1.Prism#Navigation#Regions#IRegionAdapter#Initialize(System.Object,System.String)">
            <summary>
            Adapts an object and binds it to a new <see cref="T:Prism.Navigation.Regions.IRegion"/>.
            </summary>
            <param name="regionTarget">The object to adapt.</param>
            <param name="regionName">The name of the region to be created.</param>
            <returns>The new instance of <see cref="T:Prism.Navigation.Regions.IRegion"/> that the <paramref name="regionTarget"/> is bound to.</returns>
            <remarks>This methods performs validation to check that <paramref name="regionTarget"/>
            is of type <typeparamref name="T"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">When <paramref name="regionTarget"/> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException">When <paramref name="regionTarget"/> is not of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionAdapterBase`1.AttachDefaultBehaviors(Prism.Navigation.Regions.IRegion,`0)">
            <summary>
            This method adds the default behaviors by using the <see cref="T:Prism.Navigation.Regions.IRegionBehaviorFactory"/> object.
            </summary>
            <param name="region">The region being used.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionAdapterBase`1.AttachBehaviors(Prism.Navigation.Regions.IRegion,`0)">
            <summary>
            Template method to attach new behaviors.
            </summary>
            <param name="region">The region being used.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionAdapterBase`1.Adapt(Prism.Navigation.Regions.IRegion,`0)">
            <summary>
            Template method to adapt the object to an <see cref="T:Prism.Navigation.Regions.IRegion"/>.
            </summary>
            <param name="region">The new region being used.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionAdapterBase`1.CreateRegion">
            <summary>
            Template method to create a new instance of <see cref="T:Prism.Navigation.Regions.IRegion"/>
            that will be used to adapt the object.
            </summary>
            <returns>A new instance of <see cref="T:Prism.Navigation.Regions.IRegion"/>.</returns>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionAdapterMappings">
            <summary>
            This class maps <see cref="T:System.Type"/> with <see cref="T:Prism.Navigation.Regions.IRegionAdapter"/>.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionAdapterMappings.RegisterMapping(System.Type,Prism.Navigation.Regions.IRegionAdapter)">
            <summary>
            Registers the mapping between a type and an adapter.
            </summary>
            <param name="controlType">The type of the control.</param>
            <param name="adapter">The adapter to use with the <paramref name="controlType"/> type.</param>
            <exception cref="T:System.ArgumentNullException">When any of <paramref name="controlType"/> or <paramref name="adapter"/> are <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException">If a mapping for <paramref name="controlType"/> already exists.</exception>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionAdapterMappings.RegisterMapping``1(Prism.Navigation.Regions.IRegionAdapter)">
            <summary>
            Registers the mapping between a type and an adapter.
            </summary>
            <typeparam name="TControl">The type of the control</typeparam>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionAdapterMappings.RegisterMapping``2">
            <summary>
            Registers the mapping between a type and an adapter.
            </summary>
            <typeparam name="TControl">The type of the control</typeparam>
            <typeparam name="TAdapter">The type of the IRegionAdapter to use with the TControl</typeparam>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionAdapterMappings.GetMapping(System.Type)">
            <summary>
            Returns the adapter associated with the type provided.
            </summary>
            <param name="controlType">The type to obtain the <see cref="T:Prism.Navigation.Regions.IRegionAdapter"/> mapped.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionAdapter"/> mapped to the <paramref name="controlType"/>.</returns>
            <remarks>This class will look for a registered type for <paramref name="controlType"/> and if there is not any,
            it will look for a registered type for any of its ancestors in the class hierarchy.
            If there is no registered type for <paramref name="controlType"/> or any of its ancestors,
            an exception will be thrown.</remarks>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">When there is no registered type for <paramref name="controlType"/> or any of its ancestors.</exception>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionAdapterMappings.GetMapping``1">
            <summary>
            Returns the adapter associated with the type provided.
            </summary>
            <typeparam name="T">The control type used to obtain the <see cref="T:Prism.Navigation.Regions.IRegionAdapter"/> mapped.</typeparam>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionAdapter"/> mapped to the <typeparamref name="T"/>.</returns>
            <remarks>This class will look for a registered type for <typeparamref name="T"/> and if there is not any,
            it will look for a registered type for any of its ancestors in the class hierarchy.
            If there is no registered type for <typeparamref name="T"/> or any of its ancestors,
            an exception will be thrown.</remarks>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">When there is no registered type for <typeparamref name="T"/> or any of its ancestors.</exception>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionContext">
             <summary>
             Class that holds methods to Set and Get the RegionContext from a DependencyObject.
            
             RegionContext allows sharing of contextual information between the view that's hosting a <see cref="T:Prism.Navigation.Regions.IRegion"/>
             and any views that are inside the Region.
             </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionContext.GetObservableContext(System.Windows.DependencyObject)">
             <summary>
             Returns an <see cref="T:Prism.Common.ObservableObject`1"/> wrapper around the RegionContext value. The RegionContext
             will be set on any views (dependency objects) that are inside the <see cref="P:Prism.Navigation.Regions.IRegion.Views"/> collection by
             the <see cref="T:Prism.Navigation.Regions.Behaviors.BindRegionContextToDependencyObjectBehavior"/> Behavior.
             The RegionContext will also be set to the control that hosts the Region, by the <see cref="T:Prism.Navigation.Regions.Behaviors.SyncRegionContextWithHostBehavior"/> Behavior.
            
             If the <see cref="T:Prism.Common.ObservableObject`1"/> wrapper does not already exist, an empty one will be created. This way, an observer can
             notify when the value is set for the first time.
             </summary>
             <param name="view">Any view that hold the RegionContext value. </param>
             <returns>Wrapper around the <see cref="T:Prism.Navigation.Regions.RegionContext"/> value. </returns>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionManager">
            <summary>
            This class is responsible for maintaining a collection of regions and attaching regions to controls.
            </summary>
            <remarks>
            This class supplies the attached properties that can be used for simple region creation from XAML.
            </remarks>
        </member>
        <member name="F:Prism.Navigation.Regions.RegionManager.RegionNameProperty">
            <summary>
            Identifies the RegionName attached property.
            </summary>
            <remarks>
            When a control has both the <see cref="F:Prism.Navigation.Regions.RegionManager.RegionNameProperty"/> and
            <see cref="F:Prism.Navigation.Regions.RegionManager.RegionManagerProperty"/> attached properties set to
            a value different than <see langword="null" /> and there is a
            <see cref="T:Prism.Navigation.Regions.IRegionAdapter"/> mapping registered for the control, it
            will create and adapt a new region for that control, and register it
            in the <see cref="T:Prism.Navigation.Regions.IRegionManager"/> with the specified region name.
            </remarks>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.SetRegionName(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the <see cref="F:Prism.Navigation.Regions.RegionManager.RegionNameProperty"/> attached property.
            </summary>
            <param name="regionTarget">The object to adapt. This is typically a container (i.e a control).</param>
            <param name="regionName">The name of the region to register.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.GetRegionName(System.Windows.DependencyObject)">
            <summary>
            Gets the value for the <see cref="F:Prism.Navigation.Regions.RegionManager.RegionNameProperty"/> attached property.
            </summary>
            <param name="regionTarget">The object to adapt. This is typically a container (i.e a control).</param>
            <returns>The name of the region that should be created when
            <see cref="F:Prism.Navigation.Regions.RegionManager.RegionManagerProperty"/> is also set in this element.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.GetObservableRegion(System.Windows.DependencyObject)">
             <summary>
             Returns an <see cref="T:Prism.Common.ObservableObject`1"/> wrapper that can hold an <see cref="T:Prism.Navigation.Regions.IRegion"/>. Using this wrapper
             you can detect when an <see cref="T:Prism.Navigation.Regions.IRegion"/> has been created by the <see cref="T:Prism.Navigation.Regions.RegionAdapterBase`1"/>.
            
             If the <see cref="T:Prism.Common.ObservableObject`1"/> wrapper does not yet exist, a new wrapper will be created. When the region
             gets created and assigned to the wrapper, you can use the <see cref="E:Prism.Common.ObservableObject`1.PropertyChanged"/> event
             to get notified of that change.
             </summary>
             <param name="view">The view that will host the region. </param>
             <returns>Wrapper that can hold an <see cref="T:Prism.Navigation.Regions.IRegion"/> value and can notify when the <see cref="T:Prism.Navigation.Regions.IRegion"/> value changes. </returns>
        </member>
        <member name="F:Prism.Navigation.Regions.RegionManager.RegionManagerProperty">
            <summary>
            Identifies the RegionManager attached property.
            </summary>
            <remarks>
            When a control has both the <see cref="F:Prism.Navigation.Regions.RegionManager.RegionNameProperty"/> and
            <see cref="F:Prism.Navigation.Regions.RegionManager.RegionManagerProperty"/> attached properties set to
            a value different than <see langword="null" /> and there is a
            <see cref="T:Prism.Navigation.Regions.IRegionAdapter"/> mapping registered for the control, it
            will create and adapt a new region for that control, and register it
            in the <see cref="T:Prism.Navigation.Regions.IRegionManager"/> with the specified region name.
            </remarks>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.GetRegionManager(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Prism.Navigation.Regions.RegionManager.RegionNameProperty"/> attached property.
            </summary>
            <param name="target">The target element.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/> attached to the <paramref name="target"/> element.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.SetRegionManager(System.Windows.DependencyObject,Prism.Navigation.Regions.IRegionManager)">
            <summary>
            Sets the <see cref="F:Prism.Navigation.Regions.RegionManager.RegionManagerProperty"/> attached property.
            </summary>
            <param name="target">The target element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Prism.Navigation.Regions.RegionManager.RegionContextProperty">
            <summary>
            Identifies the RegionContext attached property.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.GetRegionContext(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Prism.Navigation.Regions.RegionManager.RegionContextProperty"/> attached property.
            </summary>
            <param name="target">The target element.</param>
            <returns>The region context to pass to the contained views.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.SetRegionContext(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the <see cref="F:Prism.Navigation.Regions.RegionManager.RegionContextProperty"/> attached property.
            </summary>
            <param name="target">The target element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="E:Prism.Navigation.Regions.RegionManager.UpdatingRegions">
            <summary>
            Notification used by attached behaviors to update the region managers appropriately if needed to.
            </summary>
            <remarks>This event uses weak references to the event handler to prevent this static event of keeping the
            target element longer than expected.</remarks>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.UpdateRegions">
            <summary>
            Notifies attached behaviors to update the region managers appropriately if needed to.
            </summary>
            <remarks>
            This method is normally called internally, and there is usually no need to call this from user code.
            </remarks>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Navigation.Regions.RegionManager"/>.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionManager.Regions">
            <summary>
            Gets a collection of <see cref="T:Prism.Navigation.Regions.IRegion"/> that identify each region by name. You can use this collection to add or remove regions to the current region manager.
            </summary>
            <value>A <see cref="T:Prism.Navigation.Regions.IRegionCollection"/> with all the registered regions.</value>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.CreateRegionManager">
            <summary>
            Creates a new region manager.
            </summary>
            <returns>A new region manager that can be used as a different scope from the current region manager.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.AddToRegion(System.String,System.Object)">
            <summary>
                Add a view to the Views collection of a Region. Note that the region must already exist in this <see cref="T:Prism.Navigation.Regions.IRegionManager"/>.
            </summary>
            <param name="regionName">The name of the region to add a view to</param>
            <param name="view">The view to add to the views collection</param>
            <returns>The RegionManager, to easily add several views. </returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.AddToRegion(System.String,System.String)">
            <summary>
            Add a view to the Views collection of a Region. Note that the region must already exist in this <see cref="T:Prism.Navigation.Regions.IRegionManager"/>.
            </summary>
            <param name="regionName">The name of the region to add a view to</param>
            <param name="targetName">The view to add to the views collection</param>
            <returns>The RegionManager, to easily add several views. </returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.RegisterViewWithRegion(System.String,System.Type)">
            <summary>
            Associate a view with a region, by registering a type. When the region get's displayed
            this type will be resolved using the ServiceLocator into a concrete instance. The instance
            will be added to the Views collection of the region
            </summary>
            <param name="regionName">The name of the region to associate the view with.</param>
            <param name="viewType">The type of the view to register with the </param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/>, for adding several views easily</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.RegisterViewWithRegion(System.String,System.String)">
            <summary>
            Associate a view with a region, by registering a type. When the region get's displayed
            this type will be resolved using the ServiceLocator into a concrete instance. The instance
            will be added to the Views collection of the region
            </summary>
            <param name="regionName">The name of the region to associate the view with.</param>
            <param name="targetName">The type of the view to register with the </param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/>, for adding several views easily</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.RegisterViewWithRegion(System.String,System.Func{Prism.Ioc.IContainerProvider,System.Object})">
            <summary>
            Associate a view with a region, using a delegate to resolve a concrete instance of the view.
            When the region get's displayed, this delegate will be called and the result will be added to the
            views collection of the region.
            </summary>
            <param name="regionName">The name of the region to associate the view with.</param>
            <param name="getContentDelegate">The delegate used to resolve a concrete instance of the view.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/>, for adding several views easily</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.RequestNavigate(System.String,System.Uri,System.Action{Prism.Navigation.NavigationResult})">
            <summary>
            Navigates the specified region manager.
            </summary>
            <param name="regionName">The name of the region to call Navigate on.</param>
            <param name="source">The URI of the content to display.</param>
            <param name="navigationCallback">The navigation callback.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.RequestNavigate(System.String,System.Uri,System.Action{Prism.Navigation.NavigationResult},Prism.Navigation.INavigationParameters)">
            <summary>
            This method allows an IRegionManager to locate a specified region and navigate in it to the specified target Uri, passing a navigation callback and an instance of NavigationParameters, which holds a collection of object parameters.
            </summary>
            <param name="regionName">The name of the region where the navigation will occur.</param>
            <param name="target">A Uri that represents the target where the region will navigate.</param>
            <param name="navigationCallback">The navigation callback that will be executed after the navigation is completed.</param>
            <param name="navigationParameters">An instance of NavigationParameters, which holds a collection of object parameters.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.CreateNewRegionItem(System.String)">
            <summary>
            Provides a new item for the region based on the supplied candidate target contract name.
            </summary>
            <param name="candidateTargetContract">The target contract to build.</param>
            <returns>An instance of an item to put into the <see cref="T:Prism.Navigation.Regions.IRegion"/>.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionManager.RegionCollection.Add(System.String,Prism.Navigation.Regions.IRegion)">
            <summary>
            Adds a region to the <see cref="T:Prism.Navigation.Regions.RegionManager"/> with the name received as argument.
            </summary>
            <param name="regionName">The name to be given to the region.</param>
            <param name="region">The region to be added to the <see cref="T:Prism.Navigation.Regions.RegionManager"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="region"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="regionName"/> and <paramref name="region"/>'s name do not match and the <paramref name="region"/> <see cref="P:Prism.Navigation.Regions.IRegion.Name"/> is not <see langword="null"/>.</exception>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionNavigationContentLoader">
            <summary>
            Implementation of <see cref="T:Prism.Navigation.Regions.IRegionNavigationContentLoader"/> that relies on a <see cref="T:Prism.Ioc.IContainerProvider"/>
            to create new views when necessary.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationContentLoader.#ctor(Prism.Ioc.IContainerExtension)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.RegionNavigationContentLoader"/> class with a service locator.
            </summary>
            <param name="container">The <see cref="T:Prism.Ioc.IContainerExtension" />.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationContentLoader.LoadContent(Prism.Navigation.Regions.IRegion,Prism.Navigation.Regions.NavigationContext)">
            <summary>
            Gets the view to which the navigation request represented by <paramref name="navigationContext"/> applies.
            </summary>
            <param name="region">The region.</param>
            <param name="navigationContext">The context representing the navigation request.</param>
            <returns>
            The view to be the target of the navigation request.
            </returns>
            <remarks>
            If none of the views in the region can be the target of the navigation request, a new view
            is created and added to the region.
            </remarks>
            <exception cref="T:System.ArgumentException">when a new view cannot be created for the navigation request.</exception>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationContentLoader.AddViewToRegion(Prism.Navigation.Regions.IRegion,System.Object)">
            <summary>
            Adds the view to the region.
            </summary>
            <param name="region">The region to add the view to</param>
            <param name="view">The view to add to the region</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationContentLoader.CreateNewRegionItem(System.String)">
            <summary>
            Provides a new item for the region based on the supplied candidate target contract name.
            </summary>
            <param name="candidateTargetContract">The target contract to build.</param>
            <returns>An instance of an item to put into the <see cref="T:Prism.Navigation.Regions.IRegion"/>.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationContentLoader.GetContractFromNavigationContext(Prism.Navigation.Regions.NavigationContext)">
            <summary>
            Returns the candidate TargetContract based on the <see cref="T:Prism.Navigation.Regions.NavigationContext"/>.
            </summary>
            <param name="navigationContext">The navigation contract.</param>
            <returns>The candidate contract to seek within the <see cref="T:Prism.Navigation.Regions.IRegion"/> and to use, if not found, when resolving from the container.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationContentLoader.GetCandidatesFromRegion(Prism.Navigation.Regions.IRegion,System.String)">
            <summary>
            Returns the set of candidates that may satisfy this navigation request.
            </summary>
            <param name="region">The region containing items that may satisfy the navigation request.</param>
            <param name="candidateNavigationContract">The candidate navigation target as determined by <see cref="M:Prism.Navigation.Regions.RegionNavigationContentLoader.GetContractFromNavigationContext(Prism.Navigation.Regions.NavigationContext)"/></param>
            <returns>An enumerable of candidate objects from the <see cref="T:Prism.Navigation.Regions.IRegion"/></returns>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionNavigationService">
            <summary>
            Provides navigation for regions.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationService.#ctor(Prism.Ioc.IContainerExtension,Prism.Navigation.Regions.IRegionNavigationContentLoader,Prism.Navigation.Regions.IRegionNavigationJournal)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.RegionNavigationService"/> class.
            </summary>
            <param name="container">The <see cref="T:Prism.Ioc.IContainerExtension" />.</param>
            <param name="regionNavigationContentLoader">The navigation target handler.</param>
            <param name="journal">The journal.</param>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionNavigationService.Region">
            <summary>
            Gets or sets the region.
            </summary>
            <value>The region.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionNavigationService.Journal">
            <summary>
            Gets the journal.
            </summary>
            <value>The journal.</value>
        </member>
        <member name="E:Prism.Navigation.Regions.RegionNavigationService.Navigating">
            <summary>
            Raised when the region is about to be navigated to content.
            </summary>
        </member>
        <member name="E:Prism.Navigation.Regions.RegionNavigationService.Navigated">
            <summary>
            Raised when the region is navigated to content.
            </summary>
        </member>
        <member name="E:Prism.Navigation.Regions.RegionNavigationService.NavigationFailed">
            <summary>
            Raised when a navigation request fails.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationService.RequestNavigate(System.Uri,System.Action{Prism.Navigation.NavigationResult})">
            <summary>
            Initiates navigation to the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="navigationCallback">A callback to execute when the navigation request is completed.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationService.RequestNavigate(System.Uri,System.Action{Prism.Navigation.NavigationResult},Prism.Navigation.INavigationParameters)">
            <summary>
            Initiates navigation to the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="navigationCallback">A callback to execute when the navigation request is completed.</param>
            <param name="navigationParameters">The navigation parameters specific to the navigation request.</param>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionViewRegistry">
            <summary>
            Defines a registry for the content of the regions used on View Discovery composition.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionViewRegistry.#ctor(Prism.Ioc.IContainerExtension)">
            <summary>
            Creates a new instance of the <see cref="T:Prism.Navigation.Regions.RegionViewRegistry"/> class.
            </summary>
            <param name="container"><see cref="T:Prism.Ioc.IContainerExtension"/> used to create the instance of the views from its <see cref="T:System.Type"/>.</param>
        </member>
        <member name="E:Prism.Navigation.Regions.RegionViewRegistry.ContentRegistered">
            <summary>
            Occurs whenever a new view is registered.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionViewRegistry.GetContents(System.String,Prism.Ioc.IContainerProvider)">
            <summary>
            Returns the contents registered for a region.
            </summary>
            <param name="regionName">Name of the region which content is being requested.</param>
            <param name="container">The <see cref="T:Prism.Ioc.IContainerProvider"/> to use to get the View.</param>
            <returns>Collection of contents registered for the region.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionViewRegistry.RegisterViewWithRegion(System.String,System.Type)">
            <summary>
            Registers a content type with a region name.
            </summary>
            <param name="regionName">Region name to which the <paramref name="viewType"/> will be registered.</param>
            <param name="viewType">Content type to be registered for the <paramref name="regionName"/>.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionViewRegistry.RegisterViewWithRegion(System.String,System.Func{Prism.Ioc.IContainerProvider,System.Object})">
            <summary>
            Registers a delegate that can be used to retrieve the content associated with a region name.
            </summary>
            <param name="regionName">Region name to which the <paramref name="getContentDelegate"/> will be registered.</param>
            <param name="getContentDelegate">Delegate used to retrieve the content associated with the <paramref name="regionName"/>.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionViewRegistry.RegisterViewWithRegion(System.String,System.String)">
            <summary>
            Associate a view with a region, by registering a type. When the region get's displayed
            this type will be resolved using the ServiceLocator into a concrete instance. The instance
            will be added to the Views collection of the region
            </summary>
            <param name="regionName">The name of the region to associate the view with.</param>
            <param name="targetName">The type of the view to register with the </param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/>, for adding several views easily</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionViewRegistry.CreateInstance(System.Type)">
            <summary>
            Creates an instance of a registered view <see cref="T:System.Type"/>.
            </summary>
            <param name="type">Type of the registered view.</param>
            <returns>Instance of the registered view.</returns>
        </member>
        <member name="T:Prism.Navigation.Regions.SelectorRegionAdapter">
            <summary>
            Adapter that creates a new <see cref="T:Prism.Navigation.Regions.Region"/> and binds all
            the views to the adapted <see cref="T:System.Windows.Controls.Primitives.Selector"/>.
            It also keeps the <see cref="P:Prism.Navigation.Regions.IRegion.ActiveViews"/> and the selected items
            of the <see cref="T:System.Windows.Controls.Primitives.Selector"/> in sync.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.SelectorRegionAdapter.#ctor(Prism.Navigation.Regions.IRegionBehaviorFactory)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Navigation.Regions.SelectorRegionAdapter"/>.
            </summary>
            <param name="regionBehaviorFactory">The factory used to create the region behaviors to attach to the created regions.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.SelectorRegionAdapter.Adapt(Prism.Navigation.Regions.IRegion,System.Windows.Controls.Primitives.Selector)">
            <summary>
            Adapts an <see cref="T:System.Windows.Controls.Primitives.Selector"/> to an <see cref="T:Prism.Navigation.Regions.IRegion"/>.
            </summary>
            <param name="region">The new region being used.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.SelectorRegionAdapter.AttachBehaviors(Prism.Navigation.Regions.IRegion,System.Windows.Controls.Primitives.Selector)">
            <summary>
            Attach new behaviors.
            </summary>
            <param name="region">The region being used.</param>
            <param name="regionTarget">The object to adapt.</param>
            <remarks>
            This class attaches the base behaviors and also listens for changes in the
            activity of the region or the control selection and keeps the in sync.
            </remarks>
        </member>
        <member name="M:Prism.Navigation.Regions.SelectorRegionAdapter.CreateRegion">
            <summary>
            Creates a new instance of <see cref="T:Prism.Navigation.Regions.Region"/>.
            </summary>
            <returns>A new instance of <see cref="T:Prism.Navigation.Regions.Region"/>.</returns>
        </member>
        <member name="T:Prism.Navigation.Regions.SingleActiveRegion">
            <summary>
            Region that allows a maximum of one active view at a time.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.SingleActiveRegion.Activate(System.Object)">
            <summary>
            Marks the specified view as active.
            </summary>
            <param name="view">The view to activate.</param>
            <remarks>If there is an active view before calling this method,
            that view will be deactivated automatically.</remarks>
        </member>
        <member name="T:Prism.Navigation.Regions.ViewsCollection">
            <summary>
            Implementation of <see cref="T:Prism.Navigation.Regions.IViewsCollection"/> that takes an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:Prism.Navigation.Regions.ItemMetadata"/>
            and filters it to display an <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> collection of
            <see cref="T:System.Object"/> elements (the items which the <see cref="T:Prism.Navigation.Regions.ItemMetadata"/> wraps).
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewsCollection.#ctor(System.Collections.ObjectModel.ObservableCollection{Prism.Navigation.Regions.ItemMetadata},System.Predicate{Prism.Navigation.Regions.ItemMetadata})">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.ViewsCollection"/> class.
            </summary>
            <param name="list">The list to wrap and filter.</param>
            <param name="filter">A predicate to filter the <paramref name="list"/> collection.</param>
        </member>
        <member name="E:Prism.Navigation.Regions.ViewsCollection.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.ViewsCollection.SortComparison">
            <summary>
            Gets or sets the comparison used to sort the views.
            </summary>
            <value>The comparison to use.</value>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewsCollection.Contains(System.Object)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="value">The object to locate in the collection.</param>
            <returns><see langword="true" /> if <paramref name="value"/> is found in the collection; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewsCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewsCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewsCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Used to invoked the <see cref="E:Prism.Navigation.Regions.ViewsCollection.CollectionChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewsCollection.ResetAllMonitors">
            <summary>
            Removes all monitoring of underlying MetadataItems and re-adds them.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewsCollection.MonitorAllMetadataItems">
            <summary>
            Adds all underlying MetadataItems to the list from the subjectCollection
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewsCollection.RemoveAllMetadataMonitors">
            <summary>
            Removes all monitored items from our monitoring list.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewsCollection.AddMetadataMonitor(Prism.Navigation.Regions.ItemMetadata,System.Boolean)">
            <summary>
            Adds handler to monitor the MetadataItem and adds it to our monitoring list.
            </summary>
            <param name="itemMetadata"></param>
            <param name="isInList"></param>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewsCollection.RemoveMetadataMonitor(Prism.Navigation.Regions.ItemMetadata)">
            <summary>
            Unhooks from the MetadataItem change event and removes from our monitoring list.
            </summary>
            <param name="itemMetadata"></param>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewsCollection.OnItemMetadataChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when any of the underlying ItemMetadata items we're monitoring changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewsCollection.SourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            The event handler due to changes in the underlying collection.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Prism.PrismApplicationBase">
            <summary>
            Base application class that provides a basic initialization sequence
            </summary>
            <remarks>
            This class must be overridden to provide application specific configuration.
            </remarks>
        </member>
        <member name="P:Prism.PrismApplicationBase.Container">
            <summary>
            The dependency injection container used to resolve objects
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.OnStartup(System.Windows.StartupEventArgs)">
            <summary>
            Raises the System.Windows.Application.Startup event.
            </summary>
            <param name="e">A System.Windows.StartupEventArgs that contains the event data.</param>
        </member>
        <member name="M:Prism.PrismApplicationBase.InitializeInternal">
            <summary>
            Run the initialization process.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.ConfigureViewModelLocator">
            <summary>
            Configures the <see cref="T:Prism.Mvvm.ViewModelLocator"/> used by Prism.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.Initialize">
            <summary>
            Runs the initialization sequence to configure the Prism application.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.CreateContainerExtension">
            <summary>
            Creates the container used by Prism.
            </summary>
            <returns>The container</returns>
        </member>
        <member name="M:Prism.PrismApplicationBase.CreateModuleCatalog">
            <summary>
            Creates the <see cref="T:Prism.Modularity.IModuleCatalog"/> used by Prism.
            </summary>
             <remarks>
            The base implementation returns a new ModuleCatalog.
            </remarks>
        </member>
        <member name="M:Prism.PrismApplicationBase.RegisterRequiredTypes(Prism.Ioc.IContainerRegistry)">
            <summary>
            Registers all types that are required by Prism to function with the container.
            </summary>
            <param name="containerRegistry"></param>
        </member>
        <member name="M:Prism.PrismApplicationBase.RegisterTypes(Prism.Ioc.IContainerRegistry)">
            <summary>
            Used to register types with the container that will be used by your application.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.ConfigureDefaultRegionBehaviors(Prism.Navigation.Regions.IRegionBehaviorFactory)">
            <summary>
            Configures the <see cref="T:Prism.Navigation.Regions.IRegionBehaviorFactory"/>.
            This will be the list of default behaviors that will be added to a region.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.ConfigureRegionAdapterMappings(Prism.Navigation.Regions.RegionAdapterMappings)">
            <summary>
            Configures the default region adapter mappings to use in the application, in order
            to adapt UI controls defined in XAML to use a region and register it automatically.
            May be overwritten in a derived class to add specific mappings required by the application.
            </summary>
            <returns>The <see cref="T:Prism.Navigation.Regions.RegionAdapterMappings"/> instance containing all the mappings.</returns>
        </member>
        <member name="M:Prism.PrismApplicationBase.RegisterFrameworkExceptionTypes">
            <summary>
            Registers the <see cref="T:System.Type"/>s of the Exceptions that are not considered
            root exceptions by the <see cref="T:System.ExceptionExtensions"/>.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.CreateShell">
            <summary>
            Creates the shell or main window of the application.
            </summary>
            <returns>The shell of the application.</returns>
        </member>
        <member name="M:Prism.PrismApplicationBase.InitializeShell(System.Windows.Window)">
            <summary>
            Initializes the shell.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.OnInitialized">
            <summary>
            Contains actions that should occur last.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.ConfigureModuleCatalog(Prism.Modularity.IModuleCatalog)">
            <summary>
            Configures the <see cref="T:Prism.Modularity.IModuleCatalog"/> used by Prism.
            </summary>
        </member>
        <member name="M:Prism.PrismApplicationBase.InitializeModules">
            <summary>
            Initializes the modules.
            </summary>
        </member>
        <member name="T:Prism.PrismBootstrapperBase">
            <summary>
            Base class that provides a basic bootstrapping sequence and hooks
            that specific implementations can override
            </summary>
            <remarks>
            This class must be overridden to provide application specific configuration.
            </remarks>
        </member>
        <member name="P:Prism.PrismBootstrapperBase.Container">
            <summary>
            The dependency injection container used to resolve objects
            </summary>
        </member>
        <member name="P:Prism.PrismBootstrapperBase.Shell">
            <summary>
            Gets the shell user interface
            </summary>
            <value>The shell user interface.</value>
        </member>
        <member name="M:Prism.PrismBootstrapperBase.Run">
            <summary>
            Runs the bootstrapper process.
            </summary>
        </member>
        <member name="M:Prism.PrismBootstrapperBase.ConfigureViewModelLocator">
            <summary>
            Configures the <see cref="T:Prism.Mvvm.ViewModelLocator"/> used by Prism.
            </summary>
        </member>
        <member name="M:Prism.PrismBootstrapperBase.Initialize">
            <summary>
            Runs the initialization sequence to configure the Prism application.
            </summary>
        </member>
        <member name="M:Prism.PrismBootstrapperBase.CreateContainerExtension">
            <summary>
            Creates the container used by Prism.
            </summary>
            <returns>The container</returns>
        </member>
        <member name="M:Prism.PrismBootstrapperBase.CreateModuleCatalog">
            <summary>
            Creates the <see cref="T:Prism.Modularity.IModuleCatalog"/> used by Prism.
            </summary>
             <remarks>
            The base implementation returns a new ModuleCatalog.
            </remarks>
        </member>
        <member name="M:Prism.PrismBootstrapperBase.RegisterRequiredTypes(Prism.Ioc.IContainerRegistry)">
            <summary>
            Registers all types that are required by Prism to function with the container.
            </summary>
            <param name="containerRegistry"></param>
        </member>
        <member name="M:Prism.PrismBootstrapperBase.RegisterTypes(Prism.Ioc.IContainerRegistry)">
            <summary>
            Used to register types with the container that will be used by your application.
            </summary>
        </member>
        <member name="M:Prism.PrismBootstrapperBase.ConfigureDefaultRegionBehaviors(Prism.Navigation.Regions.IRegionBehaviorFactory)">
            <summary>
            Configures the <see cref="T:Prism.Navigation.Regions.IRegionBehaviorFactory"/>.
            This will be the list of default behaviors that will be added to a region.
            </summary>
        </member>
        <member name="M:Prism.PrismBootstrapperBase.ConfigureRegionAdapterMappings(Prism.Navigation.Regions.RegionAdapterMappings)">
            <summary>
            Configures the default region adapter mappings to use in the application, in order
            to adapt UI controls defined in XAML to use a region and register it automatically.
            May be overwritten in a derived class to add specific mappings required by the application.
            </summary>
            <returns>The <see cref="T:Prism.Navigation.Regions.RegionAdapterMappings"/> instance containing all the mappings.</returns>
        </member>
        <member name="M:Prism.PrismBootstrapperBase.RegisterFrameworkExceptionTypes">
            <summary>
            Registers the <see cref="T:System.Type"/>s of the Exceptions that are not considered
            root exceptions by the <see cref="T:System.ExceptionExtensions"/>.
            </summary>
        </member>
        <member name="M:Prism.PrismBootstrapperBase.CreateShell">
            <summary>
            Creates the shell or main window of the application.
            </summary>
            <returns>The shell of the application.</returns>
        </member>
        <member name="M:Prism.PrismBootstrapperBase.InitializeShell(System.Windows.DependencyObject)">
            <summary>
            Initializes the shell.
            </summary>
        </member>
        <member name="M:Prism.PrismBootstrapperBase.OnInitialized">
            <summary>
            Contains actions that should occur last.
            </summary>
        </member>
        <member name="M:Prism.PrismBootstrapperBase.ConfigureModuleCatalog(Prism.Modularity.IModuleCatalog)">
            <summary>
            Configures the <see cref="T:Prism.Modularity.IModuleCatalog"/> used by Prism.
            </summary>
        </member>
        <member name="M:Prism.PrismBootstrapperBase.InitializeModules">
            <summary>
            Initializes the modules.
            </summary>
        </member>
        <member name="T:Prism.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.AdapterInvalidTypeException">
            <summary>
              Looks up a localized string similar to The object must be of type &apos;{0}&apos; in order to use the current region adapter..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.CannotChangeRegionNameException">
            <summary>
              Looks up a localized string similar to Cannot change the region name once is set. The current region name is &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.CannotCreateNavigationTarget">
            <summary>
              Looks up a localized string similar to Cannot create navigation target &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.CanOnlyAddTypesThatInheritIFromRegionBehavior">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not implement from IRegionBehavior..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ConfigurationStoreCannotBeNull">
            <summary>
              Looks up a localized string similar to The ConfigurationStore cannot contain a null value. .
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ContentControlHasContentException">
            <summary>
              Looks up a localized string similar to ContentControl&apos;s Content property is not empty. 
               This control is being associated with a region, but the control is already bound to something else. 
               If you did not explicitly set the control&apos;s Content property, 
               this exception may be caused by a change in the value of the inherited RegionManager attached property..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DeactiveNotPossibleException">
            <summary>
              Looks up a localized string similar to Deactivation is not possible in this type of region..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DefaultTextLoggerPattern">
            <summary>
              Looks up a localized string similar to {1}: {2}. Priority: {3}. Timestamp:{0:u}..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DelegateCommandDelegatesCannotBeNull">
            <summary>
              Looks up a localized string similar to Neither the executeMethod nor the canExecuteMethod delegates can be null..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DelegateCommandInvalidGenericPayloadType">
            <summary>
              Looks up a localized string similar to T for DelegateCommand&lt;T&gt; is not an object nor Nullable..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DirectoryNotFound">
            <summary>
              Looks up a localized string similar to Directory {0} was not found..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DuplicatedModuleGroup">
            <summary>
              Looks up a localized string similar to A duplicated module group with name {0} has been found by the loader..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.FailedToGetType">
            <summary>
              Looks up a localized string similar to Unable to retrieve the module type {0} from the loaded assemblies.  You may need to specify a more fully-qualified type name..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.HostControlCannotBeNull">
            <summary>
              Looks up a localized string similar to HostControl cannot have null value when behavior attaches. .
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.HostControlCannotBeSetAfterAttach">
            <summary>
              Looks up a localized string similar to The HostControl property cannot be set after Attach method has been called..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.HostControlMustBeATabControl">
            <summary>
              Looks up a localized string similar to HostControl type must be a TabControl..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.IEnumeratorObsolete">
            <summary>
              Looks up a localized string similar to The IModuleEnumerator interface is no longer used and has been replaced by ModuleCatalog..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.InvalidArgumentAssemblyUri">
            <summary>
              Looks up a localized string similar to The argument must be a valid absolute Uri to an assembly file..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.InvalidDelegateRerefenceTypeException">
            <summary>
              Looks up a localized string similar to The Target of the IDelegateReference should be of type {0}..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ItemsControlHasItemsSourceException">
            <summary>
              Looks up a localized string similar to ItemsControl&apos;s ItemsSource property is not empty. 
               This control is being associated with a region, but the control is already bound to something else. 
               If you did not explicitly set the control&apos;s ItemSource property, 
               this exception may be caused by a change in the value of the inherited RegionManager attached property..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.MappingExistsException">
            <summary>
              Looks up a localized string similar to Mapping with the given type is already registered: {0}..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ModuleNotFound">
            <summary>
              Looks up a localized string similar to Module {0} was not found in the catalog..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ModulePathCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to The ModulePath cannot contain a null value or be empty.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ModuleTypeNotFound">
            <summary>
              Looks up a localized string similar to Failed to load type &apos;{0}&apos; from assembly &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.MustBeModuleGroupCatalog">
            <summary>
              Looks up a localized string similar to The ModuleCatalog must implement IModuleGroupCatalog to add groups.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.NavigationInProgress">
            <summary>
              Looks up a localized string similar to Navigation is already in progress on region with name &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.NavigationServiceHasNoRegion">
            <summary>
              Looks up a localized string similar to Navigation cannot proceed until a region is set for the RegionNavigationService..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.NoRegionAdapterException">
            <summary>
              Looks up a localized string similar to The IRegionAdapter for the type {0} is not registered in the region adapter mappings. You can register an IRegionAdapter for this control by overriding the ConfigureRegionAdapterMappings method in the bootstrapper..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.NoRetrieverCanRetrieveModule">
            <summary>
              Looks up a localized string similar to There is currently no moduleTypeLoader in the ModuleManager that can retrieve the specified module..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.OnViewRegisteredException">
            <summary>
              Looks up a localized string similar to An exception has occurred while trying to add a view to region &apos;{0}&apos;. 
               - The most likely causing exception was was: &apos;{1}&apos;.
               But also check the InnerExceptions for more detail or call .GetRootException(). .
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.PropertySupport_ExpressionNotProperty_Exception">
            <summary>
              Looks up a localized string similar to The member access expression does not access a property..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.PropertySupport_NotMemberAccessExpression_Exception">
            <summary>
              Looks up a localized string similar to The expression is not a member access expression..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.PropertySupport_StaticExpression_Exception">
            <summary>
              Looks up a localized string similar to The referenced property is a static property..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.RegionBehaviorAttachCannotBeCallWithNullRegion">
            <summary>
              Looks up a localized string similar to The Attach method cannot be called when Region property is null..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.RegionBehaviorRegionCannotBeSetAfterAttach">
            <summary>
              Looks up a localized string similar to The Region property cannot be set after Attach method has been called..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.RegionCreationException">
            <summary>
              Looks up a localized string similar to An exception occurred while creating a region with name &apos;{0}&apos;. The exception was: {1}. .
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.RegionManagerWithDifferentNameException">
            <summary>
              Looks up a localized string similar to The region being added already has a name of &apos;{0}&apos; and cannot be added to the region manager with a different name (&apos;{1}&apos;)..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.RegionNameCannotBeEmptyException">
            <summary>
              Looks up a localized string similar to The region name cannot be null or empty..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.RegionNameExistsException">
            <summary>
              Looks up a localized string similar to Region with the given name is already registered: {0}.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.RegionNotFound">
            <summary>
              Looks up a localized string similar to This RegionManager does not contain a Region with the name &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.RegionNotInRegionManagerException">
            <summary>
              Looks up a localized string similar to The region manager does not contain the {0} region..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.RegionViewExistsException">
            <summary>
              Looks up a localized string similar to View already exists in region..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.RegionViewNameExistsException">
            <summary>
              Looks up a localized string similar to View with name &apos;{0}&apos; already exists in the region..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.StringCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to The provided String argument {0} must not be null or empty..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.StringCannotBeNullOrEmpty1">
            <summary>
              Looks up a localized string similar to The provided String argument {0} must not be null or empty..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.TypeWithKeyNotRegistered">
            <summary>
              Looks up a localized string similar to No BehaviorType with key &apos;{0}&apos; was registered..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.UpdateRegionException">
            <summary>
              Looks up a localized string similar to An exception occurred while trying to create region objects. 
               - The most likely causing exception was: &apos;{0}&apos;.
               But also check the InnerExceptions for more detail or call .GetRootException(). .
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ValueMustBeOfTypeModuleInfo">
            <summary>
              Looks up a localized string similar to The value must be of type ModuleInfo..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ValueNotFound">
            <summary>
              Looks up a localized string similar to {0} not found..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ViewNotInRegionException">
            <summary>
              Looks up a localized string similar to The region does not contain the specified view..
            </summary>
        </member>
        <member name="T:System.Collections.ObjectModel.CollectionExtensions">
            <summary>
            Class that provides extension methods to Collection
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.CollectionExtensions.AddRange``1(System.Collections.ObjectModel.Collection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of items to a collection.
            </summary>
            <typeparam name="T">Type of objects within the collection.</typeparam>
            <param name="collection">The collection to add items to.</param>
            <param name="items">The items to add to the collection.</param>
            <returns>The collection.</returns>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="collection"/> or <paramref name="items"/> is <see langword="null"/>.</exception>
        </member>
    </members>
</doc>
