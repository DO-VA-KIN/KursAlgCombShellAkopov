<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Prism.Events</name>
    </assembly>
    <members>
        <member name="T:Prism.Events.BackgroundEventSubscription">
            <summary>
            Extends <see cref="T:Prism.Events.EventSubscription"/> to invoke the <see cref="P:Prism.Events.EventSubscription.Action"/> delegate in a background thread.
            </summary>
        </member>
        <member name="M:Prism.Events.BackgroundEventSubscription.#ctor(Prism.Events.IDelegateReference)">
            <summary>
            Creates a new instance of <see cref="T:Prism.Events.BackgroundEventSubscription"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action"/>.</exception>
        </member>
        <member name="M:Prism.Events.BackgroundEventSubscription.InvokeAction(System.Action)">
            <summary>
            Invokes the specified <see cref="T:System.Action"/> in an asynchronous thread by using a <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="T:Prism.Events.BackgroundEventSubscription`1">
            <summary>
            Extends <see cref="T:Prism.Events.EventSubscription`1"/> to invoke the <see cref="P:Prism.Events.EventSubscription`1.Action"/> delegate in a background thread.
            </summary>
            <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="M:Prism.Events.BackgroundEventSubscription`1.#ctor(Prism.Events.IDelegateReference,Prism.Events.IDelegateReference)">
            <summary>
            Creates a new instance of <see cref="T:Prism.Events.BackgroundEventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.</exception>
        </member>
        <member name="M:Prism.Events.BackgroundEventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> in an asynchronous thread by using a <see cref="T:System.Threading.ThreadPool"/>.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
        </member>
        <member name="T:Prism.Events.DataEventArgs`1">
            <summary>
            Generic arguments class to pass to event handlers that need to receive data.
            </summary>
            <typeparam name="TData">The type of data to pass.</typeparam>
        </member>
        <member name="M:Prism.Events.DataEventArgs`1.#ctor(`0)">
            <summary>
            Initializes the DataEventArgs class.
            </summary>
            <param name="value">Information related to the event.</param>
        </member>
        <member name="P:Prism.Events.DataEventArgs`1.Value">
            <summary>
            Gets the information related to the event.
            </summary>
            <value>Information related to the event.</value>
        </member>
        <member name="T:Prism.Events.DelegateReference">
            <summary>
            Represents a reference to a <see cref="T:System.Delegate"/> that may contain a
            <see cref="T:System.WeakReference"/> to the target. This class is used
            internally by the Prism Library.
            </summary>
        </member>
        <member name="M:Prism.Events.DelegateReference.#ctor(System.Delegate,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Events.DelegateReference"/>.
            </summary>
            <param name="delegate">The original <see cref="T:System.Delegate"/> to create a reference for.</param>
            <param name="keepReferenceAlive">If <see langword="false" /> the class will create a weak reference to the delegate, allowing it to be garbage collected. Otherwise it will keep a strong reference to the target.</param>
            <exception cref="T:System.ArgumentNullException">If the passed <paramref name="delegate"/> is not assignable to <see cref="T:System.Delegate"/>.</exception>
        </member>
        <member name="P:Prism.Events.DelegateReference.Target">
            <summary>
            Gets the <see cref="T:System.Delegate" /> (the target) referenced by the current <see cref="T:Prism.Events.DelegateReference"/> object.
            </summary>
            <value><see langword="null"/> if the object referenced by the current <see cref="T:Prism.Events.DelegateReference"/> object has been garbage collected; otherwise, a reference to the <see cref="T:System.Delegate"/> referenced by the current <see cref="T:Prism.Events.DelegateReference"/> object.</value>
        </member>
        <member name="M:Prism.Events.DelegateReference.TargetEquals(System.Delegate)">
            <summary>
            Checks if the <see cref="T:System.Delegate" /> (the target) referenced by the current <see cref="T:Prism.Events.DelegateReference"/> object are equal to another <see cref="T:System.Delegate" />.
            This is equivalent with comparing <see cref="P:Prism.Events.DelegateReference.Target"/> with <paramref name="delegate"/>, only more efficient.
            </summary>
            <param name="delegate">The other delegate to compare with.</param>
            <returns>True if the target referenced by the current object are equal to <paramref name="delegate"/>.</returns>
        </member>
        <member name="T:Prism.Events.DispatcherEventSubscription">
            <summary>
             Extends <see cref="T:Prism.Events.EventSubscription"/> to invoke the <see cref="P:Prism.Events.EventSubscription.Action"/> delegate
             in a specific <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
        </member>
        <member name="M:Prism.Events.DispatcherEventSubscription.#ctor(Prism.Events.IDelegateReference,System.Threading.SynchronizationContext)">
            <summary>
             Creates a new instance of <see cref="T:Prism.Events.BackgroundEventSubscription"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="context">The synchronization context to use for UI thread dispatching.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>.</exception>
        </member>
        <member name="M:Prism.Events.DispatcherEventSubscription.InvokeAction(System.Action)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> asynchronously in the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="T:Prism.Events.DispatcherEventSubscription`1">
            <summary>
             Extends <see cref="T:Prism.Events.EventSubscription`1"/> to invoke the <see cref="P:Prism.Events.EventSubscription`1.Action"/> delegate
             in a specific <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
             <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="M:Prism.Events.DispatcherEventSubscription`1.#ctor(Prism.Events.IDelegateReference,Prism.Events.IDelegateReference,System.Threading.SynchronizationContext)">
            <summary>
             Creates a new instance of <see cref="T:Prism.Events.BackgroundEventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <param name="context">The synchronization context to use for UI thread dispatching.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.</exception>
        </member>
        <member name="M:Prism.Events.DispatcherEventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> asynchronously in the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
        </member>
        <member name="T:Prism.Events.EventAggregator">
            <summary>
            Implements <see cref="T:Prism.Events.IEventAggregator"/>.
            </summary>
        </member>
        <member name="P:Prism.Events.EventAggregator.Current">
            <summary>
            Gets or Sets the Current Instance of the <see cref="T:Prism.Events.IEventAggregator"/>
            </summary>
        </member>
        <member name="M:Prism.Events.EventAggregator.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Prism.Events.EventAggregator"/>
            </summary>
        </member>
        <member name="M:Prism.Events.EventAggregator.GetEvent``1">
            <summary>
            Gets the single instance of the event managed by this EventAggregator. Multiple calls to this method with the same <typeparamref name="TEventType"/> returns the same event instance.
            </summary>
            <typeparam name="TEventType">The type of event to get. This must inherit from <see cref="T:Prism.Events.EventBase"/>.</typeparam>
            <returns>A singleton instance of an event object of type <typeparamref name="TEventType"/>.</returns>
        </member>
        <member name="T:Prism.Events.EventBase">
            <summary>
             Defines a base class to publish and subscribe to events.
            </summary>
        </member>
        <member name="P:Prism.Events.EventBase.SynchronizationContext">
            <summary>
            Allows the SynchronizationContext to be set by the EventAggregator for UI Thread Dispatching
            </summary>
        </member>
        <member name="P:Prism.Events.EventBase.Subscriptions">
            <summary>
            Gets the list of current subscriptions.
            </summary>
            <value>The current subscribers.</value>
        </member>
        <member name="M:Prism.Events.EventBase.InternalSubscribe(Prism.Events.IEventSubscription)">
            <summary>
            Adds the specified <see cref="T:Prism.Events.IEventSubscription"/> to the subscribers' collection.
            </summary>
            <param name="eventSubscription">The subscriber.</param>
            <returns>The <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies every subscriber.</returns>
            <remarks>
            Adds the subscription to the internal list and assigns it a new <see cref="T:Prism.Events.SubscriptionToken"/>.
            </remarks>
        </member>
        <member name="M:Prism.Events.EventBase.InternalPublish(System.Object[])">
            <summary>
            Calls all the execution strategies exposed by the list of <see cref="T:Prism.Events.IEventSubscription"/>.
            </summary>
            <param name="arguments">The arguments that will be passed to the listeners.</param>
            <remarks>Before executing the strategies, this class will prune all the subscribers from the
            list that return a <see langword="null" /> <see cref="T:System.Action`1"/> when calling the
            <see cref="M:Prism.Events.IEventSubscription.GetExecutionStrategy"/> method.</remarks>
        </member>
        <member name="M:Prism.Events.EventBase.Unsubscribe(Prism.Events.SubscriptionToken)">
            <summary>
            Removes the subscriber matching the <see cref="T:Prism.Events.SubscriptionToken"/>.
            </summary>
            <param name="token">The <see cref="T:Prism.Events.SubscriptionToken"/> returned by <see cref="T:Prism.Events.EventBase"/> while subscribing to the event.</param>
        </member>
        <member name="M:Prism.Events.EventBase.Contains(Prism.Events.SubscriptionToken)">
            <summary>
            Returns <see langword="true"/> if there is a subscriber matching <see cref="T:Prism.Events.SubscriptionToken"/>.
            </summary>
            <param name="token">The <see cref="T:Prism.Events.SubscriptionToken"/> returned by <see cref="T:Prism.Events.EventBase"/> while subscribing to the event.</param>
            <returns><see langword="true"/> if there is a <see cref="T:Prism.Events.SubscriptionToken"/> that matches; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Prism.Events.EventBase.Prune">
            <summary>
            Forces the PubSubEvent to remove any subscriptions that no longer have an execution strategy.
            </summary>
        </member>
        <member name="T:Prism.Events.EventSubscription">
            <summary>
            Provides a way to retrieve a <see cref="T:System.Delegate"/> to execute an action depending
            on the value of a second filter predicate that returns true if the action should execute.
            </summary>
        </member>
        <member name="M:Prism.Events.EventSubscription.#ctor(Prism.Events.IDelegateReference)">
            <summary>
             Creates a new instance of <see cref="T:Prism.Events.EventSubscription"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action"/>.</exception>
        </member>
        <member name="P:Prism.Events.EventSubscription.Action">
            <summary>
            Gets the target <see cref="T:System.Action"/> that is referenced by the <see cref="T:Prism.Events.IDelegateReference"/>.
            </summary>
            <value>An <see cref="T:System.Action"/> or <see langword="null" /> if the referenced target is not alive.</value>
        </member>
        <member name="P:Prism.Events.EventSubscription.SubscriptionToken">
            <summary>
            Gets or sets a <see cref="P:Prism.Events.EventSubscription.SubscriptionToken"/> that identifies this <see cref="T:Prism.Events.IEventSubscription"/>.
            </summary>
            <value>A token that identifies this <see cref="T:Prism.Events.IEventSubscription"/>.</value>
        </member>
        <member name="M:Prism.Events.EventSubscription.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>An <see cref="T:System.Action"/> with the execution strategy, or <see langword="null" /> if the <see cref="T:Prism.Events.IEventSubscription"/> is no longer valid.</returns>
            <remarks>
            If <see cref="P:Prism.Events.EventSubscription.Action"/>is no longer valid because it was
            garbage collected, this method will return <see langword="null" />.
            Otherwise it will return a delegate that evaluates the <see cref="P:Prism.Events.EventSubscription`1.Filter"/> and if it
            returns <see langword="true" /> will then call <see cref="M:Prism.Events.EventSubscription.InvokeAction(System.Action)"/>. The returned
            delegate holds a hard reference to the <see cref="P:Prism.Events.EventSubscription.Action"/> target
            <see cref="T:System.Delegate">delegates</see>. As long as the returned delegate is not garbage collected,
            the <see cref="P:Prism.Events.EventSubscription.Action"/> references delegates won't get collected either.
            </remarks>
        </member>
        <member name="M:Prism.Events.EventSubscription.InvokeAction(System.Action)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> synchronously when not overridden.
            </summary>
            <param name="action">The action to execute.</param>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="action"/> is null.</exception>
        </member>
        <member name="T:Prism.Events.EventSubscription`1">
            <summary>
            Provides a way to retrieve a <see cref="T:System.Delegate"/> to execute an action depending
            on the value of a second filter predicate that returns true if the action should execute.
            </summary>
            <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="M:Prism.Events.EventSubscription`1.#ctor(Prism.Events.IDelegateReference,Prism.Events.IDelegateReference)">
            <summary>
             Creates a new instance of <see cref="T:Prism.Events.EventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.</exception>
        </member>
        <member name="P:Prism.Events.EventSubscription`1.Action">
            <summary>
            Gets the target <see cref="T:System.Action`1"/> that is referenced by the <see cref="T:Prism.Events.IDelegateReference"/>.
            </summary>
            <value>An <see cref="T:System.Action`1"/> or <see langword="null" /> if the referenced target is not alive.</value>
        </member>
        <member name="P:Prism.Events.EventSubscription`1.Filter">
            <summary>
            Gets the target <see cref="T:System.Predicate`1"/> that is referenced by the <see cref="T:Prism.Events.IDelegateReference"/>.
            </summary>
            <value>An <see cref="T:System.Predicate`1"/> or <see langword="null" /> if the referenced target is not alive.</value>
        </member>
        <member name="P:Prism.Events.EventSubscription`1.SubscriptionToken">
            <summary>
            Gets or sets a <see cref="P:Prism.Events.EventSubscription`1.SubscriptionToken"/> that identifies this <see cref="T:Prism.Events.IEventSubscription"/>.
            </summary>
            <value>A token that identifies this <see cref="T:Prism.Events.IEventSubscription"/>.</value>
        </member>
        <member name="M:Prism.Events.EventSubscription`1.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>An <see cref="T:System.Action`1"/> with the execution strategy, or <see langword="null" /> if the <see cref="T:Prism.Events.IEventSubscription"/> is no longer valid.</returns>
            <remarks>
            If <see cref="P:Prism.Events.EventSubscription`1.Action"/> or <see cref="P:Prism.Events.EventSubscription`1.Filter"/> are no longer valid because they were
            garbage collected, this method will return <see langword="null" />.
            Otherwise it will return a delegate that evaluates the <see cref="P:Prism.Events.EventSubscription`1.Filter"/> and if it
            returns <see langword="true" /> will then call <see cref="M:Prism.Events.EventSubscription`1.InvokeAction(System.Action{`0},`0)"/>. The returned
            delegate holds hard references to the <see cref="P:Prism.Events.EventSubscription`1.Action"/> and <see cref="P:Prism.Events.EventSubscription`1.Filter"/> target
            <see cref="T:System.Delegate">delegates</see>. As long as the returned delegate is not garbage collected,
            the <see cref="P:Prism.Events.EventSubscription`1.Action"/> and <see cref="P:Prism.Events.EventSubscription`1.Filter"/> references delegates won't get collected either.
            </remarks>
        </member>
        <member name="M:Prism.Events.EventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> synchronously when not overridden.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="action"/> is null.</exception>
        </member>
        <member name="T:Prism.Events.IDelegateReference">
            <summary>
            Represents a reference to a <see cref="T:System.Delegate"/>.
            </summary>
        </member>
        <member name="P:Prism.Events.IDelegateReference.Target">
            <summary>
            Gets the referenced <see cref="T:System.Delegate" /> object.
            </summary>
            <value>A <see cref="T:System.Delegate"/> instance if the target is valid; otherwise <see langword="null"/>.</value>
        </member>
        <member name="T:Prism.Events.IEventAggregator">
            <summary>
            Defines an interface to get instances of an event type.
            </summary>
        </member>
        <member name="M:Prism.Events.IEventAggregator.GetEvent``1">
            <summary>
            Gets an instance of an event type.
            </summary>
            <typeparam name="TEventType">The type of event to get.</typeparam>
            <returns>An instance of an event object of type <typeparamref name="TEventType"/>.</returns>
        </member>
        <member name="T:Prism.Events.IEventSubscription">
            <summary>
             Defines a contract for an event subscription to be used by <see cref="T:Prism.Events.EventBase"/>.
            </summary>
        </member>
        <member name="P:Prism.Events.IEventSubscription.SubscriptionToken">
            <summary>
            Gets or sets a <see cref="P:Prism.Events.IEventSubscription.SubscriptionToken"/> that identifies this <see cref="T:Prism.Events.IEventSubscription"/>.
            </summary>
            <value>A token that identifies this <see cref="T:Prism.Events.IEventSubscription"/>.</value>
        </member>
        <member name="M:Prism.Events.IEventSubscription.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>An <see cref="T:System.Action`1"/> with the execution strategy, or <see langword="null" /> if the <see cref="T:Prism.Events.IEventSubscription"/> is no longer valid.</returns>
        </member>
        <member name="T:Prism.Events.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Prism.Events.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Prism.Events.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Prism.Events.Properties.Resources.EventAggregatorNotConstructedOnUIThread">
            <summary>
              Looks up a localized string similar to To use the UIThread option for subscribing, the EventAggregator must be constructed on the UI thread..
            </summary>
        </member>
        <member name="P:Prism.Events.Properties.Resources.InvalidDelegateRerefenceTypeException">
            <summary>
              Looks up a localized string similar to Invalid Delegate Reference Type Exception.
            </summary>
        </member>
        <member name="T:Prism.Events.PubSubEvent">
            <summary>
            Defines a class that manages publication and subscription to events.
            </summary>
        </member>
        <member name="M:Prism.Events.PubSubEvent.Subscribe(System.Action)">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="F:Prism.Events.ThreadOption.PublisherThread"/>.
            <see cref="T:Prism.Events.PubSubEvent"/> will maintain a <see cref="T:System.WeakReference"/> to the target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            The PubSubEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent.Subscribe(System.Action,Prism.Events.ThreadOption)">
            <summary>
            Subscribes a delegate to an event.
            PubSubEvent will maintain a <see cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is raised.</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            The PubSubEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent.Subscribe(System.Action,System.Boolean)">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="F:Prism.Events.ThreadOption.PublisherThread"/>.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <see cref="T:Prism.Events.PubSubEvent"/> keeps a reference to the subscriber so it does not get garbage collected.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false" />, <see cref="T:Prism.Events.PubSubEvent"/> will maintain a <see cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true" />), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behavior.
            <para/>
            The PubSubEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent.Subscribe(System.Action,Prism.Events.ThreadOption,System.Boolean)">
            <summary>
            Subscribes a delegate to an event.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <see cref="T:Prism.Events.PubSubEvent"/> keeps a reference to the subscriber so it does not get garbage collected.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false" />, <see cref="T:Prism.Events.PubSubEvent"/> will maintain a <see cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true" />), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behavior.
            <para/>
            The PubSubEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent.Publish">
            <summary>
            Publishes the <see cref="T:Prism.Events.PubSubEvent"/>.
            </summary>
        </member>
        <member name="M:Prism.Events.PubSubEvent.Unsubscribe(System.Action)">
            <summary>
            Removes the first subscriber matching <see cref="T:System.Action"/> from the subscribers' list.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action"/> used when subscribing to the event.</param>
        </member>
        <member name="M:Prism.Events.PubSubEvent.Contains(System.Action)">
            <summary>
            Returns <see langword="true"/> if there is a subscriber matching <see cref="T:System.Action"/>.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action"/> used when subscribing to the event.</param>
            <returns><see langword="true"/> if there is an <see cref="T:System.Action"/> that matches; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Prism.Events.PubSubEvent`1">
            <summary>
            Defines a class that manages publication and subscription to events.
            </summary>
            <typeparam name="TPayload">The type of message that will be passed to the subscribers.</typeparam>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0})">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="F:Prism.Events.ThreadOption.PublisherThread"/>.
            <see cref="T:Prism.Events.PubSubEvent`1"/> will maintain a <see cref="T:System.WeakReference"/> to the target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            The PubSubEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0},System.Predicate{`0})">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="F:Prism.Events.ThreadOption.PublisherThread"/>
            </summary>
            <param name="action">The delegate that gets executed when the event is raised.</param>
            <param name="filter">Filter to evaluate if the subscriber should receive the event.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0},Prism.Events.ThreadOption)">
            <summary>
            Subscribes a delegate to an event.
            PubSubEvent will maintain a <see cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is raised.</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            The PubSubEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0},System.Boolean)">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="F:Prism.Events.ThreadOption.PublisherThread"/>.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <see cref="T:Prism.Events.PubSubEvent`1"/> keeps a reference to the subscriber so it does not get garbage collected.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false" />, <see cref="T:Prism.Events.PubSubEvent`1"/> will maintain a <see cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true" />), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behavior.
            <para/>
            The PubSubEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0},Prism.Events.ThreadOption,System.Boolean)">
            <summary>
            Subscribes a delegate to an event.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <see cref="T:Prism.Events.PubSubEvent`1"/> keeps a reference to the subscriber so it does not get garbage collected.</param>
            <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false" />, <see cref="T:Prism.Events.PubSubEvent`1"/> will maintain a <see cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true" />), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behavior.
            <para/>
            The PubSubEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0},Prism.Events.ThreadOption,System.Boolean,System.Predicate{`0})">
             <summary>
             Subscribes a delegate to an event.
             </summary>
             <param name="action">The delegate that gets executed when the event is published.</param>
             <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
             <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <see cref="T:Prism.Events.PubSubEvent`1"/> keeps a reference to the subscriber so it does not get garbage collected.</param>
             <param name="filter">Filter to evaluate if the subscriber should receive the event.</param>
             <returns>A <see cref="T:Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
             <remarks>
             If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false" />, <see cref="T:Prism.Events.PubSubEvent`1"/> will maintain a <see cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
             If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true" />), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behavior.
            
             The PubSubEvent collection is thread-safe.
             </remarks>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Publish(`0)">
            <summary>
            Publishes the <see cref="T:Prism.Events.PubSubEvent`1"/>.
            </summary>
            <param name="payload">Message to pass to the subscribers.</param>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Unsubscribe(System.Action{`0})">
            <summary>
            Removes the first subscriber matching <see cref="T:System.Action`1"/> from the subscribers' list.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action`1"/> used when subscribing to the event.</param>
        </member>
        <member name="M:Prism.Events.PubSubEvent`1.Contains(System.Action{`0})">
            <summary>
            Returns <see langword="true"/> if there is a subscriber matching <see cref="T:System.Action`1"/>.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action`1"/> used when subscribing to the event.</param>
            <returns><see langword="true"/> if there is an <see cref="T:System.Action`1"/> that matches; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Prism.Events.SubscriptionToken">
            <summary>
            Subscription token returned from <see cref="T:Prism.Events.EventBase"/> on subscribe.
            </summary>
        </member>
        <member name="M:Prism.Events.SubscriptionToken.#ctor(System.Action{Prism.Events.SubscriptionToken})">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Events.SubscriptionToken"/>.
            </summary>
        </member>
        <member name="M:Prism.Events.SubscriptionToken.Equals(Prism.Events.SubscriptionToken)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Prism.Events.SubscriptionToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Prism.Events.SubscriptionToken.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Prism.Events.SubscriptionToken.Dispose">
            <summary>
            Disposes the SubscriptionToken, removing the subscription from the corresponding <see cref="T:Prism.Events.EventBase"/>.
            </summary>
        </member>
        <member name="T:Prism.Events.ThreadOption">
            <summary>
            Specifies on which thread a <see cref="T:Prism.Events.PubSubEvent`1"/> subscriber will be called.
            </summary>
        </member>
        <member name="F:Prism.Events.ThreadOption.PublisherThread">
            <summary>
            The call is done on the same thread on which the <see cref="T:Prism.Events.PubSubEvent`1"/> was published.
            </summary>
        </member>
        <member name="F:Prism.Events.ThreadOption.UIThread">
            <summary>
            The call is done on the UI thread.
            </summary>
        </member>
        <member name="F:Prism.Events.ThreadOption.BackgroundThread">
            <summary>
            The call is done asynchronously on a background thread.
            </summary>
        </member>
        <member name="T:Prism.Events.WeakDelegatesManager">
            <summary>
            Manage delegates using weak references to prevent keeping target instances longer than expected.
            </summary>
        </member>
        <member name="M:Prism.Events.WeakDelegatesManager.AddListener(System.Delegate)">
            <summary>
            Adds a weak reference to the specified <see cref="T:System.Delegate"/> listener.
            </summary>
            <param name="listener">The original <see cref="T:System.Delegate"/> to add.</param>
        </member>
        <member name="M:Prism.Events.WeakDelegatesManager.RemoveListener(System.Delegate)">
            <summary>
            Removes the weak reference to the specified <see cref="T:System.Delegate"/> listener.
            </summary>
            <param name="listener">The original <see cref="T:System.Delegate"/> to remove.</param>
        </member>
        <member name="M:Prism.Events.WeakDelegatesManager.Raise(System.Object[])">
            <summary>
            Invoke the delegates for all targets still being alive.
            </summary>
            <param name="args">An array of objects that are the arguments to pass to the delegates. -or- null, if the method represented by the delegate does not require arguments. </param>
        </member>
    </members>
</doc>
