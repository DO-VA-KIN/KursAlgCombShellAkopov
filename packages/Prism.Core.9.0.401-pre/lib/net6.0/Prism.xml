<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Prism</name>
    </assembly>
    <members>
        <member name="T:Prism.Commands.AsyncDelegateCommand">
            <summary>
            Provides an implementation of the <see cref="T:Prism.Commands.IAsyncCommand"/>
            </summary>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand.#ctor(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Creates a new instance of <see cref="T:Prism.Commands.AsyncDelegateCommand"/> with the <see cref="T:System.Func`1"/> to invoke on execution.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Func`1"/> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is called.</param>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Creates a new instance of <see cref="T:Prism.Commands.AsyncDelegateCommand"/> with the <see cref="T:System.Func`1"/> to invoke on execution.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Func`2"/> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is called.</param>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean})">
            <summary>
            Creates a new instance of <see cref="T:Prism.Commands.DelegateCommand"/> with the <see cref="T:System.Func`1"/> to invoke on execution
            and a <see langword="Func" /> to query for determining if the command can execute.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Func`1"/> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is called.</param>
            <param name="canExecuteMethod">The delegate to invoke when <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> is called</param>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Boolean})">
            <summary>
            Creates a new instance of <see cref="T:Prism.Commands.DelegateCommand"/> with the <see cref="T:System.Func`1"/> to invoke on execution
            and a <see langword="Func" /> to query for determining if the command can execute.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Func`2"/> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is called.</param>
            <param name="canExecuteMethod">The delegate to invoke when <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> is called</param>
        </member>
        <member name="P:Prism.Commands.AsyncDelegateCommand.IsExecuting">
            <summary>
            Gets the current state of the AsyncDelegateCommand
            </summary>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand.Execute(System.Nullable{System.Threading.CancellationToken})">
            <summary>
             Executes the command.
            </summary>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand.CanExecute">
            <summary>
            Determines if the command can be executed.
            </summary>
            <returns>Returns <see langword="true"/> if the command can execute,otherwise returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand.Execute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>
            </summary>
            <param name="parameter">Command Parameter</param>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand.CanExecute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>
            </summary>
            <param name="parameter"></param>
            <returns><see langword="true"/> if the Command Can Execute, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand.EnableParallelExecution">
            <summary>
            Enables Parallel Execution of Async Tasks
            </summary>
            <returns>The current instance of <see cref="T:Prism.Commands.AsyncDelegateCommand"/>.</returns>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand.CancelAfter(System.TimeSpan)">
            <summary>
            Sets the <see cref="M:Prism.Commands.AsyncDelegateCommand.CancellationTokenSourceFactory(System.Func{System.Threading.CancellationToken})"/> based on the specified timeout.
            </summary>
            <param name="timeout">A specified timeout.</param>
            <returns>The current instance of <see cref="T:Prism.Commands.AsyncDelegateCommand`1"/>.</returns>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand.CancellationTokenSourceFactory(System.Func{System.Threading.CancellationToken})">
            <summary>
            Provides a delegate callback to provide a default CancellationToken when the Command is invoked.
            </summary>
            <param name="factory">The default <see cref="T:System.Threading.CancellationToken"/> Factory.</param>
            <returns>The current instance of <see cref="T:Prism.Commands.AsyncDelegateCommand"/>.</returns>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Observes a property that implements INotifyPropertyChanged, and automatically calls DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <typeparam name="T">The object type containing the property specified in the expression.</typeparam>
            <param name="propertyExpression">The property expression. Example: ObservesProperty(() => PropertyName).</param>
            <returns>The current instance of <see cref="T:Prism.Commands.AsyncDelegateCommand"/>.</returns>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
            Observes a property that is used to determine if this command can execute, and if it implements INotifyPropertyChanged it will automatically call DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <param name="canExecuteExpression">The property expression. Example: ObservesCanExecute(() => PropertyName).</param>
            <returns>The current instance of <see cref="T:Prism.Commands.AsyncDelegateCommand"/>.</returns>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand.Catch``1(System.Action{``0})">
            <summary>
            Provides the ability to connect a delegate to catch exceptions encountered by CanExecute or the Execute methods of the DelegateCommand
            </summary>
            <param name="catch">TThe callback when a specific exception is encountered</param>
            <returns>The current instance of <see cref="T:Prism.Commands.AsyncDelegateCommand"/>.</returns>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand.Catch(System.Action{System.Exception})">
            <summary>
            Provides the ability to connect a delegate to catch exceptions encountered by CanExecute or the Execute methods of the DelegateCommand
            </summary>
            <param name="catch">The generic / default callback when an exception is encountered</param>
            <returns>The current instance of <see cref="T:Prism.Commands.AsyncDelegateCommand"/>.</returns>
        </member>
        <member name="T:Prism.Commands.AsyncDelegateCommand`1">
            <summary>
            Provides an implementation of the <see cref="T:Prism.Commands.IAsyncCommand"/> with a generic parameter type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Creates a new instance of <see cref="T:Prism.Commands.AsyncDelegateCommand`1"/> with the <see cref="T:System.Func`1"/> to invoke on execution.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Func`2"/> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is called.</param>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Creates a new instance of <see cref="T:Prism.Commands.AsyncDelegateCommand`1"/> with the <see cref="T:System.Func`1"/> to invoke on execution.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Func`3"/> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is called.</param>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Boolean})">
            <summary>
            Creates a new instance of <see cref="T:Prism.Commands.DelegateCommand"/> with the <see cref="T:System.Func`1"/> to invoke on execution
            and a <see langword="Func" /> to query for determining if the command can execute.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Func`2"/> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is called.</param>
            <param name="canExecuteMethod">The delegate to invoke when <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> is called</param>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{`0,System.Boolean})">
            <summary>
            Creates a new instance of <see cref="T:Prism.Commands.DelegateCommand"/> with the <see cref="T:System.Func`1"/> to invoke on execution
            and a <see langword="Func" /> to query for determining if the command can execute.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Func`3"/> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is called.</param>
            <param name="canExecuteMethod">The delegate to invoke when <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> is called</param>
        </member>
        <member name="P:Prism.Commands.AsyncDelegateCommand`1.IsExecuting">
            <summary>
            Gets the current state of the AsyncDelegateCommand
            </summary>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand`1.Execute(`0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
             Executes the command.
            </summary>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand`1.CanExecute(`0)">
            <summary>
            Determines if the command can be executed.
            </summary>
            <returns>Returns <see langword="true"/> if the command can execute,otherwise returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand`1.Execute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>
            </summary>
            <param name="parameter">Command Parameter</param>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand`1.CanExecute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>
            </summary>
            <param name="parameter"></param>
            <returns><see langword="true"/> if the Command Can Execute, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand`1.EnableParallelExecution">
            <summary>
            Enables Parallel Execution of Async Tasks
            </summary>
            <returns>The current instance of <see cref="T:Prism.Commands.AsyncDelegateCommand`1"/>.</returns>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand`1.CancelAfter(System.TimeSpan)">
            <summary>
            Sets the <see cref="M:Prism.Commands.AsyncDelegateCommand`1.CancellationTokenSourceFactory(System.Func{System.Threading.CancellationToken})"/> based on the specified timeout.
            </summary>
            <param name="timeout">A specified timeout.</param>
            <returns>The current instance of <see cref="T:Prism.Commands.AsyncDelegateCommand`1"/>.</returns>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand`1.CancellationTokenSourceFactory(System.Func{System.Threading.CancellationToken})">
            <summary>
            Provides a delegate callback to provide a default CancellationToken when the Command is invoked.
            </summary>
            <param name="factory">The default <see cref="T:System.Threading.CancellationToken"/> Factory.</param>
            <returns>The current instance of <see cref="T:Prism.Commands.AsyncDelegateCommand`1"/>.</returns>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand`1.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Observes a property that implements INotifyPropertyChanged, and automatically calls DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <typeparam name="TType">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="propertyExpression">The property expression. Example: ObservesProperty(() => PropertyName).</param>
            <returns>The current instance of <see cref="T:Prism.Commands.AsyncDelegateCommand`1"/>.</returns>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand`1.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
            Observes a property that is used to determine if this command can execute, and if it implements INotifyPropertyChanged it will automatically call DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <param name="canExecuteExpression">The property expression. Example: ObservesCanExecute(() => PropertyName).</param>
            <returns>The current instance of <see cref="T:Prism.Commands.AsyncDelegateCommand`1"/>.</returns>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand`1.Catch``1(System.Action{``0})">
            <summary>
            Provides the ability to connect a delegate to catch exceptions encountered by CanExecute or the Execute methods of the DelegateCommand
            </summary>
            <param name="catch">TThe callback when a specific exception is encountered</param>
            <returns>The current instance of <see cref="T:Prism.Commands.AsyncDelegateCommand`1"/>.</returns>
        </member>
        <member name="M:Prism.Commands.AsyncDelegateCommand`1.Catch(System.Action{System.Exception})">
            <summary>
            Provides the ability to connect a delegate to catch exceptions encountered by CanExecute or the Execute methods of the DelegateCommand
            </summary>
            <param name="catch">The generic / default callback when an exception is encountered</param>
            <returns>The current instance of <see cref="T:Prism.Commands.AsyncDelegateCommand`1"/>.</returns>
        </member>
        <member name="T:Prism.Commands.CompositeCommand">
            <summary>
            The CompositeCommand composes one or more ICommands.
            </summary>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Commands.CompositeCommand"/>.
            </summary>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Commands.CompositeCommand"/>.
            </summary>
            <param name="monitorCommandActivity">Indicates when the command activity is going to be monitored.</param>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.RegisterCommand(System.Windows.Input.ICommand)">
            <summary>
            Adds a command to the collection and signs up for the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event of it.
            </summary>
             <remarks>
            If this command is set to monitor command activity, and <paramref name="command"/> 
            implements the <see cref="T:Prism.IActiveAware"/> interface, this method will subscribe to its
            <see cref="E:Prism.IActiveAware.IsActiveChanged"/> event.
            </remarks>
            <param name="command">The command to register.</param>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.UnregisterCommand(System.Windows.Input.ICommand)">
            <summary>
            Removes a command from the collection and removes itself from the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event of it.
            </summary>
            <param name="command">The command to unregister.</param>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.CanExecute(System.Object)">
            <summary>
            Forwards <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> to the registered commands and returns
            <see langword="true" /> if all of the commands return <see langword="true" />.
            </summary>
            <param name="parameter">Data used by the command.
            If the command does not require data to be passed, this object can be set to <see langword="null" />.
            </param>
            <returns><see langword="true" /> if all of the commands return <see langword="true" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="E:Prism.Commands.CompositeCommand.CanExecuteChanged">
            <summary>
            Occurs when any of the registered commands raise <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/>.
            </summary>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.Execute(System.Object)">
            <summary>
            Forwards <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> to the registered commands.
            </summary>
            <param name="parameter">Data used by the command.
            If the command does not require data to be passed, this object can be set to <see langword="null" />.
            </param>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.ShouldExecute(System.Windows.Input.ICommand)">
            <summary>
            Evaluates if a command should execute.
            </summary>
            <param name="command">The command to evaluate.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating whether the command should be used 
            when evaluating <see cref="M:Prism.Commands.CompositeCommand.CanExecute(System.Object)"/> and <see cref="M:Prism.Commands.CompositeCommand.Execute(System.Object)"/>.</returns>
            <remarks>
            If this command is set to monitor command activity, and <paramref name="command"/>
            implements the <see cref="T:Prism.IActiveAware"/> interface, 
            this method will return <see langword="false" /> if the command's <see cref="P:Prism.IActiveAware.IsActive"/> 
            property is <see langword="false" />; otherwise it always returns <see langword="true" />.</remarks>
        </member>
        <member name="P:Prism.Commands.CompositeCommand.RegisteredCommands">
            <summary>
            Gets the list of all the registered commands.
            </summary>
            <value>A list of registered commands.</value>
            <remarks>This returns a copy of the commands subscribed to the CompositeCommand.</remarks>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.OnCanExecuteChanged">
            <summary>
            Raises <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> on the UI thread so every 
            command invoker can requery <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> to check if the
            <see cref="T:Prism.Commands.CompositeCommand"/> can execute.
            </summary>
        </member>
        <member name="M:Prism.Commands.CompositeCommand.Command_IsActiveChanged(System.Object,System.EventArgs)">
            <summary>
            Handler for IsActiveChanged events of registered commands.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">EventArgs to pass to the event.</param>
        </member>
        <member name="T:Prism.Commands.DelegateCommand">
            <summary>
            An <see cref="T:System.Windows.Input.ICommand"/> whose delegates do not take any parameters for <see cref="M:Prism.Commands.DelegateCommand.Execute"/> and <see cref="M:Prism.Commands.DelegateCommand.CanExecute"/>.
            </summary>
            <see cref="T:Prism.Commands.DelegateCommandBase"/>
            <see cref="T:Prism.Commands.DelegateCommand`1"/>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.#ctor(System.Action)">
            <summary>
            Creates a new instance of <see cref="T:Prism.Commands.DelegateCommand"/> with the <see cref="T:System.Action"/> to invoke on execution.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Action"/> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is called.</param>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Creates a new instance of <see cref="T:Prism.Commands.DelegateCommand"/> with the <see cref="T:System.Action"/> to invoke on execution
            and a <see langword="Func" /> to query for determining if the command can execute.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Action"/> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is called.</param>
            <param name="canExecuteMethod">The <see cref="T:System.Func`1"/> to invoke when <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> is called</param>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.Execute">
            <summary>
             Executes the command.
            </summary>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.CanExecute">
            <summary>
            Determines if the command can be executed.
            </summary>
            <returns>Returns <see langword="true"/> if the command can execute,otherwise returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.Execute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>
            </summary>
            <param name="parameter">Command Parameter</param>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>
            </summary>
            <param name="parameter"></param>
            <returns><see langword="true"/> if the Command Can Execute, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Observes a property that implements INotifyPropertyChanged, and automatically calls DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <typeparam name="T">The object type containing the property specified in the expression.</typeparam>
            <param name="propertyExpression">The property expression. Example: ObservesProperty(() => PropertyName).</param>
            <returns>The current instance of DelegateCommand</returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
            Observes a property that is used to determine if this command can execute, and if it implements INotifyPropertyChanged it will automatically call DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <param name="canExecuteExpression">The property expression. Example: ObservesCanExecute(() => PropertyName).</param>
            <returns>The current instance of DelegateCommand</returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.Catch(System.Action{System.Exception})">
            <summary>
            Registers an callback if an exception is encountered while executing the <see cref="T:Prism.Commands.DelegateCommand"/>
            </summary>
            <param name="catch">The Callback</param>
            <returns>The current instance of <see cref="T:Prism.Commands.DelegateCommand"/></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.Catch(System.Action{System.Exception,System.Object})">
            <summary>
            Registers an callback if an exception is encountered while executing the <see cref="T:Prism.Commands.DelegateCommand"/>
            </summary>
            <param name="catch">The Callback</param>
            <returns>The current instance of <see cref="T:Prism.Commands.DelegateCommand"/></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.Catch``1(System.Action{``0})">
            <summary>
            Registers an callback if an exception is encountered while executing the <see cref="T:Prism.Commands.DelegateCommand"/>
            </summary>
            <typeparam name="TException">The Exception Type</typeparam>
            <param name="catch">The Callback</param>
            <returns>The current instance of <see cref="T:Prism.Commands.DelegateCommand"/></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.Catch``1(System.Action{``0,System.Object})">
            <summary>
            Registers an callback if an exception is encountered while executing the <see cref="T:Prism.Commands.DelegateCommand"/>
            </summary>
            <typeparam name="TException">The Exception Type</typeparam>
            <param name="catch">The Callback</param>
            <returns>The current instance of <see cref="T:Prism.Commands.DelegateCommand"/></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.Catch(System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
            Registers an async callback if an exception is encountered while executing the <see cref="T:Prism.Commands.DelegateCommand"/>
            </summary>
            <param name="catch">The Callback</param>
            <returns>The current instance of <see cref="T:Prism.Commands.DelegateCommand"/></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.Catch(System.Func{System.Exception,System.Object,System.Threading.Tasks.Task})">
            <summary>
            Registers an async callback if an exception is encountered while executing the <see cref="T:Prism.Commands.DelegateCommand"/>
            </summary>
            <param name="catch">The Callback</param>
            <returns>The current instance of <see cref="T:Prism.Commands.DelegateCommand"/></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.Catch``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Registers an async callback if an exception is encountered while executing the <see cref="T:Prism.Commands.DelegateCommand"/>
            </summary>
            <typeparam name="TException">The Exception Type</typeparam>
            <param name="catch">The Callback</param>
            <returns>The current instance of <see cref="T:Prism.Commands.DelegateCommand"/></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand.Catch``1(System.Func{``0,System.Object,System.Threading.Tasks.Task})">
            <summary>
            Registers an async callback if an exception is encountered while executing the <see cref="T:Prism.Commands.DelegateCommand"/>
            </summary>
            <typeparam name="TException">The Exception Type</typeparam>
            <param name="catch">The Callback</param>
            <returns>The current instance of <see cref="T:Prism.Commands.DelegateCommand"/></returns>
        </member>
        <member name="T:Prism.Commands.DelegateCommandBase">
            <summary>
            An <see cref="T:System.Windows.Input.ICommand"/> whose delegates can be attached for <see cref="M:Prism.Commands.DelegateCommandBase.Execute(System.Object)"/> and <see cref="M:Prism.Commands.DelegateCommandBase.CanExecute(System.Object)"/>.
            </summary>
        </member>
        <member name="F:Prism.Commands.DelegateCommandBase.ExceptionHandler">
            <summary>
            Provides an Exception Handler to register callbacks or handle encountered exceptions within 
            </summary>
        </member>
        <member name="M:Prism.Commands.DelegateCommandBase.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Prism.Commands.DelegateCommandBase"/>, specifying both the execute action and the can execute function.
            </summary>
        </member>
        <member name="E:Prism.Commands.DelegateCommandBase.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:Prism.Commands.DelegateCommandBase.OnCanExecuteChanged">
            <summary>
            Raises <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> so every 
            command invoker can re-query <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>.
            </summary>
        </member>
        <member name="M:Prism.Commands.DelegateCommandBase.RaiseCanExecuteChanged">
            <summary>
            Raises <see cref="E:Prism.Commands.DelegateCommandBase.CanExecuteChanged"/> so every command invoker
            can re-query to check if the command can execute.
            </summary>
            <remarks>Note that this will trigger the execution of <see cref="E:Prism.Commands.DelegateCommandBase.CanExecuteChanged"/> once for each invoker.</remarks>
        </member>
        <member name="M:Prism.Commands.DelegateCommandBase.Execute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>
            </summary>
            <param name="parameter">Command Parameter</param>
        </member>
        <member name="M:Prism.Commands.DelegateCommandBase.CanExecute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>
            </summary>
            <param name="parameter"></param>
            <returns><see langword="true"/> if the Command Can Execute, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommandBase.ObservesPropertyInternal``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Observes a property that implements INotifyPropertyChanged, and automatically calls DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <typeparam name="T">The object type containing the property specified in the expression.</typeparam>
            <param name="propertyExpression">The property expression. Example: ObservesProperty(() => PropertyName).</param>
        </member>
        <member name="P:Prism.Commands.DelegateCommandBase.IsActive">
            <summary>
            Gets or sets a value indicating whether the object is active.
            </summary>
            <value><see langword="true" /> if the object is active; otherwise <see langword="false" />.</value>
        </member>
        <member name="E:Prism.Commands.DelegateCommandBase.IsActiveChanged">
            <summary>
            Fired if the <see cref="P:Prism.Commands.DelegateCommandBase.IsActive"/> property changes.
            </summary>
        </member>
        <member name="M:Prism.Commands.DelegateCommandBase.OnIsActiveChanged">
            <summary>
            This raises the <see cref="E:Prism.Commands.DelegateCommandBase.IsActiveChanged"/> event.
            </summary>
        </member>
        <member name="T:Prism.Commands.DelegateCommand`1">
            <summary>
            An <see cref="T:System.Windows.Input.ICommand"/> whose delegates can be attached for <see cref="M:Prism.Commands.DelegateCommand`1.Execute(`0)"/> and <see cref="M:Prism.Commands.DelegateCommand`1.CanExecute(`0)"/>.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <remarks>
            The constructor deliberately prevents the use of value types.
            Because ICommand takes an object, having a value type for T would cause unexpected behavior when CanExecute(null) is called during XAML initialization for command bindings.
            Using default(T) was considered and rejected as a solution because the implementor would not be able to distinguish between a valid and defaulted values.
            <para/>
            Instead, callers should support a value type by using a nullable value type and checking the HasValue property before using the Value property.
            <example>
                <code>
            public MyClass()
            {
                this.submitCommand = new DelegateCommand&lt;int?&gt;(this.Submit, this.CanSubmit);
            }
            
            private bool CanSubmit(int? customerId)
            {
                return (customerId.HasValue &amp;&amp; customers.Contains(customerId.Value));
            }
                </code>
            </example>
            </remarks>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Commands.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command. This can be null to just hook up a CanExecute delegate.</param>
            <remarks><see cref="M:Prism.Commands.DelegateCommand`1.CanExecute(`0)"/> will always return true.</remarks>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Commands.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command. This can be null to just hook up a CanExecute delegate.</param>
            <param name="canExecuteMethod">Delegate to execute when CanExecute is called on the command. This can be null.</param>
            <exception cref="T:System.ArgumentNullException">When both <paramref name="executeMethod"/> and <paramref name="canExecuteMethod"/> are <see langword="null" />.</exception>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.Execute(`0)">
            <summary>
            Executes the command and invokes the <see cref="T:System.Action`1"/> provided during construction.
            </summary>
            <param name="parameter">Data used by the command.</param>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.CanExecute(`0)">
            <summary>
            Determines if the command can execute by invoked the <see cref="T:System.Func`2"/> provided during construction.
            </summary>
            <param name="parameter">Data used by the command to determine if it can execute.</param>
            <returns>
            <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.Execute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>
            </summary>
            <param name="parameter">Command Parameter</param>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.CanExecute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>
            </summary>
            <param name="parameter"></param>
            <returns><see langword="true"/> if the Command Can Execute, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Observes a property that implements INotifyPropertyChanged, and automatically calls DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <typeparam name="TType">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="propertyExpression">The property expression. Example: ObservesProperty(() => PropertyName).</param>
            <returns>The current instance of DelegateCommand</returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
            Observes a property that is used to determine if this command can execute, and if it implements INotifyPropertyChanged it will automatically call DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <param name="canExecuteExpression">The property expression. Example: ObservesCanExecute(() => PropertyName).</param>
            <returns>The current instance of DelegateCommand</returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.Catch(System.Action{System.Exception})">
            <summary>
            Registers an callback if an exception is encountered while executing the <see cref="T:Prism.Commands.DelegateCommand"/>
            </summary>
            <param name="catch">The Callback</param>
            <returns>The current instance of <see cref="T:Prism.Commands.DelegateCommand"/></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.Catch(System.Action{System.Exception,System.Object})">
            <summary>
            Registers an callback if an exception is encountered while executing the <see cref="T:Prism.Commands.DelegateCommand"/>
            </summary>
            <param name="catch">The Callback</param>
            <returns>The current instance of <see cref="T:Prism.Commands.DelegateCommand"/></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.Catch``1(System.Action{``0})">
            <summary>
            Registers an callback if an exception is encountered while executing the <see cref="T:Prism.Commands.DelegateCommand"/>
            </summary>
            <typeparam name="TException">The Exception Type</typeparam>
            <param name="catch">The Callback</param>
            <returns>The current instance of <see cref="T:Prism.Commands.DelegateCommand"/></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.Catch``1(System.Action{``0,System.Object})">
            <summary>
            Registers an callback if an exception is encountered while executing the <see cref="T:Prism.Commands.DelegateCommand"/>
            </summary>
            <typeparam name="TException">The Exception Type</typeparam>
            <param name="catch">The Callback</param>
            <returns>The current instance of <see cref="T:Prism.Commands.DelegateCommand"/></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.Catch(System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
            Registers an async callback if an exception is encountered while executing the <see cref="T:Prism.Commands.DelegateCommand"/>
            </summary>
            <param name="catch">The Callback</param>
            <returns>The current instance of <see cref="T:Prism.Commands.DelegateCommand"/></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.Catch(System.Func{System.Exception,System.Object,System.Threading.Tasks.Task})">
            <summary>
            Registers an async callback if an exception is encountered while executing the <see cref="T:Prism.Commands.DelegateCommand"/>
            </summary>
            <param name="catch">The Callback</param>
            <returns>The current instance of <see cref="T:Prism.Commands.DelegateCommand"/></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.Catch``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Registers an async callback if an exception is encountered while executing the <see cref="T:Prism.Commands.DelegateCommand"/>
            </summary>
            <typeparam name="TException">The Exception Type</typeparam>
            <param name="catch">The Callback</param>
            <returns>The current instance of <see cref="T:Prism.Commands.DelegateCommand"/></returns>
        </member>
        <member name="M:Prism.Commands.DelegateCommand`1.Catch``1(System.Func{``0,System.Object,System.Threading.Tasks.Task})">
            <summary>
            Registers an async callback if an exception is encountered while executing the <see cref="T:Prism.Commands.DelegateCommand"/>
            </summary>
            <typeparam name="TException">The Exception Type</typeparam>
            <param name="catch">The Callback</param>
            <returns>The current instance of <see cref="T:Prism.Commands.DelegateCommand"/></returns>
        </member>
        <member name="T:Prism.Commands.IAsyncCommand">
            <summary>
            Provides an abstraction layer for custom controls which want to make use of Async Commands
            </summary>
        </member>
        <member name="M:Prism.Commands.IAsyncCommand.ExecuteAsync(System.Object)">
            <summary>
            Executes the Command with a specified parameter and the Default <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="parameter">The Command Parameter</param>
            <returns>An Asynchronous Task</returns>
        </member>
        <member name="M:Prism.Commands.IAsyncCommand.ExecuteAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes the Command with a specified parameter and using a <see cref="T:System.Threading.CancellationToken"/>
            </summary>
            <param name="parameter">The Command Parameter</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>An Asynchronous Task</returns>
        </member>
        <member name="T:Prism.Commands.PropertyObserver">
            <summary>
            Provide a way to observe property changes of INotifyPropertyChanged objects and invokes a 
            custom action when the PropertyChanged event is fired.
            </summary>
        </member>
        <member name="M:Prism.Commands.PropertyObserver.Observes``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action)">
            <summary>
            Observes a property that implements INotifyPropertyChanged, and automatically calls a custom action on 
            property changed notifications. The given expression must be in this form: "() => Prop.NestedProp.PropToObserve".
            </summary>
            <param name="propertyExpression">Expression representing property to be observed. Ex.: "() => Prop.NestedProp.PropToObserve".</param>
            <param name="action">Action to be invoked when PropertyChanged event occurs.</param>
        </member>
        <member name="T:Prism.Commands.PropertyObserverNode">
            <summary>
            Represents each node of nested properties expression and takes care of 
            subscribing/unsubscribing INotifyPropertyChanged.PropertyChanged listeners on it.
            </summary>
        </member>
        <member name="T:Prism.Common.IParameters">
            <summary>
            Defines a contract for specifying values associated with a unique key.
            </summary>
        </member>
        <member name="M:Prism.Common.IParameters.Add(System.String,System.Object)">
            <summary>
            Adds the specified key and value to the parameter collection.
            </summary>
            <param name="key">The key of the parameter to add.</param>
            <param name="value">The value of the parameter to add.</param>
        </member>
        <member name="M:Prism.Common.IParameters.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:Prism.Common.IParameters"/> contains the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to search the parameters for existence.</param>
            <returns>true if the <see cref="T:Prism.Common.IParameters"/> contains a parameter with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:Prism.Common.IParameters.Count">
            <summary>
            Gets the number of parameters contained in the <see cref="T:Prism.Common.IParameters"/>.
            </summary>
        </member>
        <member name="P:Prism.Common.IParameters.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Prism.Common.IParameters"/>.
            </summary>
        </member>
        <member name="M:Prism.Common.IParameters.GetValue``1(System.String)">
            <summary>
            Gets the parameter associated with the specified <paramref name="key"/>.
            </summary>
            <typeparam name="T">The type of the parameter to get.</typeparam>
            <param name="key">The key of the parameter to find.</param>
            <returns>A matching value of <typeparamref name="T"/> if it exists.</returns>
        </member>
        <member name="M:Prism.Common.IParameters.GetValues``1(System.String)">
            <summary>
            Gets the parameter associated with the specified <paramref name="key"/>.
            </summary>
            <typeparam name="T">The type of the parameter to get.</typeparam>
            <param name="key">The key of the parameter to find.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all the values referenced by key.</returns>
        </member>
        <member name="M:Prism.Common.IParameters.TryGetValue``1(System.String,``0@)">
            <summary>
            Gets the parameter associated with the specified <paramref name="key"/>.
            </summary>
            <typeparam name="T">The type of the parameter to get.</typeparam>
            <param name="key">The key of the parameter to get.</param>
            <param name="value">
            When this method returns, contains the parameter associated with the specified key,
            if the key is found; otherwise, the default value for the type of the value parameter.
            </param>
            <returns>true if the <see cref="T:Prism.Common.IParameters"/> contains a parameter with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:Prism.Common.IParameters.Item(System.String)">
            <summary>
            Gets the parameter associated with the specified key (legacy).
            </summary>
            <param name="key">The key of the parameter to get.</param>
            <returns>A matching value if it exists.</returns>
        </member>
        <member name="T:Prism.Common.IRegistryAware">
            <summary>
            An internal marker API used within Prism to access the instance of the <see cref="T:Prism.Mvvm.IViewRegistry"/>
            within a service where we do not want to publicly expose it but need access for Extension methods.
            </summary>
        </member>
        <member name="P:Prism.Common.IRegistryAware.Registry">
            <summary>
             The instance of the IViewRegistry
            </summary>
        </member>
        <member name="T:Prism.Common.ListDictionary`2">
            <summary>
            A dictionary of lists.
            </summary>
            <typeparam name="TKey">The key to use for lists.</typeparam>
            <typeparam name="TValue">The type of the value held by lists.</typeparam>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.Add(`0)">
            <summary>
            If a list does not already exist, it will be created automatically.
            </summary>
            <param name="key">The key of the list that will hold the value.</param>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value to a list with the given key. If a list does not already exist,
            it will be created automatically.
            </summary>
            <param name="key">The key of the list that will hold the value.</param>
            <param name="value">The value to add to the list under the given key.</param>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.Clear">
            <summary>
            Removes all entries in the dictionary.
            </summary>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the dictionary contains the specified value.
            </summary>
            <param name="value">The value to locate.</param>
            <returns>true if the dictionary contains the value in any list; otherwise, false.</returns>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains the given key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>true if the dictionary contains the given key; otherwise, false.</returns>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.FindAllValuesByKey(System.Predicate{`0})">
            <summary>
            Retrieves the all the elements from the list which have a key that matches the condition
            defined by the specified predicate.
            </summary>
            <param name="keyFilter">The filter with the condition to use to filter lists by their key.</param>
            <returns>The elements that have a key that matches the condition defined by the specified predicate.</returns>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.FindAllValues(System.Predicate{`1})">
            <summary>
            Retrieves all the elements that match the condition defined by the specified predicate.
            </summary>
            <param name="valueFilter">The filter with the condition to use to filter values.</param>
            <returns>The elements that match the condition defined by the specified predicate.</returns>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.Remove(`0)">
            <summary>
            Removes a list by key.
            </summary>
            <param name="key">The key of the list to remove.</param>
            <returns><see langword="true" /> if the element was removed.</returns>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.RemoveValue(`0,`1)">
            <summary>
            Removes a value from the list with the given key.
            </summary>
            <param name="key">The key of the list where the value exists.</param>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.RemoveValue(`1)">
            <summary>
            Removes a value from all lists where it may be found.
            </summary>
            <param name="value">The value to remove.</param>
        </member>
        <member name="P:Prism.Common.ListDictionary`2.Values">
            <summary>
            Gets a shallow copy of all values in all lists.
            </summary>
            <value>List of values.</value>
        </member>
        <member name="P:Prism.Common.ListDictionary`2.Keys">
            <summary>
            Gets the list of keys in the dictionary.
            </summary>
            <value>Collection of keys.</value>
        </member>
        <member name="P:Prism.Common.ListDictionary`2.Item(`0)">
            <summary>
            Gets or sets the list associated with the given key. The
            access always succeeds, eventually returning an empty list.
            </summary>
            <param name="key">The key of the list to access.</param>
            <returns>The list associated with the key.</returns>
        </member>
        <member name="P:Prism.Common.ListDictionary`2.Count">
            <summary>
            Gets the number of lists in the dictionary.
            </summary>
            <value>Value indicating the values count.</value>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#IList{TValue}}#Add(`0,System.Collections.Generic.IList{`1})">
            <summary>
            See <see cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)"/> for more information.
            </summary>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#IList{TValue}}#TryGetValue(`0,System.Collections.Generic.IList{`1}@)">
            <summary>
            See <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)"/> for more information.
            </summary>
        </member>
        <member name="P:Prism.Common.ListDictionary`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#IList{TValue}}#Values">
            <summary>
            See <see cref="P:System.Collections.Generic.IDictionary`2.Values"/> for more information.
            </summary>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/> for more information.
            </summary>
        </member>
        <member name="P:Prism.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/> for more information.
            </summary>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="M:Prism.Common.ListDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="T:Prism.Common.MulticastExceptionHandler">
            <summary>
            Provides a wrapper for managing multicast delegates for handling specific errors
            </summary>
        </member>
        <member name="M:Prism.Common.MulticastExceptionHandler.#ctor">
            <summary>
            Initializes a new MulticastExceptionHandler
            </summary>
        </member>
        <member name="M:Prism.Common.MulticastExceptionHandler.CanHandle(System.Exception)">
            <summary>
            Determines if there is a callback registered to handle the specified exception
            </summary>
            <param name="exception">An <see cref="T:System.Exception"/> to handle or rethrow</param>
            <returns><c>True</c> if a Callback has been registered for the given type of <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:Prism.Common.MulticastExceptionHandler.Handle(System.Exception,System.Object)">
            <summary>
            Handles a specified 
            </summary>
            <param name="exception"></param>
            <param name="parameter"></param>
        </member>
        <member name="T:Prism.Common.ParametersBase">
            <summary>
            This is a generic parameters base class used for Dialog Parameters and Navigation Parameters.
            </summary>
        </member>
        <member name="M:Prism.Common.ParametersBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Prism.Common.ParametersBase.#ctor(System.String)">
            <summary>
            Constructs a list of parameters.
            </summary>
            <param name="query">Query string to be parsed.</param>
        </member>
        <member name="P:Prism.Common.ParametersBase.Item(System.String)">
            <summary>
            Searches Parameter collection and returns value if Collection contains key.
            Otherwise returns null.
            </summary>
            <param name="key">The key for the value to be returned.</param>
            <returns>The value of the parameter referenced by the key; otherwise <c>null</c>.</returns>
        </member>
        <member name="P:Prism.Common.ParametersBase.Count">
            <summary>
            The count, or number, of parameters in collection.
            </summary>
        </member>
        <member name="P:Prism.Common.ParametersBase.Keys">
            <summary>
            Returns an IEnumerable of the Keys in the collection.
            </summary>
        </member>
        <member name="M:Prism.Common.ParametersBase.Add(System.String,System.Object)">
            <summary>
            Adds the key and value to the parameters collection.
            </summary>
            <param name="key">The key to reference this value in the parameters collection.</param>
            <param name="value">The value of the parameter to store.</param>
        </member>
        <member name="M:Prism.Common.ParametersBase.ContainsKey(System.String)">
            <summary>
            Checks collection for presence of key.
            </summary>
            <param name="key">The key to check in the collection.</param>
            <returns><c>true</c> if key exists; else returns <c>false</c>.</returns>
        </member>
        <member name="M:Prism.Common.ParametersBase.GetEnumerator">
            <summary>
            Gets an enumerator for the KeyValuePairs in parameter collection.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:Prism.Common.ParametersBase.GetValue``1(System.String)">
            <summary>
            Returns the value of the member referenced by key.
            </summary>
            <typeparam name="T">The type of object to be returned.</typeparam>
            <param name="key">The key for the value to be returned.</param>
            <returns>Returns a matching parameter of <typeparamref name="T"/> if one exists in the Collection.</returns>
        </member>
        <member name="M:Prism.Common.ParametersBase.GetValues``1(System.String)">
             <summary>
             Returns an IEnumerable of all parameters.
             </summary>
             <typeparam name="T">The type for the values to be returned.</typeparam>
             <param name="key">The key for the values to be returned.</param>
            <returns>Returns a IEnumerable of all the instances of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Prism.Common.ParametersBase.TryGetValue``1(System.String,``0@)">
            <summary>
            Checks to see if the parameter collection contains the value.
            </summary>
            <typeparam name="T">The type for the values to be returned.</typeparam>
            <param name="key">The key for the value to be returned.</param>
            <param name="value">Value of the returned parameter if it exists.</param>
        </member>
        <member name="M:Prism.Common.ParametersBase.ToString">
            <summary>
            Converts parameter collection to a parameter string.
            </summary>
            <returns>A string representation of the parameters.</returns>
        </member>
        <member name="M:Prism.Common.ParametersBase.FromParameters(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds a collection of parameters to the local parameter list.
            </summary>
            <param name="parameters">An IEnumerable of KeyValuePairs to add to the current parameter list.</param>
        </member>
        <member name="T:Prism.Common.ParametersExtensions">
            <summary>
            Extension methods for Navigation or Dialog parameters
            </summary>
        </member>
        <member name="M:Prism.Common.ParametersExtensions.GetValue``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Searches <paramref name="parameters"/> for <paramref name="key"/>
            </summary>
            <typeparam name="T">The type of the parameter to return</typeparam>
            <param name="parameters">A collection of parameters to search</param>
            <param name="key">The key of the parameter to find</param>
            <returns>A matching value of <typeparamref name="T"/> if it exists</returns>
        </member>
        <member name="M:Prism.Common.ParametersExtensions.GetValue(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,System.Type)">
            <summary>
            Searches <paramref name="parameters"/> for value referenced by <paramref name="key"/>
            </summary>
            <param name="parameters">A collection of parameters to search</param>
            <param name="key">The key of the parameter to find</param>
            <param name="type">The type of the parameter to return</param>
            <returns>A matching value of <paramref name="type"/> if it exists</returns>
            <exception cref="T:System.InvalidCastException">Unable to convert the value of Type</exception>
        </member>
        <member name="M:Prism.Common.ParametersExtensions.TryGetValue``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,``0@)">
            <summary>
            Searches <paramref name="parameters"/> for value referenced by <paramref name="key"/>
            </summary>
            <typeparam name="T">The type of the parameter to return</typeparam>
            <param name="parameters">A collection of parameters to search</param>
            <param name="key">The key of the parameter to find</param>
            <param name="value">The value of parameter to return</param>
            <returns>Success if value is found; otherwise returns <c>false</c></returns>
        </member>
        <member name="M:Prism.Common.ParametersExtensions.GetValues``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Searches <paramref name="parameters"/> for value referenced by <paramref name="key"/>
            </summary>
            <typeparam name="T">The type of the parameter to return</typeparam>
            <param name="parameters">A collection of parameters to search</param>
            <param name="key">The key of the parameter to find</param>
            <returns>An IEnumerable{T} of all the values referenced by key</returns>
        </member>
        <member name="M:Prism.Common.ParametersExtensions.ContainsKey(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Checks to see if key exists in parameter collection
            </summary>
            <param name="parameters">IEnumerable to search</param>
            <param name="key">The key to search the <paramref name="parameters"/> for existence</param>
            <returns><c>true</c> if key exists; <c>false</c> otherwise</returns>
        </member>
        <member name="T:Prism.Common.UriParsingHelper">
            <summary>
            Helper class for parsing <see cref="T:System.Uri"/> instances.
            </summary>
        </member>
        <member name="M:Prism.Common.UriParsingHelper.GetUriSegments(System.Uri)">
            <summary>
            Gets the Uri segments from a deep linked Navigation Uri
            </summary>
            <param name="uri">A navigation <see cref="T:System.Uri"/>.</param>
            <returns>A collection of strings for each navigation segment within the Navigation <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Prism.Common.UriParsingHelper.GetSegmentName(System.String)">
            <summary>
            Gets the Segment name from a Navigation Segment
            </summary>
            <param name="segment">A Navigation Segment</param>
            <returns>The navigation segment name from the provided segment.</returns>
        </member>
        <member name="M:Prism.Common.UriParsingHelper.GetSegmentParameters(System.String)">
            <summary>
            Gets the Segment Parameters from a Navigation Segment that may contain a querystring
            </summary>
            <param name="segment">A navigation segment which may contain a querystring</param>
            <returns>The <see cref="T:Prism.Navigation.INavigationParameters"/>.</returns>
        </member>
        <member name="M:Prism.Common.UriParsingHelper.GetSegmentParameters(System.String,Prism.Navigation.INavigationParameters)">
            <summary>
            Gets Segment Parameters including those parameters from an existing <see cref="T:Prism.Navigation.INavigationParameters"/> collection.
            </summary>
            <param name="uriSegment">The <see cref="T:System.Uri"/> segment</param>
            <param name="parameters">The existing <see cref="T:Prism.Navigation.INavigationParameters"/>.</param>
            <returns>The combined <see cref="T:Prism.Navigation.INavigationParameters"/>.</returns>
        </member>
        <member name="M:Prism.Common.UriParsingHelper.GetSegmentDialogParameters(System.String)">
            <summary>
            Gets the <see cref="T:Prism.Dialogs.IDialogParameters"/> from a specified segment
            </summary>
            <param name="segment">A navigation segment which may contain a querystring.</param>
            <returns>The <see cref="T:Prism.Dialogs.IDialogParameters"/>.</returns>
        </member>
        <member name="M:Prism.Common.UriParsingHelper.GetSegmentParameters(System.String,Prism.Dialogs.IDialogParameters)">
            <summary>
            Gets the combined <see cref="T:Prism.Dialogs.IDialogParameters"/> from a specified segment and existing <see cref="T:Prism.Dialogs.IDialogParameters"/>
            </summary>
            <param name="uriSegment">A navigation segment which may contain a querystring.</param>
            <param name="parameters">Existing <see cref="T:Prism.Dialogs.IDialogParameters"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Common.UriParsingHelper.GetQuery(System.Uri)">
            <summary>
            Gets the query part of <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri.</param>
        </member>
        <member name="M:Prism.Common.UriParsingHelper.GetAbsolutePath(System.Uri)">
            <summary>
            Gets the AbsolutePath part of <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri.</param>
        </member>
        <member name="M:Prism.Common.UriParsingHelper.ParseQuery(System.Uri)">
            <summary>
            Parses the query of <paramref name="uri"/> into a dictionary.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Prism.Common.UriParsingHelper.Parse(System.String)">
            <summary>
            Parses a uri string to a properly initialized Uri for Prism
            </summary>
            <param name="uri">A uri string.</param>
            <returns>A <see cref="T:System.Uri"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Throws an <see cref="T:System.ArgumentNullException"/> when the string is null or empty.</exception>
        </member>
        <member name="M:Prism.Common.UriParsingHelper.EnsureAbsolute(System.Uri)">
            <summary>
            This will provide the existing <see cref="T:System.Uri"/> if it is already Absolute, otherwise
            it will build a new Absolute <see cref="T:System.Uri"/>.
            </summary>
            <param name="uri">The source <see cref="T:System.Uri"/>.</param>
            <returns>An Absolute <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="T:Prism.Dialogs.ButtonResult">
            <summary>
            The result of the dialog.
            </summary>
        </member>
        <member name="F:Prism.Dialogs.ButtonResult.Abort">
            <summary>
            Abort.
            </summary>
        </member>
        <member name="F:Prism.Dialogs.ButtonResult.Cancel">
            <summary>
            Cancel.
            </summary>
        </member>
        <member name="F:Prism.Dialogs.ButtonResult.Ignore">
            <summary>
            Ignore.
            </summary>
        </member>
        <member name="F:Prism.Dialogs.ButtonResult.No">
            <summary>
            No.
            </summary>
        </member>
        <member name="F:Prism.Dialogs.ButtonResult.None">
            <summary>
            No result returned.
            </summary>
        </member>
        <member name="F:Prism.Dialogs.ButtonResult.OK">
            <summary>
            OK.
            </summary>
        </member>
        <member name="F:Prism.Dialogs.ButtonResult.Retry">
            <summary>
            Retry.
            </summary>
        </member>
        <member name="F:Prism.Dialogs.ButtonResult.Yes">
            <summary>
            Yes.
            </summary>
        </member>
        <member name="T:Prism.Dialogs.DialogCallback">
            <summary>
            Provides a container for one or more Callbacks which may target specific Error Handling or Delegates to invoke on the successful close of the Dialog
            </summary>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.#ctor">
            <summary>
            Creates a new instance of a DialogCallback
            </summary>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.Invoke(System.Exception)">
            <summary>
            Invokes the Delegates based on a specific Exception that was encountered.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.Invoke(Prism.Dialogs.IDialogResult)">
            <summary>
            Invokes the Delegates for a given <see cref="T:Prism.Dialogs.IDialogResult"/>
            </summary>
            <param name="result">The Result</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="P:Prism.Dialogs.DialogCallback.Empty">
            <summary>
            Provides an empty DialogCallback that will not execute any 
            </summary>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.OnClose(System.Action)">
            <summary>
            Provides a delegate callback method when the Dialog is closed
            </summary>
            <param name="action">The callback</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.OnClose(System.Action{Prism.Dialogs.IDialogResult})">
            <summary>
            Provides a delegate callback method when the Dialog is closed
            </summary>
            <param name="action">The callback</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.OnError(System.Action)">
            <summary>
            Provides a delegate callback method when an Exception is encountered
            </summary>
            <param name="action">The callback</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.OnError``1(System.Action)">
            <summary>
            Provides a delegate callback method when an Exception is encountered
            </summary>
            <param name="action">The callback</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.OnError(System.Action{System.Exception})">
            <summary>
            Provides a delegate callback method when an Exception is encountered
            </summary>
            <param name="action">The callback</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.OnError``1(System.Action{``0})">
            <summary>
            Provides a delegate callback method when an Exception is encountered
            </summary>
            <param name="action">The callback</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.OnError``1(System.Action{``0,Prism.Dialogs.IDialogResult})">
            <summary>
            Provides a delegate callback method when an Exception is encountered
            </summary>
            <param name="action">The callback</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.OnCloseAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Provides an asynchronous delegate callback method when the Dialog is closed
            </summary>
            <param name="func">The callback</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.OnCloseAsync(System.Func{Prism.Dialogs.IDialogResult,System.Threading.Tasks.Task})">
            <summary>
            Provides an asynchronous delegate callback method when the Dialog is closed
            </summary>
            <param name="func">The callback</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.OnErrorAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Provides an asynchronous delegate callback method when an Exception is encountered
            </summary>
            <param name="func">The callback</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.OnErrorAsync``1(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Provides an asynchronous delegate callback method when an Exception is encountered
            </summary>
            <param name="func">The callback</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.OnErrorAsync(System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
            Provides an asynchronous delegate callback method when an Exception is encountered
            </summary>
            <param name="func">The callback</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.OnErrorAsync``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Provides an asynchronous delegate callback method when an Exception is encountered
            </summary>
            <param name="func">The callback</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Dialogs.DialogCallback.OnErrorAsync``1(System.Func{``0,Prism.Dialogs.IDialogResult,System.Threading.Tasks.Task})">
            <summary>
            Provides an asynchronous delegate callback method when an Exception is encountered
            </summary>
            <param name="func">The callback</param>
            <returns></returns>
        </member>
        <member name="T:Prism.Dialogs.DialogCloseListener">
            <summary>
            This is set by the <see cref="T:Prism.Dialogs.IDialogService"/> on your <see cref="T:Prism.Dialogs.IDialogAware"/> ViewModel. This can then
            be invoked by either the DialogService or your code to initiate closing the Dialog.
            </summary>
        </member>
        <member name="M:Prism.Dialogs.DialogCloseListener.#ctor">
            <summary>
            Creates a default instance of the <see cref="T:Prism.Dialogs.DialogCloseListener"/>
            </summary>
        </member>
        <member name="M:Prism.Dialogs.DialogCloseListener.Invoke">
            <summary>
            Invokes the initialized delegate with no <see cref="T:Prism.Dialogs.IDialogResult"/>.
            </summary>
        </member>
        <member name="M:Prism.Dialogs.DialogCloseListener.Invoke(Prism.Dialogs.ButtonResult)">
            <summary>
            Invokes the initialized delegate with the specified <see cref="T:Prism.Dialogs.ButtonResult"/>.
            </summary>
            <param name="result">The <see cref="T:Prism.Dialogs.ButtonResult"/>.</param>
        </member>
        <member name="M:Prism.Dialogs.DialogCloseListener.Invoke(Prism.Dialogs.IDialogParameters,Prism.Dialogs.ButtonResult)">
            <summary>
            Invokes the initialized delegate with the specified <see cref="T:Prism.Dialogs.IDialogParameters"/>.
            </summary>
            <param name="parameters">The <see cref="T:Prism.Dialogs.IDialogParameters"/>.</param>
            <param name="result">The <see cref="T:Prism.Dialogs.ButtonResult"/>.</param>
        </member>
        <member name="M:Prism.Dialogs.DialogCloseListener.Invoke(Prism.Dialogs.IDialogResult)">
            <summary>
            Invokes the initialized delegate with the specified <see cref="T:Prism.Dialogs.IDialogResult"/>
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:Prism.Dialogs.DialogException">
            <summary>
            Represents errors that may occur within the <see cref="T:Prism.Dialogs.IDialogService"/>.
            </summary>
        </member>
        <member name="F:Prism.Dialogs.DialogException.ShowDialog">
            <summary>
            The <see cref="T:Prism.Dialogs.DialogException"/> Message returned when an unexpected error occurred while displaying the dialog.
            </summary>
        </member>
        <member name="F:Prism.Dialogs.DialogException.RequiresContentPage">
            <summary>
            The <see cref="T:Prism.Dialogs.DialogException"/> Message returned when the CurrentPage must be a ContentPage
            </summary>
            <remarks>Xamarin.Forms &amp; Maui specific</remarks>
        </member>
        <member name="F:Prism.Dialogs.DialogException.HostPageIsNotDialogHost">
            <summary>
            The <see cref="T:Prism.Dialogs.DialogException"/> Message returned when the Current View is not host a Dialog
            </summary>
        </member>
        <member name="F:Prism.Dialogs.DialogException.CanCloseIsFalse">
            <summary>
            The <see cref="T:Prism.Dialogs.DialogException"/> Message returned when CanClose returns false
            </summary>
        </member>
        <member name="F:Prism.Dialogs.DialogException.NoViewModel">
            <summary>
            The <see cref="T:Prism.Dialogs.DialogException"/> Message returned when No ViewModel can be found
            </summary>
        </member>
        <member name="F:Prism.Dialogs.DialogException.ImplementIDialogAware">
            <summary>
            The <see cref="T:Prism.Dialogs.DialogException"/> Message returned when the ViewModel does not implement IDialogAware.
            </summary>
        </member>
        <member name="F:Prism.Dialogs.DialogException.UnableToSetTheDialogCloseListener">
            <summary>
            The <see cref="T:Prism.Dialogs.DialogException"/> Message returned when Prism is unable to locate the backing field or setter for the <see cref="T:Prism.Dialogs.DialogCloseListener"/>.
            </summary>
        </member>
        <member name="M:Prism.Dialogs.DialogException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Prism.Dialogs.DialogException"/> with a given message
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Prism.Dialogs.DialogParameters">
            <summary>
            Provides a base implementation of <see cref="T:Prism.Dialogs.IDialogParameters"/>.
            </summary>
        </member>
        <member name="M:Prism.Dialogs.DialogParameters.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Dialogs.DialogParameters"/>.
            </summary>
        </member>
        <member name="M:Prism.Dialogs.DialogParameters.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Dialogs.DialogParameters"/> based on a specified query string.
            </summary>
            <param name="query">A uri query string</param>
        </member>
        <member name="T:Prism.Dialogs.DialogResult">
            <summary>
            An <see cref="T:Prism.Dialogs.IDialogResult"/> that contains <see cref="T:Prism.Dialogs.IDialogParameters"/> from the dialog
            and the <see cref="T:Prism.Dialogs.ButtonResult"/> of the dialog.
            </summary>
        </member>
        <member name="M:Prism.Dialogs.DialogResult.#ctor">
            <summary>
            Creates a new <see cref="T:Prism.Dialogs.DialogResult"/>
            </summary>
        </member>
        <member name="M:Prism.Dialogs.DialogResult.#ctor(Prism.Dialogs.ButtonResult)">
            <summary>
            Creates a new <see cref="T:Prism.Dialogs.DialogResult"/> with a specified <see cref="T:Prism.Dialogs.ButtonResult"/>
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:Prism.Dialogs.DialogResult.Exception">
            <summary>
            An <see cref="T:System.Exception"/> that was thrown by the DialogService
            </summary>
        </member>
        <member name="P:Prism.Dialogs.DialogResult.Parameters">
            <summary>
            The parameters from the dialog.
            </summary>
        </member>
        <member name="P:Prism.Dialogs.DialogResult.Result">
            <summary>
            The result of the dialog.
            </summary>
        </member>
        <member name="T:Prism.Dialogs.DialogUtilities">
            <summary>
            Provides utilities for the Dialog Service to be able to reuse
            </summary>
        </member>
        <member name="M:Prism.Dialogs.DialogUtilities.InitializeListener(Prism.Dialogs.IDialogAware,System.Func{Prism.Dialogs.IDialogResult,System.Threading.Tasks.Task})">
            <summary>
            Initializes <see cref="P:Prism.Dialogs.IDialogAware.RequestClose"/>
            </summary>
            <param name="dialogAware"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Prism.Dialogs.DialogUtilities.InitializeListener(Prism.Dialogs.IDialogAware,System.Action{Prism.Dialogs.IDialogResult})">
            <summary>
            Initializes <see cref="P:Prism.Dialogs.IDialogAware.RequestClose"/>
            </summary>
            <param name="dialogAware"></param>
            <param name="callback"></param>
        </member>
        <member name="T:Prism.Dialogs.IDialogAware">
            <summary>
            Provides a way for objects involved in Dialogs to be notified of Dialog activities.
            </summary>
        </member>
        <member name="M:Prism.Dialogs.IDialogAware.CanCloseDialog">
            <summary>
            Evaluates whether the Dialog is in a state that would allow the Dialog to Close
            </summary>
            <returns><c>true</c> if the Dialog can close</returns>
        </member>
        <member name="M:Prism.Dialogs.IDialogAware.OnDialogClosed">
            <summary>
            Provides a callback to clean up resources or finalize tasks when the Dialog has been closed
            </summary>
        </member>
        <member name="M:Prism.Dialogs.IDialogAware.OnDialogOpened(Prism.Dialogs.IDialogParameters)">
            <summary>
            Initializes the state of the Dialog with provided DialogParameters
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="P:Prism.Dialogs.IDialogAware.RequestClose">
            <summary>
            The <see cref="T:Prism.Dialogs.DialogCloseListener"/> will be set by the <see cref="T:Prism.Dialogs.IDialogService"/> and can be called to
            invoke the close of the Dialog.
            </summary>
        </member>
        <member name="T:Prism.Dialogs.IDialogParameters">
            <summary>
            Provides a way for the <see cref="T:Prism.Dialogs.IDialogService"/> to pass parameters when displaying a dialog.
            </summary>
        </member>
        <member name="T:Prism.Dialogs.IDialogResult">
            <summary>
            Contains <see cref="T:Prism.Dialogs.IDialogParameters"/> from the dialog
            and the <see cref="T:Prism.Dialogs.ButtonResult"/> of the dialog.
            </summary>
        </member>
        <member name="P:Prism.Dialogs.IDialogResult.Exception">
            <summary>
            An <see cref="T:System.Exception"/> that was thrown by the DialogService
            </summary>
        </member>
        <member name="P:Prism.Dialogs.IDialogResult.Result">
            <summary>
            The result of the dialog.
            </summary>
        </member>
        <member name="P:Prism.Dialogs.IDialogResult.Parameters">
            <summary>
            The parameters from the dialog.
            </summary>
        </member>
        <member name="T:Prism.Dialogs.IDialogService">
            <summary>
            Defines a contract for displaying dialogs from ViewModels.
            </summary>
        </member>
        <member name="M:Prism.Dialogs.IDialogService.ShowDialog(System.String,Prism.Dialogs.IDialogParameters,Prism.Dialogs.DialogCallback)">
            <summary>
            Displays a dialog.
            </summary>
            <param name="name">The unique name of the dialog to display. Must match an entry in the <see cref="T:Prism.Ioc.IContainerRegistry"/>.</param>
            <param name="parameters">Parameters that the dialog can use for custom functionality.</param>
            <param name="callback">The action to be invoked upon successful or failed completion of displaying the dialog.</param>
            <example>
            This example shows how to display a dialog with two parameters.
            <code>
            var parameters = new DialogParameters
            {
                { "title", "Connection Lost!" },
                { "message", "We seem to have lost network connectivity" }
            };
            _dialogService.ShowDialog("DemoDialog", parameters, <paramref name="callback"/>: null);
            </code>
            </example>
        </member>
        <member name="T:Prism.Dialogs.IDialogServiceExtensions">
            <summary>
            Provides compatibility Extensions for the <see cref="T:Prism.Dialogs.IDialogService"/>
            </summary>
        </member>
        <member name="M:Prism.Dialogs.IDialogServiceExtensions.ShowDialog(Prism.Dialogs.IDialogService,System.String,Prism.Dialogs.IDialogParameters)">
            <summary>
            Shows the dialog with the given name and passes parameters to the dialog
            </summary>
            <param name="dialogService">The <see cref="T:Prism.Dialogs.IDialogService"/>.</param>
            <param name="name">The name of the dialog</param>
            <param name="parameters">The <see cref="T:Prism.Dialogs.IDialogParameters"/> to pass to the dialog</param>
        </member>
        <member name="M:Prism.Dialogs.IDialogServiceExtensions.ShowDialog(Prism.Dialogs.IDialogService,System.String)">
            <summary>
            Shows the dialog with the given name and passes an empty set of DialogParameters
            </summary>
            <param name="dialogService">The <see cref="T:Prism.Dialogs.IDialogService"/>.</param>
            <param name="name">The name of the dialog</param>
        </member>
        <member name="M:Prism.Dialogs.IDialogServiceExtensions.ShowDialog(Prism.Dialogs.IDialogService,System.String,Prism.Dialogs.DialogCallback)">
            <summary>
            Shows a dialog with a given name which needs no parameters but has a <see cref="T:Prism.Dialogs.DialogCallback"/>
            </summary>
            <param name="dialogService">The <see cref="T:Prism.Dialogs.IDialogService"/>.</param>
            <param name="name">The name of the dialog</param>
            <param name="callback">A specified <see cref="T:Prism.Dialogs.DialogCallback"/>.</param>
        </member>
        <member name="M:Prism.Dialogs.IDialogServiceExtensions.ShowDialog(Prism.Dialogs.IDialogService,System.String,System.Action)">
            <summary>
            Shows a Dialog with a given name and an <see cref="T:System.Action"/> for a callback
            </summary>
            <param name="dialogService">The <see cref="T:Prism.Dialogs.IDialogService"/>.</param>
            <param name="name">The name of the dialog</param>
            <param name="callback"></param>
            <remarks>This is for backwards compatibility. Use DialogCallback instead.</remarks>
        </member>
        <member name="M:Prism.Dialogs.IDialogServiceExtensions.ShowDialog(Prism.Dialogs.IDialogService,System.String,System.Action{Prism.Dialogs.IDialogResult})">
            <summary>
            Shows a Dialog with a given name and an <see cref="T:System.Action`1"/> for a callback
            </summary>
            <param name="dialogService">The <see cref="T:Prism.Dialogs.IDialogService"/>.</param>
            <param name="name">The name of the dialog</param>
            <param name="callback"></param>
            <remarks>This is for backwards compatibility. Use DialogCallback instead.</remarks>
        </member>
        <member name="M:Prism.Dialogs.IDialogServiceExtensions.ShowDialog(Prism.Dialogs.IDialogService,System.String,Prism.Dialogs.IDialogParameters,System.Action)">
            <summary>
            Shows a Dialog with a given name and an <see cref="T:System.Action"/> for a callback.
            </summary>
            <param name="dialogService">The <see cref="T:Prism.Dialogs.IDialogService"/>.</param>
            <param name="name">The name of the dialog</param>
            <param name="parameters">The <see cref="T:Prism.Dialogs.IDialogParameters"/> to pass to the dialog</param>
            <param name="callback"></param>
            <remarks>This is for backwards compatibility. Use DialogCallback instead.</remarks>
        </member>
        <member name="M:Prism.Dialogs.IDialogServiceExtensions.ShowDialog(Prism.Dialogs.IDialogService,System.String,Prism.Dialogs.IDialogParameters,System.Action{Prism.Dialogs.IDialogResult})">
            <summary>
            Shows a Dialog with a given name and an <see cref="T:System.Action`1"/> for a callback
            </summary>
            <param name="dialogService">The <see cref="T:Prism.Dialogs.IDialogService"/>.</param>
            <param name="name">The name of the dialog</param>
            <param name="parameters">The <see cref="T:Prism.Dialogs.IDialogParameters"/> to pass to the dialog</param>
            <param name="callback"></param>
            <remarks>This is for backwards compatibility. Use DialogCallback instead.</remarks>
        </member>
        <member name="M:Prism.Dialogs.IDialogServiceExtensions.ShowDialogAsync(Prism.Dialogs.IDialogService,System.String)">
            <summary>
            Asynchronously shows the Dialog and returns the <see cref="T:Prism.Dialogs.IDialogResult"/>.
            </summary>
            <param name="dialogService">The <see cref="T:Prism.Dialogs.IDialogService"/>.</param>
            <param name="name">The name of the dialog</param>
            <returns>An <see cref="T:Prism.Dialogs.IDialogResult"/> on the close of the dialog.</returns>
        </member>
        <member name="M:Prism.Dialogs.IDialogServiceExtensions.ShowDialogAsync(Prism.Dialogs.IDialogService,System.String,Prism.Dialogs.IDialogParameters)">
            <summary>
            Asynchronously shows the Dialog and returns the <see cref="T:Prism.Dialogs.IDialogResult"/>, with given <see cref="T:Prism.Dialogs.IDialogParameters"/>.
            </summary>
            <param name="dialogService">The <see cref="T:Prism.Dialogs.IDialogService"/>.</param>
            <param name="name">The name of the dialog</param>
            <param name="parameters">The <see cref="T:Prism.Dialogs.IDialogParameters"/> to pass to the dialog</param>
            <returns>An <see cref="T:Prism.Dialogs.IDialogResult"/> on the close of the dialog.</returns>
        </member>
        <member name="T:Prism.IActiveAware">
            <summary>
            Interface that defines if the object instance is active
            and notifies when the activity changes.
            </summary>
        </member>
        <member name="P:Prism.IActiveAware.IsActive">
            <summary>
            Gets or sets a value indicating whether the object is active.
            </summary>
            <value><see langword="true" /> if the object is active; otherwise <see langword="false" />.</value>
        </member>
        <member name="E:Prism.IActiveAware.IsActiveChanged">
            <summary>
            Notifies that the value for <see cref="P:Prism.IActiveAware.IsActive"/> property has changed.
            </summary>
        </member>
        <member name="T:Prism.Modularity.CyclicDependencyFoundException">
            <summary>
            Represents the exception that is thrown when there is a circular dependency
            between modules during the module loading process.
            </summary>
        </member>
        <member name="M:Prism.Modularity.CyclicDependencyFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.CyclicDependencyFoundException"/> class.
            </summary>
        </member>
        <member name="M:Prism.Modularity.CyclicDependencyFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.CyclicDependencyFoundException"/> class
            with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Prism.Modularity.CyclicDependencyFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.CyclicDependencyFoundException"/> class
            with the specified error message and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Prism.Modularity.CyclicDependencyFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Modularity.CyclicDependencyFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.CyclicDependencyFoundException"/> class
            with the serialization data.
            </summary>
            <param name="info">Holds the serialized object data about the exception being thrown.</param>
            <param name="context">Contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Prism.Modularity.DuplicateModuleException">
            <summary>
            Exception thrown when a module is declared twice in the same catalog.
            </summary>
        </member>
        <member name="M:Prism.Modularity.DuplicateModuleException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.DuplicateModuleException"/> class.
            </summary>
        </member>
        <member name="M:Prism.Modularity.DuplicateModuleException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.DuplicateModuleException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Prism.Modularity.DuplicateModuleException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.DuplicateModuleException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Prism.Modularity.DuplicateModuleException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.DuplicateModuleException" /> class with a specified error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Prism.Modularity.DuplicateModuleException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.DuplicateModuleException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Modularity.DuplicateModuleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.DuplicateModuleException"/> class
            with the serialization data.
            </summary>
            <param name="info">Holds the serialized object data about the exception being thrown.</param>
            <param name="context">Contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Prism.Modularity.IModule">
            <summary>
            Defines the contract for the modules deployed in the application.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModule.RegisterTypes(Prism.Ioc.IContainerRegistry)">
            <summary>
            Used to register types with the container that will be used by your application.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModule.OnInitialized(Prism.Ioc.IContainerProvider)">
            <summary>
            Notifies the module that it has been initialized.
            </summary>
        </member>
        <member name="T:Prism.Modularity.IModuleCatalog">
            <summary>
            This is the expected catalog definition for the ModuleManager. 
            The ModuleCatalog holds information about the modules that can be used by the 
            application. Each module is described in a ModuleInfo class, that records the 
            name, type and location of the module. 
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleCatalog.Modules">
            <summary>
            Gets all the <see cref="T:Prism.Modularity.IModuleInfo"/> classes that are in the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalog.GetDependentModules(Prism.Modularity.IModuleInfo)">
            <summary>
            Return the list of <see cref="T:Prism.Modularity.IModuleInfo"/>s that <paramref name="moduleInfo"/> depends on.
            </summary>
            <param name="moduleInfo">The <see cref="T:Prism.Modularity.IModuleInfo"/> to get the </param>
            <returns>An enumeration of <see cref="T:Prism.Modularity.IModuleInfo"/> that <paramref name="moduleInfo"/> depends on.</returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalog.CompleteListWithDependencies(System.Collections.Generic.IEnumerable{Prism.Modularity.IModuleInfo})">
            <summary>
            Returns the collection of <see cref="T:Prism.Modularity.IModuleInfo"/>s that contain both the <see cref="T:Prism.Modularity.IModuleInfo"/>s in 
            <paramref name="modules"/>, but also all the modules they depend on. 
            </summary>
            <param name="modules">The modules to get the dependencies for.</param>
            <returns>
            A collection of <see cref="T:Prism.Modularity.IModuleInfo"/> that contains both all <see cref="T:Prism.Modularity.IModuleInfo"/>s in <paramref name="modules"/>
            and also all the <see cref="T:Prism.Modularity.IModuleInfo"/> they depend on.
            </returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalog.Initialize">
            <summary>
            Initializes the catalog, which may load and validate the modules.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalog.AddModule(Prism.Modularity.IModuleInfo)">
            <summary>
            Adds a <see cref="T:Prism.Modularity.IModuleInfo"/> to the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
            <param name="moduleInfo">The <see cref="T:Prism.Modularity.IModuleInfo"/> to add.</param>
            <returns>The <see cref="T:Prism.Modularity.IModuleCatalog"/> for easily adding multiple modules.</returns>
        </member>
        <member name="T:Prism.Modularity.IModuleCatalogCommonExtensions">
            <summary>
            <see cref="T:Prism.Modularity.IModuleCatalog"/>  extensions.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogCommonExtensions.Exists``1(Prism.Modularity.IModuleCatalog)">
            <summary>
            Checks to see if the <see cref="T:Prism.Modularity.IModule"/> exists in the <see cref="P:Prism.Modularity.IModuleCatalog.Modules"/>  
            </summary>
            <returns><c>true</c> if the Module exists.</returns>
            <param name="catalog">Catalog.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> to check for.</typeparam>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogCommonExtensions.Exists(Prism.Modularity.IModuleCatalog,System.String)">
            <summary>
            Exists the specified catalog and name.
            </summary>
            <returns><c>true</c> if the Module exists.</returns>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogCommonExtensions.GetModuleState``1(Prism.Modularity.IModuleCatalog)">
            <summary>
            Gets the current <see cref="T:Prism.Modularity.ModuleState"/> of the <see cref="T:Prism.Modularity.IModule"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> to check.</typeparam>
            <param name="catalog">Catalog.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogCommonExtensions.GetModuleState(Prism.Modularity.IModuleCatalog,System.String)">
            <summary>
            Gets the current <see cref="T:Prism.Modularity.ModuleState"/> of the <see cref="T:Prism.Modularity.IModule"/>.
            </summary>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogCommonExtensions.IsInitialized``1(Prism.Modularity.IModuleCatalog)">
            <summary>
            Checks to see if the <see cref="T:Prism.Modularity.IModule"/> is already initialized. 
            </summary>
            <returns><c>true</c>, if initialized, <c>false</c> otherwise.</returns>
            <param name="catalog">Catalog.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> to check.</typeparam>
        </member>
        <member name="M:Prism.Modularity.IModuleCatalogCommonExtensions.IsInitialized(Prism.Modularity.IModuleCatalog,System.String)">
            <summary>
            Checks to see if the <see cref="T:Prism.Modularity.IModule"/> is already initialized. 
            </summary>
            <returns><c>true</c>, if initialized, <c>false</c> otherwise.</returns>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
        </member>
        <member name="T:Prism.Modularity.IModuleCatalogItem">
            <summary>
            Marker interface that allows both <see cref="T:Prism.Modularity.IModuleInfoGroup"/>s and <see cref="T:Prism.Modularity.IModuleInfo"/>s to be
            added to the <see cref="T:Prism.Modularity.IModuleCatalog"/> from code and XAML. 
            </summary>
        </member>
        <member name="T:Prism.Modularity.IModuleInfo">
            <summary>
            Set of properties for each Module
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleInfo.DependsOn">
            <summary>
            The module names this instance depends on.
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleInfo.InitializationMode">
            <summary>
            Gets or Sets the <see cref="P:Prism.Modularity.IModuleInfo.InitializationMode" />
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleInfo.ModuleName">
            <summary>
            The name of the module
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleInfo.ModuleType">
            <summary>
            The module's type
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleInfo.Ref">
            <summary>
            A string ref is a location reference to load the module as it may not be already loaded in the Appdomain in some cases may need to be downloaded.
            </summary>
            <Remarks>
            This is only used for WPF
            </Remarks>
        </member>
        <member name="P:Prism.Modularity.IModuleInfo.State">
            <summary>
            Gets or Sets the current <see cref="T:Prism.Modularity.ModuleState" />
            </summary>
        </member>
        <member name="T:Prism.Modularity.IModuleInfoGroup">
            <summary>
            A collection of <see cref="T:Prism.Modularity.IModuleInfo"/> for the Modules used by the application
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleInfoGroup.InitializationMode">
            <summary>
            When Prism should Initialize the module
            <see cref="P:Prism.Modularity.IModuleInfoGroup.InitializationMode"/>
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleInfoGroup.Ref">
            <summary>
            A string ref is a location reference to load the module as it may not be already loaded in the Appdomain in some cases may need to be downloaded.
            </summary>
            <Remarks>
            This is only used for WPF
            </Remarks>
        </member>
        <member name="T:Prism.Modularity.IModuleInitializer">
            <summary>
            Declares a service which initializes the modules into the application.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleInitializer.Initialize(Prism.Modularity.IModuleInfo)">
            <summary>
            Initializes the specified module.
            </summary>
            <param name="moduleInfo">The module to initialize</param>
        </member>
        <member name="T:Prism.Modularity.IModuleManager">
            <summary>
            Defines the interface for the service that will retrieve and initialize the application's modules.
            </summary>
        </member>
        <member name="P:Prism.Modularity.IModuleManager.Modules">
            <summary>
            Gets all the <see cref="T:Prism.Modularity.IModuleInfo"/> classes that are in the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleManager.Run">
            <summary>
            Initializes the modules marked as <see cref="F:Prism.Modularity.InitializationMode.WhenAvailable"/> on the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleManager.LoadModule(System.String)">
            <summary>
            Loads and initializes the module on the <see cref="T:Prism.Modularity.IModuleCatalog"/> with the name <paramref name="moduleName"/>.
            </summary>
            <param name="moduleName">Name of the module requested for initialization.</param>
        </member>
        <member name="E:Prism.Modularity.IModuleManager.ModuleDownloadProgressChanged">
            <summary>
            Raised repeatedly to provide progress as modules are downloaded.
            </summary>
        </member>
        <member name="E:Prism.Modularity.IModuleManager.LoadModuleCompleted">
            <summary>
            Raised when a module is loaded or fails to load.
            </summary>
        </member>
        <member name="T:Prism.Modularity.IModuleManagerExtensions">
            <summary>
            Common extensions for the <see cref="T:Prism.Modularity.IModuleManager"/>
            </summary>
        </member>
        <member name="M:Prism.Modularity.IModuleManagerExtensions.ModuleExists``1(Prism.Modularity.IModuleManager)">
            <summary>
            Checks to see if the <see cref="T:Prism.Modularity.IModule"/> exists in the <see cref="P:Prism.Modularity.IModuleCatalog.Modules"/>  
            </summary>
            <returns><c>true</c> if the Module exists.</returns>
            <param name="manager">The <see cref="T:Prism.Modularity.IModuleManager"/>.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> to check for.</typeparam>
        </member>
        <member name="M:Prism.Modularity.IModuleManagerExtensions.ModuleExists(Prism.Modularity.IModuleManager,System.String)">
            <summary>
            Exists the specified catalog and name.
            </summary>
            <returns><c>true</c> if the Module exists.</returns>
            <param name="catalog">Catalog.</param>
            <param name="name">Name.</param>
        </member>
        <member name="M:Prism.Modularity.IModuleManagerExtensions.GetModuleState``1(Prism.Modularity.IModuleManager)">
            <summary>
            Gets the current <see cref="T:Prism.Modularity.ModuleState"/> of the <see cref="T:Prism.Modularity.IModule"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> to check.</typeparam>
            <param name="manager">The <see cref="T:Prism.Modularity.IModuleManager"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Modularity.IModuleManagerExtensions.GetModuleState(Prism.Modularity.IModuleManager,System.String)">
            <summary>
            Gets the current <see cref="T:Prism.Modularity.ModuleState"/> of the <see cref="T:Prism.Modularity.IModule"/>.
            </summary>
            <param name="manager">The <see cref="T:Prism.Modularity.IModuleManager"/>.</param>
            <param name="name">Name.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Modularity.IModuleManagerExtensions.IsModuleInitialized``1(Prism.Modularity.IModuleManager)">
            <summary>
            Checks to see if the <see cref="T:Prism.Modularity.IModule"/> is already initialized. 
            </summary>
            <returns><c>true</c>, if initialized, <c>false</c> otherwise.</returns>
            <param name="manager">The <see cref="T:Prism.Modularity.IModuleManager"/>.</param>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> to check.</typeparam>
        </member>
        <member name="M:Prism.Modularity.IModuleManagerExtensions.IsModuleInitialized(Prism.Modularity.IModuleManager,System.String)">
            <summary>
            Checks to see if the <see cref="T:Prism.Modularity.IModule"/> is already initialized. 
            </summary>
            <returns><c>true</c>, if initialized, <c>false</c> otherwise.</returns>
            <param name="manager">The <see cref="T:Prism.Modularity.IModuleManager"/>.</param>
            <param name="name">Name.</param>
        </member>
        <member name="M:Prism.Modularity.IModuleManagerExtensions.LoadModule``1(Prism.Modularity.IModuleManager)">
            <summary>
            Loads and initializes the module in the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Prism.Modularity.IModule"/> to load.</typeparam>
            <param name="manager">The <see cref="T:Prism.Modularity.IModuleManager"/>.</param>
        </member>
        <member name="T:Prism.Modularity.InitializationMode">
            <summary>
            Specifies on which stage the Module group will be initialized.
            </summary>
        </member>
        <member name="F:Prism.Modularity.InitializationMode.WhenAvailable">
            <summary>
            The module will be initialized when it is available on application start-up.
            </summary>
        </member>
        <member name="F:Prism.Modularity.InitializationMode.OnDemand">
            <summary>
            The module will be initialized when requested, and not automatically on application start-up.
            </summary>
        </member>
        <member name="T:Prism.Modularity.LoadModuleCompletedEventArgs">
            <summary>
            Provides completion information after a module is loaded, or fails to load.
            </summary>
        </member>
        <member name="M:Prism.Modularity.LoadModuleCompletedEventArgs.#ctor(Prism.Modularity.IModuleInfo,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.LoadModuleCompletedEventArgs"/> class.
            </summary>
            <param name="moduleInfo">The module info.</param>
            <param name="error">Any error that occurred during the call.</param>
        </member>
        <member name="P:Prism.Modularity.LoadModuleCompletedEventArgs.ModuleInfo">
            <summary>
            Gets the module info.
            </summary>
            <value>The module info.</value>
        </member>
        <member name="P:Prism.Modularity.LoadModuleCompletedEventArgs.Error">
            <summary>
            Gets any error that occurred
            </summary>
            <value>The exception if an error occurred; otherwise null.</value>
        </member>
        <member name="P:Prism.Modularity.LoadModuleCompletedEventArgs.IsErrorHandled">
            <summary>
            Gets or sets a value indicating whether the error has been handled by the event subscriber.
            </summary>
            <value><c>true</c>if the error is handled; otherwise, <c>false</c>.</value>
            <remarks>
            If there is an error on this event and no event subscriber sets this to true, an exception will be thrown by the event publisher.
            </remarks>
        </member>
        <member name="T:Prism.Modularity.ModularityException">
            <summary>
            Base class for exceptions that are thrown because of a problem with modules. 
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModularityException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModularityException"/> class.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModularityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModularityException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Prism.Modularity.ModularityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModularityException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Prism.Modularity.ModularityException.#ctor(System.String,System.String)">
            <summary>
            Initializes the exception with a particular module and error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Prism.Modularity.ModularityException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="P:Prism.Modularity.ModularityException.ModuleName">
            <summary>
            Gets or sets the name of the module that this exception refers to.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="M:Prism.Modularity.ModularityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Prism.Modularity.ModularityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Prism.Modularity.ModuleCatalogBase">
             <summary>
             The <see cref="T:Prism.Modularity.ModuleCatalogBase"/> holds information about the modules that can be used by the
             application. Each module is described in a <see cref="T:Prism.Modularity.IModuleInfo"/> class, that records the
             name, type and location of the module.
            
             It also verifies that the <see cref="T:Prism.Modularity.ModuleCatalogBase"/> is internally valid. That means that
             it does not have:
             <list>
                 <item>Circular dependencies</item>
                 <item>Missing dependencies</item>
                 <item>
                     Invalid dependencies, such as a Module that's loaded at startup that depends on a module
                     that might need to be retrieved.
                 </item>
             </list>
             The <see cref="T:Prism.Modularity.ModuleCatalogBase"/> also serves as a baseclass for more specialized Catalogs .
             </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.IModuleCatalog"/> class.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.#ctor(System.Collections.Generic.IEnumerable{Prism.Modularity.IModuleInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.IModuleCatalog"/> class while providing an
            initial list of <see cref="T:Prism.Modularity.IModuleInfo"/>s.
            </summary>
            <param name="modules">The initial list of modules.</param>
        </member>
        <member name="P:Prism.Modularity.ModuleCatalogBase.Items">
            <summary>
            Gets the items in the <see cref="T:Prism.Modularity.IModuleCatalog"/>. This property is mainly used to add <see cref="T:Prism.Modularity.IModuleInfoGroup"/>s or
            <see cref="T:Prism.Modularity.IModuleInfo"/>s through XAML.
            </summary>
            <value>The items in the catalog.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleCatalogBase.Modules">
            <summary>
            Gets all the <see cref="T:Prism.Modularity.IModuleInfo"/> classes that are in the <see cref="T:Prism.Modularity.IModuleCatalog"/>, regardless
            if they are within a <see cref="T:Prism.Modularity.IModuleInfoGroup"/> or not.
            </summary>
            <value>The modules.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleCatalogBase.Groups">
            <summary>
            Gets the <see cref="T:Prism.Modularity.IModuleInfoGroup"/>s that have been added to the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleCatalogBase.Validated">
            <summary>
            Gets or sets a value that remembers whether the <see cref="T:Prism.Modularity.ModuleCatalogBase"/> has been validated already.
            </summary>
        </member>
        <member name="P:Prism.Modularity.ModuleCatalogBase.GrouplessModules">
            <summary>
            Returns the list of <see cref="T:Prism.Modularity.IModuleInfo"/>s that are not contained within any <see cref="T:Prism.Modularity.IModuleInfoGroup"/>.
            </summary>
            <value>The groupless modules.</value>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.Load">
            <summary>
            Loads the catalog if necessary.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.GetDependentModules(Prism.Modularity.IModuleInfo)">
            <summary>
            Return the list of <see cref="T:Prism.Modularity.IModuleInfo"/>s that <paramref name="moduleInfo"/> depends on.
            </summary>
            <remarks>
            If  the <see cref="T:Prism.Modularity.IModuleCatalog"/> was not yet validated, this method will call <see cref="M:Prism.Modularity.ModuleCatalogBase.Validate"/>.
            </remarks>
            <param name="moduleInfo">The <see cref="T:Prism.Modularity.IModuleInfo"/> to get the </param>
            <returns>An enumeration of <see cref="T:Prism.Modularity.IModuleInfo"/> that <paramref name="moduleInfo"/> depends on.</returns>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.CompleteListWithDependencies(System.Collections.Generic.IEnumerable{Prism.Modularity.IModuleInfo})">
            <summary>
            Returns a list of <see cref="T:Prism.Modularity.IModuleInfo"/>s that contain both the <see cref="T:Prism.Modularity.IModuleInfo"/>s in
            <paramref name="modules"/>, but also all the modules they depend on.
            </summary>
            <param name="modules">The modules to get the dependencies for.</param>
            <returns>
            A list of <see cref="T:Prism.Modularity.IModuleInfo"/> that contains both all <see cref="T:Prism.Modularity.IModuleInfo"/>s in <paramref name="modules"/>
            but also all the <see cref="T:Prism.Modularity.IModuleInfo"/> they depend on.
            </returns>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.Validate">
            <summary>
            Validates the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
            <exception cref="T:Prism.Modularity.ModularityException">When validation of the <see cref="T:Prism.Modularity.IModuleCatalog"/> fails.</exception>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.AddModule(Prism.Modularity.IModuleInfo)">
            <summary>
            Adds a <see cref="T:Prism.Modularity.IModuleInfo"/> to the <see cref="T:Prism.Modularity.IModuleCatalog"/>.
            </summary>
            <param name="moduleInfo">The <see cref="T:Prism.Modularity.IModuleInfo"/> to add.</param>
            <returns>The <see cref="T:Prism.Modularity.IModuleCatalog"/> for easily adding multiple modules.</returns>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.Initialize">
            <summary>
            Initializes the catalog, which may load and validate the modules.
            </summary>
            <exception cref="T:Prism.Modularity.ModularityException">When validation of the <see cref="T:Prism.Modularity.ModuleCatalogBase"/> fails, because this method calls <see cref="M:Prism.Modularity.ModuleCatalogBase.Validate"/>.</exception>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.SolveDependencies(System.Collections.Generic.IEnumerable{Prism.Modularity.IModuleInfo})">
            <summary>
            Checks for cyclic dependencies, by calling the dependency solver.
            </summary>
            <param name="modules">the.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.ValidateDependencies(System.Collections.Generic.IEnumerable{Prism.Modularity.IModuleInfo})">
            <summary>
            Ensures that all the dependencies within <paramref name="modules"/> refer to <see cref="T:Prism.Modularity.IModuleInfo"/>s
            within that list.
            </summary>
            <param name="modules">The modules to validate modules for.</param>
            <exception cref="T:Prism.Modularity.ModularityException">
            Throws if a <see cref="T:Prism.Modularity.IModuleInfo"/> in <paramref name="modules"/> depends on a module that's
            not in <paramref name="modules"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws if <paramref name="modules"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.InnerLoad">
            <summary>
            Does the actual work of loading the catalog.  The base implementation does nothing.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.Sort(System.Collections.Generic.IEnumerable{Prism.Modularity.IModuleInfo})">
            <summary>
            Sorts a list of <see cref="T:Prism.Modularity.IModuleInfo"/>s. This method is called by <see cref="M:Prism.Modularity.ModuleCatalogBase.CompleteListWithDependencies(System.Collections.Generic.IEnumerable{Prism.Modularity.IModuleInfo})"/>
            to return a sorted list.
            </summary>
            <param name="modules">The <see cref="T:Prism.Modularity.IModuleInfo"/>s to sort.</param>
            <returns>Sorted list of <see cref="T:Prism.Modularity.IModuleInfo"/>s</returns>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.ValidateUniqueModules">
            <summary>
            Makes sure all modules have an Unique name.
            </summary>
            <exception cref="T:Prism.Modularity.DuplicateModuleException">
            Thrown if the names of one or more modules are not unique.
            </exception>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.ValidateDependencyGraph">
            <summary>
            Ensures that there are no cyclic dependencies.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.ValidateCrossGroupDependencies">
            <summary>
            Ensures that there are no dependencies between modules on different groups.
            </summary>
            <remarks>
            A groupless module can only depend on other groupless modules.
            A module within a group can depend on other modules within the same group and/or on groupless modules.
            </remarks>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.ValidateDependenciesInitializationMode">
            <summary>
            Ensures that there are no modules marked to be loaded <see cref="F:Prism.Modularity.InitializationMode.WhenAvailable"/>
            depending on modules loaded <see cref="F:Prism.Modularity.InitializationMode.OnDemand"/>
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.GetDependentModulesInner(Prism.Modularity.IModuleInfo)">
            <summary>
            Returns the <see cref="T:Prism.Modularity.IModuleInfo"/> on which the received module depends on.
            </summary>
            <param name="moduleInfo">Module whose dependant modules are requested.</param>
            <returns>Collection of <see cref="T:Prism.Modularity.IModuleInfo"/> dependants of <paramref name="moduleInfo"/>.</returns>
        </member>
        <member name="M:Prism.Modularity.ModuleCatalogBase.EnsureCatalogValidated">
            <summary>
            Ensures that the catalog is validated.
            </summary>
        </member>
        <member name="T:Prism.Modularity.ModuleDependencyAttribute">
            <summary>
            Specifies that the current module has a dependency on another module. This attribute should be used on classes that implement <see cref="T:Prism.Modularity.IModule"/>.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Modularity.ModuleDependencyAttribute"/>.
            </summary>
            <param name="moduleName">The name of the module that this module is dependant upon.</param>
        </member>
        <member name="P:Prism.Modularity.ModuleDependencyAttribute.ModuleName">
            <summary>
            Gets the name of the module that this module is dependant upon.
            </summary>
            <value>The name of the module that this module is dependant upon.</value>
        </member>
        <member name="T:Prism.Modularity.ModuleDependencySolver">
            <summary>
            Used by <see cref="T:Prism.Modularity.IModuleInitializer"/> to get the load sequence
            for the modules to load according to their dependencies.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleDependencySolver.AddModule(System.String)">
            <summary>
            Adds a module to the solver.
            </summary>
            <param name="name">The name that uniquely identifies the module.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleDependencySolver.AddDependency(System.String,System.String)">
            <summary>
            Adds a module dependency between the modules specified by dependingModule and
            dependentModule.
            </summary>
            <param name="dependingModule">The name of the module with the dependency.</param>
            <param name="dependentModule">The name of the module dependingModule
            depends on.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleDependencySolver.Solve">
            <summary>
            Calculates an ordered vector according to the defined dependencies.
            Non-dependant modules appears at the beginning of the resulting array.
            </summary>
            <returns>The resulting ordered list of modules.</returns>
            <exception cref="T:Prism.Modularity.CyclicDependencyFoundException">This exception is thrown
            when a cycle is found in the defined dependency graph.</exception>
        </member>
        <member name="P:Prism.Modularity.ModuleDependencySolver.ModuleCount">
            <summary>
            Gets the number of modules added to the solver.
            </summary>
            <value>The number of modules.</value>
        </member>
        <member name="T:Prism.Modularity.ModuleDownloadProgressChangedEventArgs">
            <summary>
            Provides progress information as a module downloads.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleDownloadProgressChangedEventArgs.#ctor(Prism.Modularity.IModuleInfo,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleDownloadProgressChangedEventArgs"/> class.
            </summary>
            <param name="moduleInfo">The module info.</param>
            <param name="bytesReceived">The bytes received.</param>
            <param name="totalBytesToReceive">The total bytes to receive.</param>
        </member>
        <member name="P:Prism.Modularity.ModuleDownloadProgressChangedEventArgs.ModuleInfo">
            <summary>
            Gets the module info.
            </summary>
            <value>The module info.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleDownloadProgressChangedEventArgs.BytesReceived">
            <summary>
            Gets the bytes received.
            </summary>
            <value>The bytes received.</value>
        </member>
        <member name="P:Prism.Modularity.ModuleDownloadProgressChangedEventArgs.TotalBytesToReceive">
            <summary>
            Gets the total bytes to receive.
            </summary>
            <value>The total bytes to receive.</value>
        </member>
        <member name="T:Prism.Modularity.ModuleInitializeException">
            <summary>
            Exception thrown by <see cref="T:Prism.Modularity.IModuleInitializer"/> implementations whenever 
            a module fails to load.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializeException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleInitializeException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleInitializeException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializeException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes the exception with a particular module and error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleAssembly">The assembly where the module is located.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializeException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception 
            that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleAssembly">The assembly where the module is located.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializeException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleInitializeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Prism.Modularity.ModuleNotFoundException">
            <summary>
            Exception thrown when a requested <see cref="F:Prism.Modularity.InitializationMode.OnDemand"/> <see cref="T:Prism.Modularity.IModule"/> was not found.
            </summary>
            <summary>
            Exception thrown when a requested <see cref="T:Prism.Modularity.IModuleInfo"/> is not found.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleNotFoundException" /> class.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleNotFoundException" /> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
            </param>
        </member>
        <member name="M:Prism.Modularity.ModuleNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleNotFoundException" /> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
            </param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Prism.Modularity.ModuleNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Modularity.ModuleNotFoundException"/> class
            with the serialization data.
            </summary>
            <param name="info">Holds the serialized object data about the exception being thrown.</param>
            <param name="context">Contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Prism.Modularity.ModuleState">
            <summary>
            Defines the states a <see cref="T:Prism.Modularity.IModuleInfo"/> can be in, with regards to the module loading and initialization process. 
            </summary>
        </member>
        <member name="F:Prism.Modularity.ModuleState.NotStarted">
            <summary>
            Initial state for <see cref="T:Prism.Modularity.IModuleInfo"/>s. The <see cref="T:Prism.Modularity.IModuleInfo"/> is defined, 
            but it has not been loaded, retrieved or initialized yet.
            </summary>
        </member>
        <member name="F:Prism.Modularity.ModuleState.LoadingTypes">
            <summary>
            The assembly that contains the type of the module is currently being loaded.
            </summary>
            <remarks>
            Used in Wpf to load a module dynamically
            </remarks>
        </member>
        <member name="F:Prism.Modularity.ModuleState.ReadyForInitialization">
            <summary>
            The assembly that holds the Module is present. This means the type of the <see cref="T:Prism.Modularity.IModule"/> can be instantiated and initialized. 
            </summary>
        </member>
        <member name="F:Prism.Modularity.ModuleState.Initializing">
            <summary>
            The module is currently Initializing, by the <see cref="T:Prism.Modularity.IModuleInitializer"/>
            </summary>
        </member>
        <member name="F:Prism.Modularity.ModuleState.Initialized">
            <summary>
            The module is initialized and ready to be used. 
            </summary>
        </member>
        <member name="T:Prism.Modularity.ModuleTypeLoadingException">
            <summary>
            Exception thrown by <see cref="T:Prism.Modularity.IModuleManager"/> implementations whenever 
            a module fails to retrieve.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoadingException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoadingException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoadingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoadingException.#ctor(System.String,System.String)">
            <summary>
            Initializes the exception with a particular module and error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoadingException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Modularity.ModuleTypeLoadingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Prism.Mvvm.BindableBase">
            <summary>
            Implementation of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> to simplify models.
            </summary>
        </member>
        <member name="E:Prism.Mvvm.BindableBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Prism.Mvvm.BindableBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if a property already matches a desired value. Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">Name of the property used to notify listeners. This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value.</returns>
        </member>
        <member name="M:Prism.Mvvm.BindableBase.SetProperty``1(``0@,``0,System.Action,System.String)">
            <summary>
            Checks if a property already matches a desired value. Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">Name of the property used to notify listeners. This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <param name="onChanged">Action that is called after the property value has been changed.</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value.</returns>
        </member>
        <member name="M:Prism.Mvvm.BindableBase.RaisePropertyChanged(System.String)">
            <summary>
            Raises this object's PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners. This
            value is optional and can be provided automatically when invoked from compilers
            that support <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
        </member>
        <member name="M:Prism.Mvvm.BindableBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises this object's PropertyChanged event.
            </summary>
            <param name="args">The PropertyChangedEventArgs</param>
        </member>
        <member name="T:Prism.Mvvm.ErrorsContainer`1">
            <summary>
            Manages validation errors for an object, notifying when the error state changes.
            </summary>
            <typeparam name="T">The type of the error object.</typeparam>
        </member>
        <member name="F:Prism.Mvvm.ErrorsContainer`1.raiseErrorsChanged">
            <summary>
            Delegate to be called when raiseErrorsChanged is invoked.
            </summary>
        </member>
        <member name="F:Prism.Mvvm.ErrorsContainer`1.validationResults">
            <summary>
            A map from property name to a <see cref="T:System.Collections.Generic.List`1"/> of the errors and sources.
            </summary>
        </member>
        <member name="M:Prism.Mvvm.ErrorsContainer`1.#ctor(System.Action{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Mvvm.ErrorsContainer`1"/> class.
            </summary>
            <param name="raiseErrorsChanged">The action that is invoked when errors are added for an object.</param>
        </member>
        <member name="P:Prism.Mvvm.ErrorsContainer`1.HasErrors">
            <summary>
            Gets a value indicating whether the object has validation errors. 
            </summary>
        </member>
        <member name="M:Prism.Mvvm.ErrorsContainer`1.GetErrors">
            <summary>
            Returns all the errors in the container.
            </summary>
            <returns>The dictionary of errors per property.</returns>
        </member>
        <member name="M:Prism.Mvvm.ErrorsContainer`1.GetErrors(System.String)">
            <summary>
            Gets the validation errors for a specified property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>The validation errors of type <typeparamref name="T"/> for the property.</returns>
        </member>
        <member name="M:Prism.Mvvm.ErrorsContainer`1.ClearErrors">
            <summary>
            Clears all errors.
            </summary>
        </member>
        <member name="M:Prism.Mvvm.ErrorsContainer`1.ClearErrors``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Clears the errors for the property indicated by the property expression.
            </summary>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="propertyExpression">The expression indicating a property.</param>
            <example>
            container.ClearErrors(()=>SomeProperty);
            </example>
        </member>
        <member name="M:Prism.Mvvm.ErrorsContainer`1.ClearErrors(System.String)">
            <summary>
            Clears the errors for a property.
            </summary>
            <param name="propertyName">The name of the property for which to clear errors.</param>
            <example>
            container.ClearErrors("SomeProperty");
            </example>
        </member>
        <member name="M:Prism.Mvvm.ErrorsContainer`1.SetErrors``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the validation errors for the specified property.
            </summary>
            <typeparam name="TProperty">The property type for which to set errors.</typeparam>
            <param name="propertyExpression">The <see cref="T:System.Linq.Expressions.Expression"/> indicating the property.</param>
            <param name="propertyErrors">The list of errors to set for the property.</param>
        </member>
        <member name="M:Prism.Mvvm.ErrorsContainer`1.SetErrors(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the validation errors for the specified property.
            </summary>
            <remarks>
            If a change is detected then the errors changed event is raised.
            </remarks>
            <param name="propertyName">The name of the property.</param>
            <param name="newValidationResults">The new validation errors.</param>
        </member>
        <member name="T:Prism.Mvvm.IViewRegistry">
            <summary>
            Provides an abstraction layer for ViewRegistration that can be mocked
            </summary>
        </member>
        <member name="P:Prism.Mvvm.IViewRegistry.Registrations">
            <summary>
            The existing ViewRegistrations
            </summary>
        </member>
        <member name="M:Prism.Mvvm.IViewRegistry.CreateView(Prism.Ioc.IContainerProvider,System.String)">
            <summary>
            Creates a view given a specified instance of the Container and a navigation name
            </summary>
            <param name="container"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.Mvvm.IViewRegistry.GetViewType(System.String)">
            <summary>
            Gets the ViewType for a specified navigation name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.Mvvm.IViewRegistry.GetViewModelNavigationKey(System.Type)">
            <summary>
            Gets the navigation name for a specified ViewModelType
            </summary>
            <param name="viewModelType"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.Mvvm.IViewRegistry.ViewsOfType(System.Type)">
            <summary>
            Gets the Registrations where the View is of a given base type
            </summary>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.Mvvm.IViewRegistry.IsRegistered(System.String)">
            <summary>
            Confirms whether the given navigation name has been registered
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Prism.Mvvm.PropertySupport">
            <summary>
             Provides support for extracting property information based on a property expression.
            </summary>
        </member>
        <member name="M:Prism.Mvvm.PropertySupport.ExtractPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Extracts the property name from a property expression.
            </summary>
            <typeparam name="T">The object type containing the property specified in the expression.</typeparam>
            <param name="propertyExpression">The property expression (e.g. p => p.PropertyName)</param>
            <returns>The name of the property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="propertyExpression"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the expression is:<br/>
                Not a <see cref="T:System.Linq.Expressions.MemberExpression"/><br/>
                The <see cref="T:System.Linq.Expressions.MemberExpression"/> does not represent a property.<br/>
                Or, the property is static.
            </exception>
        </member>
        <member name="M:Prism.Mvvm.PropertySupport.ExtractPropertyNameFromLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Extracts the property name from a LambdaExpression.
            </summary>
            <param name="expression">The LambdaExpression</param>
            <returns>The name of the property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="expression"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the expression is:<br/>
                The <see cref="T:System.Linq.Expressions.MemberExpression"/> does not represent a property.<br/>
                Or, the property is static.
            </exception>
        </member>
        <member name="T:Prism.Mvvm.ViewModelLocationProvider">
            <summary>
            The ViewModelLocationProvider class locates the view model for the view that has the AutoWireViewModelChanged attached property set to true.
            The view model will be located and injected into the view's DataContext. To locate the view model, two strategies are used: First the ViewModelLocationProvider
            will look to see if there is a view model factory registered for that view, if not it will try to infer the view model using a convention based approach.
            This class also provides methods for registering the view model factories,
            and also to override the default view model factory and the default view type to view model type resolver.
            </summary>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.Reset">
            <summary>
            Resets the ViewModelLocationProvider for Unit Testing Purposes.
            </summary>
        </member>
        <member name="F:Prism.Mvvm.ViewModelLocationProvider._factories">
            <summary>
            A dictionary that contains all the registered factories for the views.
            </summary>
        </member>
        <member name="F:Prism.Mvvm.ViewModelLocationProvider._typeFactories">
            <summary>
            A dictionary that contains all the registered ViewModel types for the views.
            </summary>
        </member>
        <member name="F:Prism.Mvvm.ViewModelLocationProvider._defaultViewModelFactory">
            <summary>
            The default view model factory which provides the ViewModel type as a parameter.
            </summary>
        </member>
        <member name="F:Prism.Mvvm.ViewModelLocationProvider._defaultViewModelFactoryWithViewParameter">
            <summary>
            ViewModelFactory that provides the View instance and ViewModel type as parameters.
            </summary>
        </member>
        <member name="F:Prism.Mvvm.ViewModelLocationProvider._defaultViewTypeToViewModelTypeResolver">
            <summary>
            Default view type to view model type resolver, assumes the view model is in same assembly as the view type, but in the "ViewModels" namespace.
            </summary>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.SetDefaultViewModelFactory(System.Func{System.Type,System.Object})">
            <summary>
            Sets the default view model factory.
            </summary>
            <param name="viewModelFactory">The view model factory which provides the ViewModel type as a parameter.</param>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.SetDefaultViewModelFactory(System.Func{System.Object,System.Type,System.Object})">
            <summary>
            Sets the default view model factory.
            </summary>
            <param name="viewModelFactory">The view model factory that provides the View instance and ViewModel type as parameters.</param>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.SetDefaultViewTypeToViewModelTypeResolver(System.Func{System.Type,System.Type})">
            <summary>
            Sets the default view type to view model type resolver.
            </summary>
            <param name="viewTypeToViewModelTypeResolver">The view type to view model type resolver.</param>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.SetDefaultViewToViewModelTypeResolver(System.Func{System.Object,System.Type})">
            <summary>
            Sets the default ViewModel Type Resolver given the View instance. This can be used to evaluate the View for
            custom attributes or Attached Properties to determine the ViewModel Type.
            </summary> 
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.AutoWireViewModelChanged(System.Object,System.Action{System.Object,System.Object})">
            <summary>
            Automatically looks up the viewmodel that corresponds to the current view, using two strategies:
            It first looks to see if there is a mapping registered for that view, if not it will fallback to the convention based approach.
            </summary>
            <param name="view">The dependency object, typically a view.</param>
            <param name="setDataContextCallback">The call back to use to create the binding between the View and ViewModel</param>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.GetViewModelForView(System.Object)">
            <summary>
            Gets the view model for the specified view.
            </summary>
            <param name="view">The view that the view model wants.</param>
            <returns>The ViewModel that corresponds to the view passed as a parameter.</returns>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.GetViewModelTypeForView(System.Type)">
            <summary>
            Gets the ViewModel type for the specified view.
            </summary>
            <param name="view">The View that the ViewModel wants.</param>
            <returns>The ViewModel type that corresponds to the View.</returns>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.Register``1(System.Func{System.Object})">
            <summary>
            Registers the ViewModel factory for the specified view type.
            </summary>
            <typeparam name="T">The View</typeparam>
            <param name="factory">The ViewModel factory.</param>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.Register(System.String,System.Func{System.Object})">
            <summary>
            Registers the ViewModel factory for the specified view type name.
            </summary>
            <param name="viewTypeName">The name of the view type.</param>
            <param name="factory">The ViewModel factory.</param>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.Register``2">
            <summary>
            Registers a ViewModel type for the specified view type.
            </summary>
            <typeparam name="T">The View</typeparam>
            <typeparam name="VM">The ViewModel</typeparam>
        </member>
        <member name="M:Prism.Mvvm.ViewModelLocationProvider.Register(System.String,System.Type)">
            <summary>
            Registers a ViewModel type for the specified view.
            </summary>
            <param name="viewTypeName">The View type name</param>
            <param name="viewModelType">The ViewModel type</param>
        </member>
        <member name="M:Prism.Mvvm.ViewRegistryBase`1.Autowire(`0)">
            <summary>
            Calls the platform code to Autowire the View if it does not have a ViewModel already
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Prism.Mvvm.ViewRegistryBase`1.SetNavigationNameProperty(`0,System.String)">
            <summary>
            Sets the specified navigation name that was used to Navigate. This can be useful for back navigation
            </summary>
            <param name="view"></param>
            <param name="name"></param>
        </member>
        <member name="M:Prism.Mvvm.ViewRegistryBase`1.SetViewModelProperty(`0,System.Type)">
            <summary>
            Sets the ViewModel Type to resolve
            </summary>
            <param name="view"></param>
            <param name="viewModelType"></param>
        </member>
        <member name="M:Prism.Mvvm.ViewRegistryBase`1.SetContainerProvider(`0,Prism.Ioc.IContainerProvider)">
            <summary>
            Sets the IContainerProvider making it easier to access on the given View
            </summary>
            <param name="view"></param>
            <param name="container"></param>
        </member>
        <member name="T:Prism.Navigation.IDestructible">
            <summary>
            Interface for objects that require cleanup of resources prior to Disposal
            </summary>
        </member>
        <member name="M:Prism.Navigation.IDestructible.Destroy">
            <summary>
            This method allows cleanup of any resources used by your View/ViewModel 
            </summary>
        </member>
        <member name="T:Prism.Navigation.INavigationParameters">
            <summary>
            Provides a way to pass parameters during navigation.
            </summary>
        </member>
        <member name="T:Prism.Navigation.INavigationParametersInternal">
            <summary>
            Used to set internal parameters used by Prism
            </summary>
        </member>
        <member name="M:Prism.Navigation.INavigationParametersInternal.Add(System.String,System.Object)">
            <summary>
            Adds the key and value to the parameters Collection
            </summary>
            <param name="key">The key to reference this value in the parameters collection.</param>
            <param name="value">The value of the parameter to store</param>
        </member>
        <member name="M:Prism.Navigation.INavigationParametersInternal.ContainsKey(System.String)">
            <summary>
            Checks collection for presence of key
            </summary>
            <param name="key">The key to check in the Collection</param>
            <returns><c>true</c> if key exists; else returns <c>false</c>.</returns>
        </member>
        <member name="M:Prism.Navigation.INavigationParametersInternal.GetValue``1(System.String)">
            <summary>
            Returns the value of the member referenced by key
            </summary>
            <typeparam name="T">The type of object to be returned</typeparam>
            <param name="key">The key for the value to be returned</param>
            <returns>Returns a matching parameter of <typeparamref name="T"/> if one exists in the Collection</returns>
        </member>
        <member name="T:Prism.Navigation.INavigationResult">
            <summary>
            Provides a wrapper for a Navigation Result
            </summary>
        </member>
        <member name="P:Prism.Navigation.INavigationResult.Success">
            <summary>
            Indicates that the navigation was successful and no Navigation Errors occurred
            </summary>
        </member>
        <member name="P:Prism.Navigation.INavigationResult.Cancelled">
            <summary>
            If <c>true</c> this indicates that the Navigation Event was cancelled.
            </summary>
        </member>
        <member name="P:Prism.Navigation.INavigationResult.Exception">
            <summary>
            The Exception if one occurred.
            </summary>
        </member>
        <member name="P:Prism.Navigation.INavigationResult.Context">
            <summary>
            If the <see cref="T:Prism.Navigation.INavigationResult"/> is the result of Region Navigation
            This will provide the associate <see cref="T:Prism.Navigation.Regions.NavigationContext"/>
            </summary>
        </member>
        <member name="T:Prism.Navigation.NavigationException">
            <summary>
            Represents errors that occurred during the navigation.
            </summary>
        </member>
        <member name="F:Prism.Navigation.NavigationException.CannotPopApplicationMainPage">
            <summary>
            The <see cref="T:Prism.Navigation.NavigationException"/> Message returned when cannot pop application main page.
            </summary>
        </member>
        <member name="F:Prism.Navigation.NavigationException.CannotGoBackFromRoot">
            <summary>
            The <see cref="T:Prism.Navigation.NavigationException"/> Message returned when cannot go back from root.
            </summary>
        </member>
        <member name="F:Prism.Navigation.NavigationException.GoBackRequiresNavigationPage">
            <summary>
            The <see cref="T:Prism.Navigation.NavigationException"/> Message returned when GoBackAsync can only be called when the calling Page has been navigated.
            </summary>
        </member>
        <member name="F:Prism.Navigation.NavigationException.GoBackToRootRequiresNavigationPage">
            <summary>
            The <see cref="T:Prism.Navigation.NavigationException"/> Message returned when GoBackToRootAsync can only be called when the calling Page is within a NavigationPage.
            </summary>
        </member>
        <member name="F:Prism.Navigation.NavigationException.RelativeNavigationRequiresNavigationPage">
            <summary>
            The <see cref="T:Prism.Navigation.NavigationException"/> Message returned when removing views using the relative '../' syntax while navigating is only supported within a NavigationPage.
            </summary>
        </member>
        <member name="F:Prism.Navigation.NavigationException.IConfirmNavigationReturnedFalse">
            <summary>
            The <see cref="T:Prism.Navigation.NavigationException"/> Message returned when IConfirmNavigation returned false.
            </summary>
        </member>
        <member name="F:Prism.Navigation.NavigationException.NoPageIsRegistered">
            <summary>
            The <see cref="T:Prism.Navigation.NavigationException"/> Message returned when no Page has been registered with the provided key.
            </summary>
        </member>
        <member name="F:Prism.Navigation.NavigationException.ErrorCreatingPage">
            <summary>
            The <see cref="T:Prism.Navigation.NavigationException"/> Message returned when an error occurred while resolving the page.
            </summary>
        </member>
        <member name="F:Prism.Navigation.NavigationException.UnsupportedMauiCreation">
            <summary>
            The <see cref="T:Prism.Navigation.NavigationException"/> Message returned when an unsupported Maui Exception occurred.
            </summary>
        </member>
        <member name="F:Prism.Navigation.NavigationException.UnsupportedMauiNavigation">
            <summary>
            The <see cref="T:Prism.Navigation.NavigationException"/> Message returned when an unsupported event occurred while Navigating.
            </summary>
        </member>
        <member name="F:Prism.Navigation.NavigationException.ErrorCreatingViewModel">
            <summary>
            The <see cref="T:Prism.Navigation.NavigationException"/> Message returned when a dependency issue occurred while resolving the ViewModel..
            </summary>
        </member>
        <member name="F:Prism.Navigation.NavigationException.MvvmPatternBreak">
            <summary>
            The <see cref="T:Prism.Navigation.NavigationException"/> Message returned when you have referenced a View type and are likely breaking the MVVM pattern.
            </summary>
        </member>
        <member name="F:Prism.Navigation.NavigationException.UnknownException">
            <summary>
            The <see cref="T:Prism.Navigation.NavigationException"/> Message returned when an unknown error occurred.
            </summary>
        </member>
        <member name="M:Prism.Navigation.NavigationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.NavigationException"/>
            </summary>
        </member>
        <member name="M:Prism.Navigation.NavigationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.NavigationException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Prism.Navigation.NavigationException.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.NavigationException"/> class with a specified error message and a view instance.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="view">The view instance.</param>
        </member>
        <member name="M:Prism.Navigation.NavigationException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.NavigationException"/> class with a specified error message and a key used for the failed navigation.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="navigationKey">The key used for the failed navigation.</param>
        </member>
        <member name="M:Prism.Navigation.NavigationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.NavigationException"/> class with a specified error message, a key used for the failed navigation, and a reference
            to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="navigationKey">The key used for the failed navigation.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Navigation.NavigationException.#ctor(System.String,System.Object,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.NavigationException"/> class with a specified error message, a view instance and a reference
            to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="view">The view instance.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Navigation.NavigationException.#ctor(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.NavigationException"/> class with a specified error message, a key used for the failed navigation, a view instance,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="navigationKey">The key used for the failed navigation.</param>
            <param name="view">The view instance.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="P:Prism.Navigation.NavigationException.View">
            <summary>
            The View Instance
            </summary>
        </member>
        <member name="P:Prism.Navigation.NavigationException.NavigationKey">
            <summary>
            The key used for the failed navigation
            </summary>
        </member>
        <member name="T:Prism.Navigation.NavigationParameters">
            <summary>
            Represents Navigation parameters.
            </summary>
            <remarks>
            This class can be used to to pass object parameters during Navigation. 
            </remarks>
        </member>
        <member name="M:Prism.Navigation.NavigationParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.NavigationParameters"/> class.
            </summary>
        </member>
        <member name="M:Prism.Navigation.NavigationParameters.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.NavigationParameters"/> class with a query string.
            </summary>
            <param name="query">The query string.</param>
        </member>
        <member name="T:Prism.Navigation.NavigationResult">
            <summary>
            Default implementation for the <see cref="T:Prism.Navigation.INavigationResult"/>
            </summary>
        </member>
        <member name="M:Prism.Navigation.NavigationResult.#ctor">
            <summary>
            Initializes a new Navigation Result
            </summary>
        </member>
        <member name="M:Prism.Navigation.NavigationResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new NavigationResult
            </summary>
            <param name="success"></param>
        </member>
        <member name="M:Prism.Navigation.NavigationResult.#ctor(System.Exception)">
            <summary>
            Initializes a new NavigationResult with an <see cref="P:Prism.Navigation.NavigationResult.Exception"/>
            </summary>
            <param name="ex">The <see cref="P:Prism.Navigation.NavigationResult.Exception"/> encountered as part of the navigation.</param>
        </member>
        <member name="M:Prism.Navigation.NavigationResult.#ctor(Prism.Navigation.Regions.NavigationContext,System.Boolean)">
            <summary>
            Initializes a new NavigationResult
            </summary>
            <param name="context"></param>
            <param name="success"></param>
        </member>
        <member name="M:Prism.Navigation.NavigationResult.#ctor(Prism.Navigation.Regions.NavigationContext,System.Exception)">
            <summary>
            Initializes a new NavigationResult
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
        </member>
        <member name="P:Prism.Navigation.NavigationResult.Success">
            <inheritdoc />
        </member>
        <member name="P:Prism.Navigation.NavigationResult.Cancelled">
            <inheritdoc />
        </member>
        <member name="P:Prism.Navigation.NavigationResult.Exception">
            <inheritdoc />
        </member>
        <member name="P:Prism.Navigation.NavigationResult.Context">
            <inheritdoc />
        </member>
        <member name="T:Prism.Navigation.Regions.IConfirmNavigationRequest">
            <summary>
            Provides a way for objects involved in navigation to determine if a navigation request should continue.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.IConfirmNavigationRequest.ConfirmNavigationRequest(Prism.Navigation.Regions.NavigationContext,System.Action{System.Boolean})">
            <summary>
            Determines whether this instance accepts being navigated away from.
            </summary>
            <param name="navigationContext">The navigation context.</param>
            <param name="continuationCallback">The callback to indicate when navigation can proceed.</param>
            <remarks>
            Implementors of this method do not need to invoke the callback before this method is completed,
            but they must ensure the callback is eventually invoked.
            </remarks>
        </member>
        <member name="T:Prism.Navigation.Regions.IJournalAware">
            <summary>
            Provides a way for objects involved in navigation to opt-out of being added to the IRegionNavigationJournal backstack.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.IJournalAware.PersistInHistory">
            <summary>
            Determines if the current object is going to be added to the navigation journal's backstack.
            </summary>
            <returns>True, add to backstack. False, remove from backstack.</returns>
        </member>
        <member name="T:Prism.Navigation.Regions.INavigateAsync">
            <summary>
            Provides methods to perform navigation.
            </summary>
            <remarks>
            Convenience overloads for the methods in this interface can be found as extension methods on the
            <see cref="T:Prism.Navigation.Regions.NavigationAsyncExtensions"/> class.
            </remarks>
        </member>
        <member name="M:Prism.Navigation.Regions.INavigateAsync.RequestNavigate(System.Uri,System.Action{Prism.Navigation.NavigationResult},Prism.Navigation.INavigationParameters)">
            <summary>
            Initiates navigation to the target specified by the <see cref="T:System.Uri"/>.
            </summary>
            <param name="target">The navigation target</param>
            <param name="navigationCallback">The callback executed when the navigation request is completed.</param>
            <param name="navigationParameters">The navigation parameters specific to the navigation request.</param>
            <remarks>
            Convenience overloads for this method can be found as extension methods on the
            <see cref="T:Prism.Navigation.Regions.NavigationAsyncExtensions"/> class.
            </remarks>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegion">
            <summary>
            Defines a model that can be used to compose views.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegion.Views">
            <summary>
            Gets a readonly view of the collection of views in the region.
            </summary>
            <value>An <see cref="T:Prism.Navigation.Regions.IViewsCollection"/> of all the added views.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegion.ActiveViews">
            <summary>
            Gets a readonly view of the collection of all the active views in the region.
            </summary>
            <value>An <see cref="T:Prism.Navigation.Regions.IViewsCollection"/> of all the active views.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegion.Context">
            <summary>
            Gets or sets a context for the region. This value can be used by the user to share context with the views.
            </summary>
            <value>The context value to be shared.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegion.Name">
            <summary>
            Gets the name of the region that uniquely identifies the region within a <see cref="T:Prism.Navigation.Regions.IRegionManager"/>.
            </summary>
            <value>The name of the region.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegion.SortComparison">
            <summary>
            Gets or sets the comparison used to sort the views.
            </summary>
            <value>The comparison to use.</value>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegion.Add(System.String)">
            <overloads>Adds a new view to the region.</overloads>
             <summary>
             Adds a new view to the region.
             </summary>
             <param name="viewName">The view to add.</param>
             <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/> that is set on the view. It will be the current region manager when using this overload.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegion.Add(System.Object)">
            <overloads>Adds a new view to the region.</overloads>
             <summary>
             Adds a new view to the region.
             </summary>
             <param name="view">The view to add.</param>
             <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/> that is set on the view. It will be the current region manager when using this overload.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegion.Add(System.Object,System.String)">
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <param name="viewName">The name of the view. This can be used to retrieve it later by calling <see cref="M:Prism.Navigation.Regions.IRegion.GetView(System.String)"/>.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/> that is set on the view. It will be the current region manager when using this overload.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegion.Add(System.Object,System.String,System.Boolean)">
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <param name="viewName">The name of the view. This can be used to retrieve it later by calling <see cref="M:Prism.Navigation.Regions.IRegion.GetView(System.String)"/>.</param>
            <param name="createRegionManagerScope">When <see langword="true"/>, the added view will receive a new instance of <see cref="T:Prism.Navigation.Regions.IRegionManager"/>, otherwise it will use the current region manager for this region.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/> that is set on the view.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegion.Remove(System.Object)">
            <summary>
            Removes the specified view from the region.
            </summary>
            <param name="view">The view to remove.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegion.RemoveAll">
            <summary>
            Removes all views from the region.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegion.Activate(System.Object)">
            <summary>
            Marks the specified view as active.
            </summary>
            <param name="view">The view to activate.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegion.Deactivate(System.Object)">
            <summary>
            Marks the specified view as inactive.
            </summary>
            <param name="view">The view to deactivate.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegion.GetView(System.String)">
            <summary>
            Returns the view instance that was added to the region using a specific name.
            </summary>
            <param name="viewName">The name used when adding the view to the region.</param>
            <returns>Returns the named view or <see langword="null"/> if the view with <paramref name="viewName"/> does not exist in the current region.</returns>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegion.RegionManager">
            <summary>
            Gets or sets the <see cref="T:Prism.Navigation.Regions.IRegionManager"/> that will be passed to the views when adding them to the region, unless the view is added by specifying createRegionManagerScope as <see langword="true" />.
            </summary>
            <value>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/> where this <see cref="T:Prism.Navigation.Regions.IRegion"/> is registered.</value>
            <remarks>This is usually used by implementations of <see cref="T:Prism.Navigation.Regions.IRegionManager"/> and should not be
            used by the developer explicitly.</remarks>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegion.Behaviors">
            <summary>
            Gets the collection of <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/>s that can extend the behavior of regions.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegion.NavigationService">
            <summary>
            Gets or sets the navigation service.
            </summary>
            <value>The navigation service.</value>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegionAdapter">
            <summary>
            Defines an interfaces to adapt an object and bind it to a new <see cref="T:Prism.Navigation.Regions.IRegion"/>.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionAdapter.Initialize(System.Object,System.String)">
            <summary>
            Adapts an object and binds it to a new <see cref="T:Prism.Navigation.Regions.IRegion"/>.
            </summary>
            <param name="regionTarget">The object to adapt.</param>
            <param name="regionName">The name of the region to be created.</param>
            <returns>The new instance of <see cref="T:Prism.Navigation.Regions.IRegion"/> that the <paramref name="regionTarget"/> is bound to.</returns>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegionAware">
            <summary>
            Provides a way for objects involved in navigation to be notified of navigation activities.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionAware.OnNavigatedTo(Prism.Navigation.Regions.NavigationContext)">
            <summary>
            Called when the implementer has been navigated to.
            </summary>
            <param name="navigationContext">The navigation context.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionAware.IsNavigationTarget(Prism.Navigation.Regions.NavigationContext)">
            <summary>
            Called to determine if this instance can handle the navigation request.
            </summary>
            <param name="navigationContext">The navigation context.</param>
            <returns>
            <see langword="true"/> if this instance accepts the navigation request; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionAware.OnNavigatedFrom(Prism.Navigation.Regions.NavigationContext)">
            <summary>
            Called when the implementer is being navigated away from.
            </summary>
            <param name="navigationContext">The navigation context.</param>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegionBehavior">
            <summary>
            Interface for allowing extensible behavior on regions.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegionBehavior.Region">
            <summary>
            The region that this behavior is extending.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionBehavior.Attach">
            <summary>
            Attaches the behavior to the specified region.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegionBehaviorCollection">
            <summary>
            Defines the interface for a collection of <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/> classes on a Region.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionBehaviorCollection.Add(System.String,Prism.Navigation.Regions.IRegionBehavior)">
            <summary>
            Adds a <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/> to the collection, using the specified key as an indexer.
            </summary>
            <param name="key">
            The key that specifies the type of <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/> that's added.
            </param>
            <param name="regionBehavior">The <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/> to add.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionBehaviorCollection.ContainsKey(System.String)">
            <summary>
            Checks if a <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/> with the specified key is already present.
            </summary>
            <param name="key">The key to use to find a particular <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/>.</param>
            <returns></returns>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegionBehaviorCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/> with the specified key.
            </summary>
            <value>The registered <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/></value>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegionBehaviorFactory">
            <summary>
            Interface for RegionBehaviorFactories. This factory allows the registration of the default set of RegionBehaviors, that will
            be added to the <see cref="T:Prism.Navigation.Regions.IRegionBehaviorCollection"/>s of all <see cref="T:Prism.Navigation.Regions.IRegion"/>s, unless overridden on a 'per-region' basis.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionBehaviorFactory.AddIfMissing(System.String,System.Type)">
            <summary>
            Adds a particular type of RegionBehavior if it was not already registered. the <paramref name="behaviorKey"/> string is used to check if the behavior is already present
            </summary>
            <param name="behaviorKey">The behavior key that's used to find if a certain behavior is already added.</param>
            <param name="behaviorType">Type of the behavior to add.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionBehaviorFactory.ContainsKey(System.String)">
            <summary>
            Determines whether a behavior with the specified key already exists
            </summary>
            <param name="behaviorKey">The behavior key.</param>
            <returns>
            <see langword="true"/> if a behavior with the specified key is present; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionBehaviorFactory.CreateFromKey(System.String)">
            <summary>
            Creates an instance of the BehaviorType that's registered using the specified key.
            </summary>
            <param name="key">The key that's used to register a behavior type.</param>
            <returns>The created behavior. </returns>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegionBehaviorFactoryExtensions">
            <summary>
            Extension methods for the IRegionBehaviorFactory.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionBehaviorFactoryExtensions.AddIfMissing``1(Prism.Navigation.Regions.IRegionBehaviorFactory)">
            <summary>
            Adds a particular type of RegionBehavior if it was not already registered. the Type Name is used to check if the behavior is already present
            </summary>
            <typeparam name="T">Type of the behavior to add.</typeparam>
            <param name="regionBehaviorFactory">The IRegionBehaviorFactory instance</param>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionBehaviorFactoryExtensions.AddIfMissing``1(Prism.Navigation.Regions.IRegionBehaviorFactory,System.String)">
            <summary>
            Adds a particular type of RegionBehavior if it was not already registered. the <paramref name="behaviorKey"/> string is used to check if the behavior is already present
            </summary>
            <typeparam name="T">Type of the behavior to add.</typeparam>
            <param name="regionBehaviorFactory">The IRegionBehaviorFactory instance</param>
            <param name="behaviorKey">The behavior key that's used to find if a certain behavior is already added.</param>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegionCollection">
            <summary>
            Defines a collection of <see cref="T:Prism.Navigation.Regions.IRegion"/> uniquely identified by their Name.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegionCollection.Item(System.String)">
            <summary>
            Gets the IRegion with the name received as index.
            </summary>
            <param name="regionName">Name of the region to be retrieved.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegion"/> identified with the requested name.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionCollection.Add(Prism.Navigation.Regions.IRegion)">
            <summary>
            Adds a <see cref="T:Prism.Navigation.Regions.IRegion"/> to the collection.
            </summary>
            <param name="region">Region to be added to the collection.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionCollection.Remove(System.String)">
            <summary>
            Removes a <see cref="T:Prism.Navigation.Regions.IRegion"/> from the collection.
            </summary>
            <param name="regionName">Name of the region to be removed.</param>
            <returns><see langword="true"/> if the region was removed from the collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionCollection.ContainsRegionWithName(System.String)">
            <summary>
            Checks if the collection contains a <see cref="T:Prism.Navigation.Regions.IRegion"/> with the name received as parameter.
            </summary>
            <param name="regionName">The name of the region to look for.</param>
            <returns><see langword="true"/> if the region is contained in the collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionCollection.Add(System.String,Prism.Navigation.Regions.IRegion)">
            <summary>
            Adds a region to the <see cref="T:Prism.Navigation.Regions.IRegionManager"/> with the name received as argument.
            </summary>
            <param name="regionName">The name to be given to the region.</param>
            <param name="region">The region to be added to the <see cref="T:Prism.Navigation.Regions.IRegionManager"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="region"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="regionName"/> and <paramref name="region"/>'s name do not match and the <paramref name="region"/> <see cref="P:Prism.Navigation.Regions.IRegion.Name"/> is not <see langword="null"/>.</exception>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegionManager">
            <summary>
            Defines an interface to manage a set of <see cref="T:Prism.Navigation.Regions.IRegion">regions</see> and to attach regions to objects (typically controls).
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegionManager.Regions">
            <summary>
            Gets a collection of <see cref="T:Prism.Navigation.Regions.IRegion"/> that identify each region by name. You can use this collection to add or remove regions to the current region manager.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManager.CreateRegionManager">
            <summary>
            Creates a new region manager.
            </summary>
            <returns>A new region manager that can be used as a different scope from the current region manager.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManager.AddToRegion(System.String,System.Object)">
            <summary>
            Add a view to the Views collection of a Region. Note that the region must already exist in this <see cref="T:Prism.Navigation.Regions.IRegionManager"/>.
            </summary>
            <param name="regionName">The name of the region to add a view to</param>
            <param name="view">The view to add to the views collection</param>
            <returns>The RegionManager, to easily add several views. </returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManager.AddToRegion(System.String,System.String)">
            <summary>
            Add a view to the Views collection of a Region. Note that the region must already exist in this <see cref="T:Prism.Navigation.Regions.IRegionManager"/>.
            </summary>
            <param name="regionName">The name of the region to add a view to</param>
            <param name="viewName">The view to add to the views collection</param>
            <returns>The RegionManager, to easily add several views. </returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManager.RegisterViewWithRegion(System.String,System.String)">
            <summary>
            Associate a view with a region, by registering a type. When the region gets displayed
            this type will be resolved using the ServiceLocator into a concrete instance. The instance
            will be added to the Views collection of the region
            </summary>
            <param name="regionName">The name of the region to associate the view with.</param>
            <param name="viewName">The name of the view to register with the <see cref="T:Prism.Navigation.Regions.IRegion"/>.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/>, for adding several views easily</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManager.RegisterViewWithRegion(System.String,System.Type)">
            <summary>
            Associate a view with a region, by registering a type. When the region gets displayed
            this type will be resolved using the ServiceLocator into a concrete instance. The instance
            will be added to the Views collection of the region
            </summary>
            <param name="regionName">The name of the region to associate the view with.</param>
            <param name="viewType">The type of the view to register with the  <see cref="T:Prism.Navigation.Regions.IRegion"/>.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/>, for adding several views easily</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManager.RegisterViewWithRegion(System.String,System.Func{Prism.Ioc.IContainerProvider,System.Object})">
            <summary>
            Associate a view with a region, using a delegate to resolve a concrete instance of the view.
            When the region gets displayed, this delegate will be called and the result will be added to the
            views collection of the region.
            </summary>
            <param name="regionName">The name of the region to associate the view with.</param>
            <param name="getContentDelegate">The delegate used to resolve a concrete instance of the view.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/>, for adding several views easily</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManager.RequestNavigate(System.String,System.Uri,System.Action{Prism.Navigation.NavigationResult},Prism.Navigation.INavigationParameters)">
            <summary>
            This method allows an IRegionManager to locate a specified region and navigate in it to the specified target Uri, passing a navigation callback and an instance of NavigationParameters, which holds a collection of object parameters.
            </summary>
            <param name="regionName">The name of the region where the navigation will occur.</param>
            <param name="target">A Uri that represents the target where the region will navigate.</param>
            <param name="navigationCallback">The navigation callback that will be executed after the navigation is completed.</param>
            <param name="navigationParameters">An instance of NavigationParameters, which holds a collection of object parameters.</param>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegionManagerExtensions">
            <summary>
            Common Extensions for the RegionManager
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManagerExtensions.RegisterViewWithRegion(Prism.Navigation.Regions.IRegionManager,System.String,System.Func{System.Object})">
            <summary>
            Associate a view with a region, using a delegate to resolve a concrete instance of the view.
            When the region gets displayed, this delegate will be called and the result will be added to the
            views collection of the region.
            </summary>
            <param name="regionManager">The current <see cref="T:Prism.Navigation.Regions.IRegionManager"/>.</param>
            <param name="regionName">The name of the region to associate the view with.</param>
            <param name="getContentDelegate">The delegate used to resolve a concrete instance of the view.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/>, for adding several views easily</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManagerExtensions.RegisterViewWithRegion``1(Prism.Navigation.Regions.IRegionManager,System.String)">
            <summary>
            Associate a view with a region, by registering a type. When the region get's displayed
            this type will be resolved using the ServiceLocator into a concrete instance. The instance
            will be added to the Views collection of the region
            </summary>
            <typeparam name="T">The type of the view to register with the  <see cref="T:Prism.Navigation.Regions.IRegion"/>.</typeparam>
            <param name="regionManager">The current <see cref="T:Prism.Navigation.Regions.IRegionManager"/>.</param>
            <param name="regionName">The name of the region to associate the view with.</param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/>, for adding several views easily</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManagerExtensions.RequestNavigate(Prism.Navigation.Regions.IRegionManager,System.String,System.Uri)">
            <summary>
            Navigates the specified region manager.
            </summary>
            <param name="regionManager">The current <see cref="T:Prism.Navigation.Regions.IRegionManager"/>.</param>
            <param name="regionName">The name of the region to call Navigate on.</param>
            <param name="source">The URI of the content to display.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManagerExtensions.RequestNavigate(Prism.Navigation.Regions.IRegionManager,System.String,System.Uri,System.Action{Prism.Navigation.NavigationResult})">
            <summary>
            Navigates the specified region manager.
            </summary>
            <param name="regionManager">The current <see cref="T:Prism.Navigation.Regions.IRegionManager"/>.</param>
            <param name="regionName">The name of the region to call Navigate on.</param>
            <param name="source">The URI of the content to display.</param>
            <param name="navigationCallback">The navigation callback.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManagerExtensions.RequestNavigate(Prism.Navigation.Regions.IRegionManager,System.String,System.String,System.Action{Prism.Navigation.NavigationResult})">
            <summary>
            Navigates the specified region manager.
            </summary>
            <param name="regionManager">The current <see cref="T:Prism.Navigation.Regions.IRegionManager"/>.</param>
            <param name="regionName">The name of the region to call Navigate on.</param>
            <param name="source">The URI of the content to display.</param>
            <param name="navigationCallback">The navigation callback.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManagerExtensions.RequestNavigate(Prism.Navigation.Regions.IRegionManager,System.String,System.String)">
            <summary>
            Navigates the specified region manager.
            </summary>
            <param name="regionManager">The current <see cref="T:Prism.Navigation.Regions.IRegionManager"/>.</param>
            <param name="regionName">The name of the region to call Navigate on.</param>
            <param name="source">The URI of the content to display.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManagerExtensions.RequestNavigate(Prism.Navigation.Regions.IRegionManager,System.String,System.String,System.Action{Prism.Navigation.NavigationResult},Prism.Navigation.INavigationParameters)">
            <summary>
            This method allows an IRegionManager to locate a specified region and navigate in it to the specified target string, passing a navigation callback and an instance of NavigationParameters, which holds a collection of object parameters.
            </summary>
            <param name="regionManager">The current <see cref="T:Prism.Navigation.Regions.IRegionManager"/>.</param>
            <param name="regionName">The name of the region where the navigation will occur.</param>
            <param name="target">A string that represents the target where the region will navigate.</param>
            <param name="navigationCallback">The navigation callback that will be executed after the navigation is completed.</param>
            <param name="navigationParameters">An instance of NavigationParameters, which holds a collection of object parameters.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManagerExtensions.RequestNavigate(Prism.Navigation.Regions.IRegionManager,System.String,System.Uri,Prism.Navigation.INavigationParameters)">
            <summary>
            This method allows an IRegionManager to locate a specified region and navigate in it to the specified target Uri, passing an instance of NavigationParameters, which holds a collection of object parameters.
            </summary>
            <param name="regionManager">The current <see cref="T:Prism.Navigation.Regions.IRegionManager"/>.</param>
            <param name="regionName">The name of the region where the navigation will occur.</param>
            <param name="target">A Uri that represents the target where the region will navigate.</param>
            <param name="navigationParameters">An instance of NavigationParameters, which holds a collection of object parameters.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionManagerExtensions.RequestNavigate(Prism.Navigation.Regions.IRegionManager,System.String,System.String,Prism.Navigation.INavigationParameters)">
            <summary>
            This method allows an IRegionManager to locate a specified region and navigate in it to the specified target string, passing an instance of NavigationParameters, which holds a collection of object parameters.
            </summary>
            <param name="regionManager">The current <see cref="T:Prism.Navigation.Regions.IRegionManager"/>.</param>
            <param name="regionName">The name of the region where the navigation will occur.</param>
            <param name="target">A string that represents the target where the region will navigate.</param>
            <param name="navigationParameters">An instance of NavigationParameters, which holds a collection of object parameters.</param>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegionMemberLifetime">
            <summary>
            When implemented, allows an instance placed in a <see cref="T:Prism.Navigation.Regions.IRegion"/>
            that uses a RegionMemberLifetimeBehavior to indicate
            it should be removed when it transitions from an activated to deactivated state.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegionMemberLifetime.KeepAlive">
            <summary>
            Gets a value indicating whether this instance should be kept-alive upon deactivation.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegionNavigationContentLoader">
            <summary>
            Identifies the view in a region that is the target of a navigation request.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionNavigationContentLoader.LoadContent(Prism.Navigation.Regions.IRegion,Prism.Navigation.Regions.NavigationContext)">
            <summary>
            Gets the content to which the navigation request represented by <paramref name="navigationContext"/> applies.
            </summary>
            <remarks>
            If none of the items in the region match the target of the navigation request, a new item
            will be created and added to the region.
            </remarks>
            <param name="region">The region.</param>
            <param name="navigationContext">The context representing the navigation request.</param>
            <returns>The item to be the target of the navigation request.</returns>
            <exception cref="T:System.InvalidOperationException">when a new item cannot be created for the navigation request.</exception>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegionNavigationJournal">
            <summary>
            Provides journaling of current, back, and forward navigation within regions.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegionNavigationJournal.CanGoBack">
            <summary>
            Gets a value that indicates whether there is at least one entry in the back navigation history.
            </summary>
            <value>
            <c>true</c> if the journal can go back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegionNavigationJournal.CanGoForward">
            <summary>
            Gets a value that indicates whether there is at least one entry in the forward navigation history.
            </summary>
            <value>
            <c>true</c> if this instance can go forward; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegionNavigationJournal.CurrentEntry">
            <summary>
            Gets the current navigation entry of the content that is currently displayed.
            </summary>
            <value>The current entry.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegionNavigationJournal.NavigationTarget">
            <summary>
            Gets or sets the target that implements INavigateAsync.
            </summary>
            <value>The INavigate implementation.</value>
            <remarks>
            This is set by the owner of this journal.
            </remarks>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionNavigationJournal.GoBack">
            <summary>
            Navigates to the most recent entry in the back navigation history, or does nothing if no entry exists in back navigation.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionNavigationJournal.GoForward">
            <summary>
            Navigates to the most recent entry in the forward navigation history, or does nothing if no entry exists in forward navigation.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionNavigationJournal.RecordNavigation(Prism.Navigation.Regions.IRegionNavigationJournalEntry,System.Boolean)">
            <summary>
            Records the navigation to the entry..
            </summary>
            <param name="entry">The entry to record.</param>
            <param name="persistInHistory">Keep Navigation object in memory when OnNavigationFrom is called</param>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionNavigationJournal.Clear">
            <summary>
            Clears the journal of current, back, and forward navigation histories.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegionNavigationJournalEntry">
            <summary>
            An entry in an IRegionNavigationJournal representing the URI navigated to.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegionNavigationJournalEntry.Uri">
            <summary>
            Gets or sets the URI.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegionNavigationJournalEntry.Parameters">
            <summary>
            Gets or sets the NavigationParameters instance.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegionNavigationService">
            <summary>
            Provides navigation for regions.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegionNavigationService.Region">
            <summary>
            Gets or sets the region owning this service.
            </summary>
            <value>A Region.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.IRegionNavigationService.Journal">
            <summary>
            Gets the journal.
            </summary>
            <value>The journal.</value>
        </member>
        <member name="E:Prism.Navigation.Regions.IRegionNavigationService.Navigating">
            <summary>
            Raised when the region is about to be navigated to content.
            </summary>
        </member>
        <member name="E:Prism.Navigation.Regions.IRegionNavigationService.Navigated">
            <summary>
            Raised when the region is navigated to content.
            </summary>
        </member>
        <member name="E:Prism.Navigation.Regions.IRegionNavigationService.NavigationFailed">
            <summary>
            Raised when a navigation request fails.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.IRegionViewRegistry">
            <summary>
            Defines the interface for the registry of region's content.
            </summary>
        </member>
        <member name="E:Prism.Navigation.Regions.IRegionViewRegistry.ContentRegistered">
            <summary>
            Event triggered when a content is registered to a region name.
            </summary>
            <remarks>
            This event uses weak references to the event handler to prevent this service (typically a singleton) of keeping the
            target element longer than expected.
            </remarks>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionViewRegistry.GetContents(System.String,Prism.Ioc.IContainerProvider)">
            <summary>
            Returns the contents associated with a region name.
            </summary>
            <param name="regionName">Region name for which contents are requested.</param>
            <param name="container">The <see cref="T:Prism.Ioc.IContainerProvider"/> to use to resolve the View.</param>
            <returns>Collection of contents associated with the <paramref name="regionName"/>.</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionViewRegistry.RegisterViewWithRegion(System.String,System.String)">
            <summary>
            Associate a view with a region, by registering a type. When the region get's displayed
            this type will be resolved using the ServiceLocator into a concrete instance. The instance
            will be added to the Views collection of the region
            </summary>
            <param name="regionName">The name of the region to associate the view with.</param>
            <param name="targetName">The type of the view to register with the </param>
            <returns>The <see cref="T:Prism.Navigation.Regions.IRegionManager"/>, for adding several views easily</returns>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionViewRegistry.RegisterViewWithRegion(System.String,System.Type)">
            <summary>
            Registers a content type with a region name.
            </summary>
            <param name="regionName">Region name to which the <paramref name="viewType"/> will be registered.</param>
            <param name="viewType">Content type to be registered for the <paramref name="regionName"/>.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.IRegionViewRegistry.RegisterViewWithRegion(System.String,System.Func{Prism.Ioc.IContainerProvider,System.Object})">
            <summary>
            Registers a delegate that can be used to retrieve the content associated with a region name.
            </summary>
            <param name="regionName">Region name to which the <paramref name="getContentDelegate"/> will be registered.</param>
            <param name="getContentDelegate">Delegate used to retrieve the content associated with the <paramref name="regionName"/>.</param>
        </member>
        <member name="T:Prism.Navigation.Regions.IViewsCollection">
            <summary>
            Defines a view of a collection.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.IViewsCollection.Contains(System.Object)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="value">The object to locate in the collection.</param>
            <returns><see langword="true" /> if <paramref name="value"/> is found in the collection; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:Prism.Navigation.Regions.NavigationAsyncExtensions">
            <summary>
            Provides additional methods to the <see cref="T:Prism.Navigation.Regions.INavigateAsync"/> interface.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.NavigationAsyncExtensions.RequestNavigate(Prism.Navigation.Regions.INavigateAsync,System.Uri,System.Action{Prism.Navigation.NavigationResult})">
            <summary>
            Initiates navigation to the target specified by the <see cref="T:System.Uri"/>.
            </summary>
            <param name="navigation">The navigation object.</param>
            <param name="target">The navigation target</param>
            <param name="navigationCallback">The callback executed when the navigation request is completed.</param>
            <remarks>
            Convenience overloads for this method can be found as extension methods on the
            <see cref="T:Prism.Navigation.Regions.NavigationAsyncExtensions"/> class.
            </remarks>
        </member>
        <member name="M:Prism.Navigation.Regions.NavigationAsyncExtensions.RequestNavigate(Prism.Navigation.Regions.INavigateAsync,System.String)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="target"/>.
            </summary>
            <param name="navigation">The navigation object.</param>
            <param name="target">The navigation target</param>
        </member>
        <member name="M:Prism.Navigation.Regions.NavigationAsyncExtensions.RequestNavigate(Prism.Navigation.Regions.INavigateAsync,System.String,System.Action{Prism.Navigation.NavigationResult})">
            <summary>
            Initiates navigation to the target specified by the <paramref name="target"/>.
            </summary>
            <param name="navigation">The navigation object.</param>
            <param name="target">The navigation target</param>
            <param name="navigationCallback">The callback executed when the navigation request is completed.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.NavigationAsyncExtensions.RequestNavigate(Prism.Navigation.Regions.INavigateAsync,System.Uri)">
            <summary>
            Initiates navigation to the target specified by the <see cref="T:System.Uri"/>.
            </summary>
            <param name="navigation">The navigation object.</param>
            <param name="target">The navigation target</param>
        </member>
        <member name="M:Prism.Navigation.Regions.NavigationAsyncExtensions.RequestNavigate(Prism.Navigation.Regions.INavigateAsync,System.String,System.Action{Prism.Navigation.NavigationResult},Prism.Navigation.INavigationParameters)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="target"/>.
            </summary>
            <param name="navigation">The navigation object.</param>
            <param name="target">The navigation target</param>
            <param name="navigationCallback">The callback executed when the navigation request is completed.</param>
            <param name="navigationParameters">An instance of NavigationParameters, which holds a collection of object parameters.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.NavigationAsyncExtensions.RequestNavigate(Prism.Navigation.Regions.INavigateAsync,System.Uri,Prism.Navigation.INavigationParameters)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="target"/>.
            </summary>
            <param name="navigation">The navigation object.</param>
            <param name="target">A Uri that represents the target where the region will navigate.</param>
            <param name="navigationParameters">An instance of NavigationParameters, which holds a collection of object parameters.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.NavigationAsyncExtensions.RequestNavigate(Prism.Navigation.Regions.INavigateAsync,System.String,Prism.Navigation.INavigationParameters)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="target"/>.
            </summary>
            <param name="navigation">The navigation object.</param>
            <param name="target">A string that represents the target where the region will navigate.</param>
            <param name="navigationParameters">An instance of NavigationParameters, which holds a collection of object parameters.</param>
        </member>
        <member name="T:Prism.Navigation.Regions.NavigationContext">
            <summary>
            Encapsulates information about a navigation request.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.NavigationContext.#ctor(Prism.Navigation.Regions.IRegionNavigationService,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.NavigationContext"/> class for a region name and a
            <see cref="P:Prism.Navigation.Regions.NavigationContext.Uri"/>.
            </summary>
            <param name="navigationService">The navigation service.</param>
            <param name="uri">The Uri.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.NavigationContext.#ctor(Prism.Navigation.Regions.IRegionNavigationService,System.Uri,Prism.Navigation.INavigationParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.NavigationContext"/> class for a region name and a
            <see cref="P:Prism.Navigation.Regions.NavigationContext.Uri"/>.
            </summary>
            <param name="navigationService">The navigation service.</param>
            <param name="navigationParameters">The navigation parameters.</param>
            <param name="uri">The Uri.</param>
        </member>
        <member name="P:Prism.Navigation.Regions.NavigationContext.NavigationService">
            <summary>
            Gets the region navigation service.
            </summary>
            <value>The navigation service.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.NavigationContext.Uri">
            <summary>
            Gets the navigation URI.
            </summary>
            <value>The navigation URI.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.NavigationContext.Parameters">
            <summary>
            Gets the <see cref="T:Prism.Navigation.INavigationParameters"/> extracted from the URI and the object parameters passed in navigation.
            </summary>
            <value>The URI query.</value>
        </member>
        <member name="T:Prism.Navigation.Regions.NavigationContextExtensions">
            <summary>
            Provides extensions for the Navigation Context
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.NavigationContextExtensions.NavigatedName(Prism.Navigation.Regions.NavigationContext)">
            <summary>
            Gets the Navigation Segment name from the <see cref="T:Prism.Navigation.Regions.NavigationContext"/>.
            </summary>
            <param name="context">The current instance of the <see cref="T:Prism.Navigation.Regions.NavigationContext"/>.</param>
            <returns>The View Name that was navigated to.</returns>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionBehavior">
            <summary>
            Provides a base class for region's behaviors.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionBehavior.Region">
            <summary>
            Behavior's attached region.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionBehavior.IsAttached">
            <summary>
            Returns <see langword="true"/> if the behavior is attached to a region, <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionBehavior.Attach">
            <summary>
            Attaches the behavior to the region.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionBehavior.OnAttach">
            <summary>
            Override this method to perform the logic after the behavior has been attached.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionBehaviorCollection">
            <summary>
            A collection of <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/> instances, that are stored and retrieved by Key.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionBehaviorCollection.#ctor(Prism.Navigation.Regions.IRegion)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.RegionBehaviorCollection"/> class and associates it with a region.
            </summary>
            <param name="region">The region to associate the behavior collection with.</param>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionBehaviorCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/> with the specified key.
            </summary>
            <value>The RegionBehavior that's registered with the key.</value>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionBehaviorCollection.Add(System.String,Prism.Navigation.Regions.IRegionBehavior)">
            <summary>
            Adds a <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/> to the collection, using the specified key as an indexer.
            </summary>
            <param name="key">The key that specifies the type of <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/> that's added.</param>
            <param name="regionBehavior">The <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/> to add.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown is the <paramref name="key"/> parameter is Null,
            or if the <paramref name="regionBehavior"/> parameter is Null.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if a behavior with the specified Key parameter already exists.</exception>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionBehaviorCollection.ContainsKey(System.String)">
            <summary>
            Checks if a <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/> with the specified key is already present.
            </summary>
            <param name="key">The key to use to find a particular <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionBehaviorCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionBehaviorCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionBehaviorFactory">
            <summary>
            Defines a factory that allows the registration of the default set of <see cref="T:Prism.Navigation.Regions.IRegionBehavior"/>, that will
            be added to the <see cref="T:Prism.Navigation.Regions.IRegionBehaviorCollection"/> of all <see cref="T:Prism.Navigation.Regions.IRegion"/>s, unless overridden on a 'per-region' basis.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionBehaviorFactory.#ctor(Prism.Ioc.IContainerExtension)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Navigation.Regions.RegionBehaviorFactory"/>.
            </summary>
            <param name="container"><see cref="T:Prism.Ioc.IContainerExtension"/> used to create the instance of the behavior from its <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionBehaviorFactory.AddIfMissing(System.String,System.Type)">
            <summary>
            Adds a particular type of RegionBehavior if it was not already registered. The <paramref name="behaviorKey"/> string is used to check if the behavior is already present
            </summary>
            <param name="behaviorKey">The behavior key that's used to find if a certain behavior is already added.</param>
            <param name="behaviorType">Type of the behavior to add.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionBehaviorFactory.CreateFromKey(System.String)">
            <summary>
            Creates an instance of the behavior <see cref="T:System.Type"/> that is registered using the specified key.
            </summary>
            <param name="key">The key that is used to register a behavior type.</param>
            <returns>A new instance of the behavior. </returns>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionBehaviorFactory.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionBehaviorFactory.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionBehaviorFactory.ContainsKey(System.String)">
            <summary>
            Determines whether a behavior with the specified key already exists.
            </summary>
            <param name="behaviorKey">The behavior key.</param>
            <returns>
            <see langword="true"/> if a behavior with the specified key is present; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionCreationException">
            <summary>
            An exception used when encountering an error in the creation of a Region
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionCreationException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Prism.Navigation.Regions.RegionCreationException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Prism.Navigation.Regions.RegionCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Prism.Navigation.Regions.RegionCreationException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:Prism.Navigation.Regions.RegionException">
            <summary>
            Provides a common base class for Region Exceptions
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Prism.Navigation.Regions.RegionException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Prism.Navigation.Regions.RegionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Prism.Navigation.Regions.RegionException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:Prism.Navigation.Regions.RegionMemberLifetimeAttribute">
            <summary>
            When <see cref="T:Prism.Navigation.Regions.RegionMemberLifetimeAttribute"/> is applied to class provides data
            the RegionMemberLifetimeBehavior can use to determine if the instance should
            be removed when it is deactivated.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionMemberLifetimeAttribute.#ctor">
            <summary>
            Instantiates an instance of <see cref="T:Prism.Navigation.Regions.RegionMemberLifetimeAttribute"/>
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionMemberLifetimeAttribute.KeepAlive">
            <summary>
             Determines if the region member should be kept-alive
             when deactivated.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionNavigationEventArgs">
            <summary>
            EventArgs used with the Navigated event.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationEventArgs.#ctor(Prism.Navigation.Regions.NavigationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.RegionNavigationEventArgs"/> class.
            </summary>
            <param name="navigationContext">The navigation context.</param>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionNavigationEventArgs.NavigationContext">
            <summary>
            Gets the navigation context.
            </summary>
            <value>The navigation context.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionNavigationEventArgs.Uri">
            <summary>
            Gets the navigation URI
            </summary>
            <value>The URI.</value>
            <remarks>
            This is a convenience accessor around NavigationContext.Uri.
            </remarks>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionNavigationFailedEventArgs">
            <summary>
            EventArgs used with the NavigationFailed event.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationFailedEventArgs.#ctor(Prism.Navigation.Regions.NavigationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.RegionNavigationEventArgs"/> class.
            </summary>
            <param name="navigationContext">The navigation context.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationFailedEventArgs.#ctor(Prism.Navigation.Regions.NavigationContext,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.RegionNavigationFailedEventArgs"/> class.
            </summary>
            <param name="navigationContext">The navigation context.</param>
            <param name="error">The error.</param>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionNavigationFailedEventArgs.NavigationContext">
            <summary>
            Gets the navigation context.
            </summary>
            <value>The navigation context.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionNavigationFailedEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The <see cref="T:System.Exception"/>, or <see langword="null"/> if the failure was not caused by an exception.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionNavigationFailedEventArgs.Uri">
            <summary>
            Gets the navigation URI
            </summary>
            <value>The URI.</value>
            <remarks>
            This is a convenience accessor around NavigationContext.Uri.
            </remarks>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionNavigationJournal">
            <summary>
            Provides journaling of current, back, and forward navigation within regions.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionNavigationJournal.NavigationTarget">
            <summary>
            Gets or sets the target that implements INavigate.
            </summary>
            <value>The INavigate implementation.</value>
            <remarks>
            This is set by the owner of this journal.
            </remarks>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionNavigationJournal.CurrentEntry">
            <summary>
            Gets the current navigation entry of the content that is currently displayed.
            </summary>
            <value>The current entry.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionNavigationJournal.CanGoBack">
            <summary>
            Gets a value that indicates whether there is at least one entry in the back navigation history.
            </summary>
            <value><c>true</c> if the journal can go back; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionNavigationJournal.CanGoForward">
            <summary>
            Gets a value that indicates whether there is at least one entry in the forward navigation history.
            </summary>
            <value>
            	<c>true</c> if this instance can go forward; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationJournal.GoBack">
            <summary>
            Navigates to the most recent entry in the back navigation history, or does nothing if no entry exists in back navigation.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationJournal.GoForward">
            <summary>
            Navigates to the most recent entry in the forward navigation history, or does nothing if no entry exists in forward navigation.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationJournal.RecordNavigation(Prism.Navigation.Regions.IRegionNavigationJournalEntry,System.Boolean)">
            <summary>
            Records the navigation to the entry..
            </summary>
            <param name="entry">The entry to record.</param>
            <param name="persistInHistory">Determine if the view is added to the back stack or excluded from the history.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationJournal.Clear">
            <summary>
            Clears the journal of current, back, and forward navigation histories.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionNavigationJournalEntry">
            <summary>
            An entry in an IRegionNavigationJournal representing the URI navigated to.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionNavigationJournalEntry.Uri">
            <summary>
            Gets or sets the URI.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:Prism.Navigation.Regions.RegionNavigationJournalEntry.Parameters">
            <summary>
            Gets or sets the NavigationParameters instance.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionNavigationJournalEntry.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionViewException">
            <summary>
            An exception when there is an issue with a View being added to a Region
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionViewException.#ctor">
            <summary>
            Initializes a new <see cref="T:Prism.Navigation.Regions.RegionViewException"/>
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionViewException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Prism.Navigation.Regions.RegionViewException"/>
            </summary>
            <param name="message">The Exception Message.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionViewException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Prism.Navigation.Regions.RegionViewException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Prism.Navigation.Regions.RegionViewException"/>
            </summary>
            <param name="message">The Exception Message.</param>
            <param name="innerException">The Inner <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="T:Prism.Navigation.Regions.RegionViewRegistryExtensions">
            <summary>
            Provides extensions for the <see cref="T:Prism.Navigation.Regions.IRegionViewRegistry"/>.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionViewRegistryExtensions.RegisterViewWithRegion(Prism.Navigation.Regions.IRegionViewRegistry,System.String,System.Func{System.Object})">
            <summary>
            Registers a delegate that can be used to retrieve the content associated with a region name.
            </summary>
            <param name="viewRegistry">The <see cref="T:Prism.Navigation.Regions.IRegionViewRegistry"/> instance.</param>
            <param name="regionName">Region name to which the <paramref name="getContentDelegate"/> will be registered.</param>
            <param name="getContentDelegate">Delegate used to retrieve the content associated with the <paramref name="regionName"/>.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.RegionViewRegistryExtensions.GetContents(Prism.Navigation.Regions.IRegionViewRegistry,System.String)">
            <summary>
            Returns the contents associated with a region name.
            </summary>
            <param name="viewRegistry">The current <see cref="T:Prism.Navigation.Regions.IRegionViewRegistry"/> instance.</param>
            <param name="regionName">Region name for which contents are requested.</param>
            <returns>Collection of contents associated with the <paramref name="regionName"/>.</returns>
        </member>
        <member name="T:Prism.Navigation.Regions.SyncActiveStateAttribute">
            <summary>
            Defines that a view is synchronized with its parent view's Active state.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.UpdateRegionsException">
            <summary>
            Represents errors that occurred during the regions' update.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.UpdateRegionsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.UpdateRegionsException"/>
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.UpdateRegionsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.UpdateRegionsException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.UpdateRegionsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.UpdateRegionsException"/> class with a specified error message and a reference
            to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.UpdateRegionsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.UpdateRegionsException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Prism.Navigation.Regions.ViewRegisteredEventArgs">
            <summary>
            Argument class used by the <see cref="E:Prism.Navigation.Regions.IRegionViewRegistry.ContentRegistered"/> event when a new content is registered.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewRegisteredEventArgs.#ctor(System.String,System.Func{Prism.Ioc.IContainerProvider,System.Object})">
            <summary>
            Initializes the ViewRegisteredEventArgs class.
            </summary>
            <param name="regionName">The region name to which the content was registered.</param>
            <param name="getViewDelegate">The content which was registered.</param>
        </member>
        <member name="P:Prism.Navigation.Regions.ViewRegisteredEventArgs.RegionName">
            <summary>
            Gets the region name to which the content was registered.
            </summary>
        </member>
        <member name="P:Prism.Navigation.Regions.ViewRegisteredEventArgs.GetView">
            <summary>
            Gets the content which was registered.
            </summary>
        </member>
        <member name="T:Prism.Navigation.Regions.ViewRegistrationException">
            <summary>
            Exception that's thrown when something goes wrong while Registering a View with a region name in the <see cref="!:RegionViewRegistry"/> class.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewRegistrationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.ViewRegistrationException"/> class.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewRegistrationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.ViewRegistrationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewRegistrationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.ViewRegistrationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewRegistrationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.ViewRegistrationException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Prism.Navigation.Regions.ViewSortHintAttribute">
            <summary>
            Provides a hint from a view to a region on how to sort the view.
            </summary>
        </member>
        <member name="M:Prism.Navigation.Regions.ViewSortHintAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prism.Navigation.Regions.ViewSortHintAttribute"/> class.
            </summary>
            <param name="hint">The hint to use for sorting.</param>
        </member>
        <member name="P:Prism.Navigation.Regions.ViewSortHintAttribute.Hint">
            <summary>
            Gets  the hint.
            </summary>
            <value>The hint to use for sorting.</value>
        </member>
        <member name="T:Prism.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.CannotRegisterCompositeCommandInItself">
            <summary>
              Looks up a localized string similar to Cannot register a CompositeCommand in itself..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.CannotRegisterSameCommandTwice">
            <summary>
              Looks up a localized string similar to Cannot register the same command twice in the same CompositeCommand..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.CanOnlyAddTypesThatInheritIFromRegionBehavior">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not implement from IRegionBehavior..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.CyclicDependencyFound">
            <summary>
              Looks up a localized string similar to At least one cyclic dependency has been found in the module catalog. Cycles in the module dependencies must be avoided..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DefaultDebugLoggerPattern">
            <summary>
              Looks up a localized string similar to {1}: {2}. Priority: {3}. Timestamp:{0:u}..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DelegateCommandDelegatesCannotBeNull">
            <summary>
              Looks up a localized string similar to Neither the executeMethod nor the canExecuteMethod delegates can be null..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DelegateCommandInvalidGenericPayloadType">
            <summary>
              Looks up a localized string similar to T for DelegateCommand&lt;T&gt; is not an object nor Nullable..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DependencyForUnknownModule">
            <summary>
              Looks up a localized string similar to Cannot add dependency for unknown module {0}.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DependencyOnMissingModule">
            <summary>
              Looks up a localized string similar to A module declared a dependency on another module which is not declared to be loaded. Missing module(s): {0}.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.DuplicatedModule">
            <summary>
              Looks up a localized string similar to A duplicated module with name {0} has been found by the loader..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.FailedToLoadModule">
            <summary>
              Looks up a localized string similar to An exception occurred while initializing module &apos;{0}&apos;. 
               - The exception message was: {2}
               - The Assembly that the module was trying to be loaded from was:{1}
               Check the InnerException property of the exception for more information. If the exception occurred while creating an object in a DI container, you can exception.GetRootException() to help locate the root cause of the problem..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.FailedToLoadModuleNoAssemblyInfo">
            <summary>
              Looks up a localized string similar to An exception occurred while initializing module &apos;{0}&apos;. 
               - The exception message was: {1}
               Check the InnerException property of the exception for more information. If the exception occurred 
               while creating an object in a DI container, you can exception.GetRootException() to help locate the 
               root cause of the problem..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.FailedToRetrieveModule">
             <summary>
               Looks up a localized string similar to Failed to load type for module {0}. 
            Error was: {1}..
             </summary>
        </member>
        <member name="P:Prism.Properties.Resources.InvalidPropertyNameException">
            <summary>
              Looks up a localized string similar to The entity does not contain a property with that name.
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.ModuleDependenciesNotMetInGroup">
            <summary>
              Looks up a localized string similar to Module {0} depends on other modules that don&apos;t belong to the same group..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.PropertySupport_ExpressionNotProperty_Exception">
            <summary>
              Looks up a localized string similar to The member access expression does not access a property..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.PropertySupport_NotMemberAccessExpression_Exception">
            <summary>
              Looks up a localized string similar to The expression is not a member access expression..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.PropertySupport_StaticExpression_Exception">
            <summary>
              Looks up a localized string similar to The referenced property is a static property..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.RegionBehaviorAttachCannotBeCallWithNullRegion">
            <summary>
              Looks up a localized string similar to The Attach method cannot be called when Region property is null..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.RegionBehaviorRegionCannotBeSetAfterAttach">
            <summary>
              Looks up a localized string similar to The Region property cannot be set after Attach method has been called..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.StartupModuleDependsOnAnOnDemandModule">
            <summary>
              Looks up a localized string similar to Module {0} is marked for automatic initialization when the application starts, but it depends on modules that are marked as OnDemand initialization. To fix this error, mark the dependency modules for InitializationMode=WhenAvailable, or remove this validation by extending the ModuleCatalog class..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.StringCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to The provided String argument {0} must not be null or empty..
            </summary>
        </member>
        <member name="P:Prism.Properties.Resources.TypeWithKeyNotRegistered">
            <summary>
              Looks up a localized string similar to No BehaviorType with key &apos;{0}&apos; was registered..
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskExtensions">
            <summary>
            Extension methods for the Task object.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.Await(System.Threading.Tasks.Task)">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <param name="task">The task to be awaited</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.Await(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <param name="task">The task to be awaited</param>
            <param name="configureAwait">Configures an awaiter used to await this task</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.Await(System.Threading.Tasks.Task,System.Action)">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <param name="task">The task to be awaited</param>
            <param name="completedCallback">The action to perform when the task is complete.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.Await(System.Threading.Tasks.Task,System.Action,System.Action{System.Exception})">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <param name="task">The task to be awaited</param>
            <param name="completedCallback">The action to perform when the task is complete.</param>
            <param name="errorCallback">The action to perform when an error occurs executing the task.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.Await(System.Threading.Tasks.Task,System.Action{System.Exception})">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <param name="task">The task to be awaited</param>
            <param name="errorCallback">The action to perform when an error occurs executing the task.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.Await(System.Threading.Tasks.Task,System.Action,System.Action{System.Exception},System.Boolean)">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <param name="task">The task to be awaited</param>
            <param name="completedCallback">The action to perform when the task is complete.</param>
            <param name="errorCallback">The action to perform when an error occurs executing the task.</param>
            <param name="configureAwait">Configures an awaiter used to await this task</param>
        </member>
        <member name="T:System.Threading.Tasks.TaskExtensionsT">
            <summary>
            Extension methods for the Task object.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensionsT.Await``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <typeparam name="T">The result type</typeparam>
            <param name="task">The task to be awaited</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensionsT.Await``1(System.Threading.Tasks.Task{``0},System.Boolean)">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <typeparam name="T">The result type</typeparam>
            <param name="task">The task to be awaited</param>
            <param name="configureAwait">Configures an awaiter used to await this task</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensionsT.Await``1(System.Threading.Tasks.Task{``0},System.Action{``0})">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <typeparam name="T">The result type</typeparam>
            <param name="task">The task to be awaited</param>
            <param name="completedCallback">The action to perform when the task is complete.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensionsT.Await``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <typeparam name="T">The result type</typeparam>
            <param name="task">The task to be awaited</param>
            <param name="completedCallback">The action to perform when the task is complete.</param>
            <param name="errorCallback">The action to perform when an error occurs executing the task.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensionsT.Await``1(System.Threading.Tasks.Task{``0},System.Action{System.Exception})">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <typeparam name="T">The result type</typeparam>
            <param name="task">The task to be awaited</param>
            <param name="errorCallback">The action to perform when an error occurs executing the task.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensionsT.Await``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Action{System.Exception},System.Boolean)">
            <summary>
            Awaits a task without blocking the main thread.
            </summary>
            <remarks>Primarily used to replace async void scenarios such as ctor's and ICommands.</remarks>
            <typeparam name="T">The result type</typeparam>
            <param name="task">The task to be awaited</param>
            <param name="completedCallback">The action to perform when the task is complete.</param>
            <param name="errorCallback">The action to perform when an error occurs executing the task.</param>
            <param name="configureAwait">Configures an awaiter used to await this task</param>
        </member>
    </members>
</doc>
